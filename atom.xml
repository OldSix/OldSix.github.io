<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Six&#39;s a Coder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-14T08:42:45.808Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Six</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程--死锁</title>
    <link href="http://yoursite.com/2017/05/13/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%AD%BB%E9%94%81/"/>
    <id>http://yoursite.com/2017/05/13/多线程-死锁/</id>
    <published>2017-05-12T18:20:49.000Z</published>
    <updated>2017-05-14T08:42:45.808Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>寿命的缩短与思想的虚耗成正比。<br>—— <strong>达尔文</strong><br></blockquote>

<p>本文将简要介绍，死锁的基本概念以及造成死锁的原因和解决方法。</p>
<h2 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h2><p>在计算机系统中有很多一次只能由一个进程使用的资源，如打印机，磁带机，一个文件的I节点等。<br>在多道程序设计环境中，若干进程往往要共享这类资源，而且一个进程所需要的资源不止一个。<br>这样，就会出现若干进程竞争有限资源，又推进顺序不当，从而构成无限期循环等待的局面。<br>这种状态就是死锁。<br><a id="more"></a></p>
<p>死锁是进程死锁的简称，是由Dijkstra于1965年研究银行家算法时首先提出来的。它是计算机操作系统乃至并发程序设计中最难处理的问题之一。实际上，死锁问题不仅在计算机系统中存在，在我们日常生活中它也广泛存在。</p>
<h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>先看2个例子：<br>1.在一条河上，有一座桥，桥面比较窄，只能容纳一辆汽车通过，无法两辆汽车并行。如果此时恰好有<br>两辆汽车分别在桥的两端驶上该桥，对A车来说，它走过桥的一段路（或者说占有了桥的一部分资源），要想通过桥还需等待B车让出另一端桥面，此时A车不能前进；对于B车来说，它走过桥的一段路（或者说占有了桥的一部分资源），要想通过桥还需等待A车让出另一端桥面，此时B车也不能前进。两边的车都不倒车，就导致造成互相等待对方让出桥面（资源），但是谁也不让路，就会无休止的等下去，这种现象就是死锁。<br>如果把汽车比喻成进程（或者线程），桥面比作资源，那么上述问题就描述为：进程A占有资源R1，等待进程B占有的资源R2；进程B占有资源R2，等待进程A占有的资源R1。而且资源R1和R2只允许一个进程占用，即，不允许两个进程同时占用。结果，两个进程都不能继续执行，若不采取其他措施，这种循环等待状况会无限期的持续下去，就发生了进程死锁。<br>2.在计算机系统中，涉及软件，硬件资源都可能发生死锁。例如：系统中只有一台CD-ROM驱动器和一台打印机，某一个进程占有了CD-ROM驱动器，又申请打印机；另一个进程占有了打印机，还申请CD-ROM。结果，两个进程都被阻塞，永远不能自行解除。</p>
<p>所谓死锁，就是指多个进程循环等待它方占有的资源而无限期地僵持下去的局面。很显然，如果没有外力的作用，那么死锁涉及到的各个进程将永远处于封锁状态。</p>
<h3 id="死锁的必要条件"><a href="#死锁的必要条件" class="headerlink" title="死锁的必要条件"></a>死锁的必要条件</h3><p>以下四个条件只要有一个不具备，那么系统就不会出现死锁：</p>
<p>（1）互斥条件。即某个资源在一段时间内只能由一个进程占有，不能同时被两个或两个以上的进程占有。这种独占资源如CD-ROM驱动器，打印机等等，必须在占有该资源的进程主动释放它只会，其它进程才能占有该资源。这是由资源本身的属性所决定。</p>
<p>（2）不可抢占条件。进程所获得的资源在未使用完毕之前，资源申请者不能强行地从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放。如过独木桥的人不能强迫对方后退，也不能非法地将对方推下桥，必须是桥上的人自己过桥后空出桥面（即主动释放占有资源），对方的人才能过桥。</p>
<p>（3）占有且申请条件。进程至少已经占有一个资源，但又申请新的资源；由于该资源已被另外进程占有此时该进程阻塞；而且，它在等待新资源的同时，仍在继续占用已占有的资源。</p>
<p>（4）循环等待条件。存在一个进程等待的序列（P1,P2,…,Pn）,其中P1等待P2所占有的某一资源，P2等待P3所占有的某一资源，…，而Pn等待P1所占有的某一资源，形成一个进程循环等待环。</p>
<p>只有上述四个条件在死锁时会同时发生，也就是说，只要有一个必要条件不满足，则死锁就可以排除。</p>
<h2 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h2><p>前面介绍了死锁的四个必要条件，那么只要破坏这四个必要条件中任意一个条件，那么死锁就不会发生。这就为解决死锁问题提供了可能。</p>
<p>（1）打破互斥条件。即允许进程同时访问某些资源。但是，有的资源是不允许被同时访问的，像打印机等等，这是由资源本身的属性所决定的。所以，这种办法并无使用价值。</p>
<p>（2）打破不可抢占条件。即允许进程强行从占有者那里夺取某些资源。就是说，当一个进程已占有了某些资源，它又申请了新的资源，但不能立即被满足时，它必须释放所占有的全部资源，以后再重新申请。它所释放的资源可以分配给其它进程。这就相当于该进程占有的资源被隐蔽地强占了。这种预防死锁的方法实现起来苦难，会降低系统性能。</p>
<p>（3）打破占有且申请条件。可以实行资源预先分配策略。即进程在运行前一次性地向系统申请它所需要的全部资源。如果某个进程所需的全部资源得不到满足，则不分配任何资源，此进程暂不运行。只有当系统能够满足当前进程的全部资源需求时，才一次性地将所申请的资源全部分配给该进程。由于运行的进程已占有了它所需的全部资源，所以不会发生占有资源又申请资源的现象，因此不会发生死锁。但是，这种策略也有如下缺点：</p>
<ul>
<li>在许多情况下，一个进程在执行之前不可能知道它所需要的全部资源。这是由于进程在执行时是动态的，可不预测的；</li>
<li>资源利用率低。无论所分资源何时用到，一个进程只有在占有所需的全部资源后才能执行。即使有些资源最后才被该进程用到一次，在该进程在生存期间却一直占有它们，造成长期占着不用的状况。这显然是一种极大的资源浪费。</li>
<li>降低了进程的并发性。因为资源有限，又加上存在浪费，能分配到所需的全部资源的进程个数就必然少了。</li>
</ul>
<p>（4）打破循环等待条件。实行资源有序分配策略。采用这种策略，即把资源事先分类编号，按号分配，使进程在申请，占用资源时不会形成环路。所有进程对资源的请求必须严格按照资源序号递增的顺序提出。进程占用了小号资源，才能申请大号资源，就不会产生环路，从而预防了死锁。这种策略与前面的策略相比，资源的利用率和系统吞吐量都有很大提高，但是也存在以下缺点：</p>
<ul>
<li>限制了进程对资源的请求，同时给系统中所有资源合理编号也是件困难事，并增加了系统开销；</li>
<li>为了遵循按编号申请的次序，暂不使用的资源也需要提前申请，从而增加了进程对资源的占用时间。</li>
</ul>
<h2 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h2><p>上面我们讲到的死锁预防是排除死锁的静态策略，它使产生死锁的四个必要条件不能同时具备，从而对进程申请资源的活动加以限制，以保证死锁不会发生。下面我们介绍排除死锁的动态策略–死锁的避免，它不限制进程有关申请资源的命令，而是对进程所发出的每一个申请资源命令加以动态地检查，并根据检查结果决定是否进行资源分配。就是说，在资源分配过程中若预测有发生死锁的可能性，则加以避免。这种方法的关键是确定资源分配的安全性。</p>
<h3 id="安全序列"><a href="#安全序列" class="headerlink" title="安全序列"></a>安全序列</h3><p>我们首先引入安全序列的定义：所谓系统是安全的，是指系统中所有进程能够按照某一种次序分配资源。并且依次地运行完毕，这种进程序列（P1，P2，…，Pn）就是安全序列。如果存在这样一个安全序列，则系统就是安全的；如果不存在这样一个安全序列，则系统是不安全的。</p>
<p>安全序列『P1，P2，…，Pn』是这样组成的：若对每一个进程Pi，它需要的附加资源可以被系统中当前可用资源加上所有进程Pj当前所占有资源之和所满足，则{P1,P2,…Pn}为一个安全序列，这时系统处于安全状态，不会进入死锁状态。</p>
<p>虽然存在安全序列时一定不会有死锁发生，但是系统进入不了不安全状态（四个死锁的必要条件同时发生）也未必会产生死锁。当然，产生死锁后，系统一定处于不安全状态。</p>
<h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><p>这是一个著名的避免死锁的算法，是由Dijstra首先提出来并加以解决的。</p>
<p><strong>背景知识</strong>：<br>一个银行家如何将一定数目的资金安全地借给若干客户，使这些客户既能借到钱完成要干的事，同时银行家又能收回全部资金而不至于破产，这就是银行家问题，这个问题同操作系统中资源分配问题十分相似：银行家就像一个操作系统，客户就像运行时的进程，银行家的资金就是系统的资源。</p>
<p><strong>问题的描述</strong></p>
<p>一个银行家拥有一定数量的资金，有若干个客户要贷款。每个客户须在一开始就声明他所需贷款的总额。若该客户贷款总额不超过银行家的资金总数，银行家可以接收客户的要求。客户贷款是以每次一个资金单位的方式进行的，客户在借满所需的全部单位款额之前可能会等待，但银行家保证这种等待是有限的，可完成的。</p>
<p>例如：有三个客户C1，C2，C3，向银行家贷款，该银行家的资金总额为10个资金单位，其中C1客户要借9个资金单位，C2客户要借3个资金单位，C3要借8个资金单位，总计20个资金单位。某一时刻的状态图所示：</p>
<p><img src="http://static.zybuluo.com/zhiyu/tg9d07hncpmyrhxi0dgfqa2m/QQ%E6%88%AA%E5%9B%BE20170514163934.jpg" alt="QQ截图20170514163934.jpg-13.6kB"></p>
<p>  对于a图的状态，按照安全序列的要求，我们选的第一个客户应满足该客户所需的贷款小于等于银行家当前所剩余的钱款，可以看出只有C2客户能被满足：C2客户需1个资金单位，小银行家手中的2个资金单位，于是银行家把1个资金单位借给C2客户，使之完成工作并归还所借的3个资金单位的钱，进入b图。同理，银行家把4个资金单位借给C3客户，使其完成工作，在c图中，只剩一个客户C1，它需7个资金单位，这时银行家有8个资金单位，所以C1也能顺利借到钱并完成工作。最后（见图d）银行家收回全部10个资金单位，保证不赔本。那麽客户序列{C1，C2，C3}就是个安全序列，按照这个序列贷款，银行家才是安全的。否则的话，若在图b状态时，银行家把手中的4个资金单位借给了C1，则出现不安全状态：这时C1，C3均不能完成工作，而银行家手中又没有钱了，系统陷入僵持局面，银行家也不能收回投资。</p>
<p>  综上所述，银行家算法是从当前状态出发，逐个按安全序列检查各客户谁能完成其工作，然后假定其完成工作且归还全部贷款，再进而检查下一个能完成工作的客户，……。如果所有客户都能完成工作，则找到一个安全序列，银行家才是安全的。</p>
<p>  从上面分析看出，银行家算法允许死锁必要条件中的互斥条件，占有且申请条件，不可抢占条件的存在，这样，它与预防死锁的几种方法相比较，限制条件少了，资源利用程度提高了。</p>
<p>参考文献：<a href="http://blog.csdn.net/abigale1011/article/details/6450845" target="_blank" rel="external">什么是死锁及死锁的必要条件和解决方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;寿命的缩短与思想的虚耗成正比。&lt;br&gt;—— &lt;strong&gt;达尔文&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;本文将简要介绍，死锁的基本概念以及造成死锁的原因和解决方法。&lt;/p&gt;
&lt;h2 id=&quot;死锁的概念&quot;&gt;&lt;a href=&quot;#死锁的概念&quot; class=&quot;headerlink&quot; title=&quot;死锁的概念&quot;&gt;&lt;/a&gt;死锁的概念&lt;/h2&gt;&lt;p&gt;在计算机系统中有很多一次只能由一个进程使用的资源，如打印机，磁带机，一个文件的I节点等。&lt;br&gt;在多道程序设计环境中，若干进程往往要共享这类资源，而且一个进程所需要的资源不止一个。&lt;br&gt;这样，就会出现若干进程竞争有限资源，又推进顺序不当，从而构成无限期循环等待的局面。&lt;br&gt;这种状态就是死锁。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="死锁" scheme="http://yoursite.com/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="http://yoursite.com/2017/05/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2017/05/11/二叉树的遍历/</id>
    <published>2017-05-11T10:44:28.000Z</published>
    <updated>2017-05-12T18:19:32.408Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>较高级复杂的劳动，是这样一种劳动力的表现，这种劳动力比较普通的劳动力需要较高的教育费用，它的生产需要花费较多的劳动时间。因此，具有较高的价值。<br>—— <strong>马克思</strong><br></blockquote>

<p>本文重要介绍一些二叉树的遍历—分为递归遍历和非递归遍历两种情况进行讨论。</p>
<h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>前序遍历，优先访问根节点，然后再分别访问左孩子和右孩子。</p>
<h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">( TreeNode * root )</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;root-&gt;data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    preOrder(root-&gt;leftNode);</div><div class="line">    preOrder(root-&gt;rightNode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h3><p>思路：使用stack作为辅助容器。入栈根节点的左孩子，左孩子还有左孩子依次循环入栈，然后pop出栈顶节点，再压入栈顶节点的右孩子，再去找这个右孩子的左孩子，依次类推。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder2</span><span class="params">( TreeNode * root , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path )</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">    TreeNode *p = root;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( p != <span class="literal">NULL</span> || !s.empty() )&#123;</div><div class="line">        <span class="keyword">while</span>( p != <span class="literal">NULL</span> )&#123;<span class="comment">// 节点的左孩子入栈，左孩子还有左孩子继续入栈</span></div><div class="line">            path.push_back(p-&gt;val);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 输出，也就相当于遍历了该节点（入栈前就打印）</span></div><div class="line">            s.push(p);</div><div class="line">            p = p-&gt;leftNode;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>( !s.empty() )&#123;</div><div class="line">            p = s.top();</div><div class="line">            s.pop();<span class="comment">// pop出栈顶元素</span></div><div class="line">            p = p-&gt;rightNode;<span class="comment">// 如果栈顶元素有右孩子，那么去这个右孩子的左孩子。。没有，再找下一个栈顶节点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>中序遍历与前序区别不大：前序是入栈时打印，中序是出栈时打印。</p>
<h3 id="递归版本-1"><a href="#递归版本-1" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">( TreeNode * root )</span></span>&#123;</div><div class="line">    inOrder(root-&gt;leftNode);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;root-&gt;data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    inOrder(root-&gt;rightNode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非递归版本-1"><a href="#非递归版本-1" class="headerlink" title="非递归版本"></a>非递归版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder2</span><span class="params">( TreeNode * root , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path )</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">    TreeNode *p = root;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( p != <span class="literal">NULL</span> || !s.empty() )&#123;</div><div class="line">        <span class="keyword">while</span>( p != <span class="literal">NULL</span> )&#123;<span class="comment">// 节点的左孩子入栈，左孩子还有左孩子继续入栈</span></div><div class="line">            s.push(p);</div><div class="line">            p = p-&gt;leftNode;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>( !s.empty() )&#123;</div><div class="line">            p = s.top();</div><div class="line">            s.pop();<span class="comment">// pop出栈顶元素</span></div><div class="line">            path.push_back(p-&gt;val);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 输出，也就相当于遍历了该节点（入栈前就打印）</span></div><div class="line">            p = p-&gt;rightNode;<span class="comment">// 如果栈顶元素有右孩子，那么去这个右孩子的左孩子。。没有，再找下一个栈顶节点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>应用之一：树的销毁。</p>
<h3 id="递归版本-2"><a href="#递归版本-2" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">( TreeNode * root )</span></span>&#123;</div><div class="line">    postOrder(root-&gt;leftNode);</div><div class="line">    postOrder(root-&gt;rightNode);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;root-&gt;data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非递归版本-2"><a href="#非递归版本-2" class="headerlink" title="非递归版本"></a>非递归版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">( TreeNode * root , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path )</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; s;</div><div class="line">    TreeNode *p = root;</div><div class="line">    TreeNode *temp;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( p != <span class="literal">NULL</span> || !s.empty() )&#123;</div><div class="line">        <span class="keyword">while</span>( p != <span class="literal">NULL</span> )&#123; <span class="comment">//沿左子树一直往下搜索，直至出现没有左子树的结点</span></div><div class="line">            TreeNode *tempNode = <span class="keyword">new</span> TreeNode;</div><div class="line">            tempNode-&gt;btnode = p;</div><div class="line">            tempNode-&gt;isFirst = <span class="literal">true</span>;</div><div class="line">            s.push(tempNode);</div><div class="line">            p = p-&gt;left;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>( !s.empty() )&#123;</div><div class="line">            temp = s.top();</div><div class="line">            s.pop();</div><div class="line">            <span class="keyword">if</span>(temp-&gt;isFirst == <span class="literal">true</span>)&#123;   <span class="comment">//表示是第一次出现在栈顶</span></div><div class="line">                temp-&gt;isFirst = <span class="literal">false</span>;</div><div class="line">                s.push(temp);</div><div class="line">                p = temp-&gt;btnode-&gt;right;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;  <span class="comment">//第二次出现在栈顶</span></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;node-&gt;data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                path.push_back(temp-&gt;btnode-&gt;val);</div><div class="line">                p = <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>使用queue做辅助容器。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">( TreeNode * root )</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">    q.push(root);</div><div class="line">    <span class="keyword">while</span>( !q.empty() )&#123;</div><div class="line">        </div><div class="line">        TreeNode *node = q.front();</div><div class="line">        q.pop();</div><div class="line">        </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;node-&gt;data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>( node-&gt;left )</div><div class="line">            q.push( node-&gt;left );</div><div class="line">        <span class="keyword">if</span>( node-&gt;right )</div><div class="line">            q.push( node-&gt;right );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;较高级复杂的劳动，是这样一种劳动力的表现，这种劳动力比较普通的劳动力需要较高的教育费用，它的生产需要花费较多的劳动时间。因此，具有较高的价值。&lt;br&gt;—— &lt;strong&gt;马克思&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;本文重要介绍一些二叉树的遍历—分为递归遍历和非递归遍历两种情况进行讨论。&lt;/p&gt;
&lt;h2 id=&quot;前序遍历&quot;&gt;&lt;a href=&quot;#前序遍历&quot; class=&quot;headerlink&quot; title=&quot;前序遍历&quot;&gt;&lt;/a&gt;前序遍历&lt;/h2&gt;&lt;p&gt;前序遍历，优先访问根节点，然后再分别访问左孩子和右孩子。&lt;/p&gt;
&lt;h3 id=&quot;递归版本&quot;&gt;&lt;a href=&quot;#递归版本&quot; class=&quot;headerlink&quot; title=&quot;递归版本&quot;&gt;&lt;/a&gt;递归版本&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( TreeNode * root )&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    preOrder(root-&amp;gt;leftNode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    preOrder(root-&amp;gt;rightNode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 之 函数栈帧结构</title>
    <link href="http://yoursite.com/2017/04/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%8B-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/04/16/操作系统-之-函数栈帧结构/</id>
    <published>2017-04-16T13:33:39.000Z</published>
    <updated>2017-04-16T14:54:00.819Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真正的敏捷是一件很有价值的事。因为时间是衡量事业的标准，如金钱是衡量货物的标准。<br>—— <strong>弗·培根</strong><br></blockquote>

<p>机器用栈来传递过程参数, 存储返回信息, 保存寄存器用于以后恢复, 以及本地存储, 为单个过程分配的那部分栈<br>称为: 栈帧 (stack frame).</p>
<a id="more"></a>
<h2 id="函数调用栈概述"><a href="#函数调用栈概述" class="headerlink" title="函数调用栈概述"></a>函数调用栈概述</h2><p>函数调用栈是一个优雅特殊的设计, 是一个栈顶朝下的栈, 栈底为高地址, 所以栈向低地址方向增长. 而%esp指针指向栈顶元素, 可以利用pushl将数据存入栈中并利用popl指令从栈中取出. 将栈指针的值<br>减小适当值可以分配没有指定的初始值的数据的空间. 类似地, 也可以通过增加栈指针来释放空间.</p>
<h2 id="栈帧结构"><a href="#栈帧结构" class="headerlink" title="栈帧结构"></a>栈帧结构</h2><p>栈帧结构主要是就是用来 传递参数 , 存储返回信息, 保存寄存器, 以及本地存储.</p>
<p>下图描绘了栈帧的通用结构, 最顶端的栈帧以两个指针为界定, 寄存器%ebp为帧指针, 而<br>寄存器%esp为栈指针. 当程序执行时, 栈指针可以移动, 因此大多数信息的访问都是相对于<br>帧指针的. </p>
<p><img src="http://static.zybuluo.com/zhiyu/uga0iwt9cyq71e0if1dk7j30/timg.jpg" alt="timg.jpg-35.4kB"></p>
<p>假设过程P(调用者)调用过程Q(被调用者), 则Q的参数放在P的栈帧中. 另外, 调用Q时, P<br>中的返回地址被压入栈中, 形成 P 的栈帧的末尾.</p>
<p>返回地址就是当程序从Q返回时应该继续执行的地方. Q的栈帧从保存的帧指针的值(寄存器%ebp的副本)开始,<br>后面是保存的其他寄存器的值.</p>
<p>过程Q也用栈来保存其他不能存放在寄存器中的局部变量. 原因如下:</p>
<pre><code>- 没有足够多的寄存器存放所有的局部变量;
- 有些局部变量是数组或结构, 因为必须通过数组或者结构引用来访问;
- 要对一个局部变量使用地址操作符 &apos;&amp;&apos; ,我们必须能够为它生成一个地址.
</code></pre><p>另外, Q会用栈帧来存放它调用的其他过程参数, 在被调用的过程中, 第一个参数放在相对于<br>%ebp偏移量为8的位置处, 剩下的参数(假设它们的数据类型需要的字节不超过4个)存储在后续的4字节块中,<br>所以参数i就在相对于%ebp偏移量为4+4i的地方.较大的参数(比如结构和较大的数字格式)需要栈上更大的区域.</p>
<h2 id="打印出线程函数调用栈-iOS中"><a href="#打印出线程函数调用栈-iOS中" class="headerlink" title="打印出线程函数调用栈(iOS中)"></a>打印出线程函数调用栈(iOS中)</h2><p>思路: 挂起线程, 定位当线程的执行地址, 并从这个地址一级级回溯到线程的入口地址</p>
<pre><code>- 线程被挂起时, 会保存线程运行时的状态, 由一个结构体
    - thread_get_state
    - vm_read_overwrite
    - _STRUCT_MCONTEXT
    - _STRUCT_MCONTEXT.__ss 得到当前线程的执行函数地址
    _STRUCT_MCONTEXT.__ss.__fp 得到执行函数的前一个帧指针以及当前的帧指针
    帧指针的地址就是调用函数的地址, 保存地址, 再通过内存镜像的符号表, 
    从符号表中反向解析出地址对应的符号名, 也就是函数名
    - _STRUCT_MCONTEXT.__es
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真正的敏捷是一件很有价值的事。因为时间是衡量事业的标准，如金钱是衡量货物的标准。&lt;br&gt;—— &lt;strong&gt;弗·培根&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;机器用栈来传递过程参数, 存储返回信息, 保存寄存器用于以后恢复, 以及本地存储, 为单个过程分配的那部分栈&lt;br&gt;称为: 栈帧 (stack frame).&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7进阶 之 面向对象(3)</title>
    <link href="http://yoursite.com/2017/04/09/Python2-7%E8%BF%9B%E9%98%B6-%E4%B9%8B-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-3/"/>
    <id>http://yoursite.com/2017/04/09/Python2-7进阶-之-面向对象-3/</id>
    <published>2017-04-09T05:18:00.000Z</published>
    <updated>2017-04-09T07:49:48.557Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>信仰是心中的绿洲，思想的骆驼队是永远走不到的。<br>—— <strong>纪伯伦</strong><br></blockquote>

<h2 id="Python-元类"><a href="#Python-元类" class="headerlink" title="Python 元类"></a>Python 元类</h2><p>metaclass 被称作是Python面向对象里最难理解, 也是最难使用的魔术代码. 正常情况下, 也不会碰到需要metaclass的情况.</p>
<a id="more"></a>
<h3 id="type-函数"><a href="#type-函数" class="headerlink" title="type()函数"></a>type()函数</h3><p>使用元类之前, 我们先来看看 type() 函数以及一些动态语言的特性.</p>
<p>python作为动态语言与静态语言最大的不同, 就是函数和类的定义不是编译时定义的, 而是运行时动态创建的.</p>
<p>比如要定义一个<code>Person</code>的class, 就写一个 <code>person_demo.py</code> 的模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'Hello, &#123;&#125;'</span>.format(name)</div></pre></td></tr></table></figure></p>
<p>而type()函数的强大之处, 就在于既可以返回一个对象的类型, 又可以创建出新的类型, 而无需通过 <code>class Person(object) ..</code> 的定义:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">type(object) -&gt; the object's type</div><div class="line">type(name, bases, dict) -&gt; a new type</div><div class="line"></div><div class="line">def func(self, name='world'):</div><div class="line">	print 'Hello, &#123;&#125;!'.format(name)</div><div class="line"></div><div class="line">Hello = type('Hello', (object,), dict(hello=func)) # 创建Hello class</div><div class="line"></div><div class="line">h = Hello()</div><div class="line">h.hello() # Hello, world!</div></pre></td></tr></table></figure></p>
<p>type()函数的三个参数:</p>
<ul>
<li>要创建的class的名称 </li>
<li>继承的父类的结合, 因为python中支持多继承, 单个父类, 记得要使用tuple单元素的写法</li>
<li>class的方法名称与函数绑定, 这里把func与成员方法hello绑定</li>
</ul>
<p>通过type()函数创建的类与直接写class是完全一样的, 因为python解释器遇到class定义时, 底层也是调用type函数来进行创建class类型.</p>
<h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><p>除了使用type()函数动态创建类以外, 要控制类的创建行为, 还可以使用metaclass.<br>简单的理解就是:<br>先定义metaclass, 就可以创建类, 然后创建实例.<br>或者说, </p>
<blockquote>
<p>类就是metaclass创建出来的”实例”.</p>
</blockquote>
<p>先看一个简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaClass</span><span class="params">(type)</span>:</span> <span class="comment"># 元类的类名惯例上, 总是以metaclass结尾</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">		attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value) <span class="comment"># 向类中增加一个 add 方法</span></div><div class="line">		<span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list)</span>:</span></div><div class="line">	__metaclass__ = ListMetaClass <span class="comment"># 指示使用ListMetaClass来定制类</span></div></pre></td></tr></table></figure></p>
<p>在写下 <code>__metaclass__ = ListMetaClass</code> 语句时, 魔法就生效了, 它会指示python解释器, 在创建MyList时, 要通过ListMetaClass.<strong>new</strong>()来创建,<br>我们可以修改类的定义, 比如加上新的方法, 然后, 返回修改后的定义</p>
<p><strong>new</strong>()方法接收的参数依次是:</p>
<ol>
<li>准备创建的类的对象</li>
<li>类的名字</li>
<li>类继承的父类集合</li>
<li>类的方法集合</li>
</ol>
<p>这样的例子, 可能本身并没有什么实际的作用, 因为通过 metaclass 来添加一个方法, 实在太复杂, 不如简单类中自己定义一个方法就好了.</p>
<p>但是总会遇到需要通过 metaclass 来修改类定义的. 比如 ORM</p>
<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM 全称 “Object Relational Mapping”, 即对象关系映射, 就是把数据库关系的一行映射为一个对象, 也就是一个类对应一个表, 这样写代码更简单, 不用直接操作 SQL 语言.</p>
<p>期望达到这样的效果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></div><div class="line">	<span class="comment"># 定义类属性到列的映射</span></div><div class="line">	id = IntegerField(<span class="string">'id'</span>)</div><div class="line">	name = StringField(<span class="string">'username'</span>)</div><div class="line">	email = StringField(<span class="string">'email'</span>)</div><div class="line">	password = StringField(<span class="string">'password'</span>)</div><div class="line"></div><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Six'</span>, email=<span class="string">'zhiyupan.me'</span>, password=<span class="string">'xxxx'</span>)</div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>其中, 父类Model和属性类型StringField, IntegerField 是由 ORM框架提供的, 剩下的魔术方法 比如 save 全部由metaclass自动完成.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*-coding: utf-8-*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.column_type = column_type</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125;:&#123;&#125;&gt;'</span>.format(self.__class__.__name__, self.name)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">################### ModelMetaclass #########################################</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">print</span> name </div><div class="line">        </div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.iteritems():</div><div class="line">            <span class="keyword">print</span> k,v</div><div class="line">        <span class="keyword">print</span> <span class="string">'*'</span>*<span class="number">30</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> name == <span class="string">'Model'</span>:</div><div class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line">        mappings = dict()</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.iteritems():</div><div class="line">            <span class="keyword">print</span> k, v</div><div class="line">            <span class="keyword">print</span> <span class="string">'='</span>*<span class="number">20</span></div><div class="line">            <span class="keyword">if</span> isinstance(v, Field):</div><div class="line">                <span class="keyword">print</span> <span class="string">'Found mapping: &#123;&#125;==&gt;&#123;&#125;'</span>.format(k,v)</div><div class="line">                mappings[k] = v</div><div class="line">    </div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.iterkeys():</div><div class="line">            attrs.pop(k)</div><div class="line"></div><div class="line">        attrs[<span class="string">'__table__'</span>] = name <span class="comment"># 表名设置为类名</span></div><div class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">################### Model #########################################</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict)</span>:</span></div><div class="line">    __metaclass__ = ModelMetaclass <span class="comment"># metaclass可以隐式地继承到子类</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        super(Model, self).__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'in Model.__getattr__: &#123;&#125;'</span>.format(key)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span>% key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'in Model.__setattr__: &#123;&#125;: &#123;&#125;'</span>.format(key, value)</div><div class="line">        self[key] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        fields = []</div><div class="line">        params = []</div><div class="line">        args = []</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> self.__mappings__.iteritems():</div><div class="line">            <span class="keyword">print</span> k</div><div class="line">            <span class="keyword">print</span> v</div><div class="line">            fields.append(v.name)</div><div class="line">            params.append(<span class="string">'?'</span>)</div><div class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</div><div class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</div><div class="line">        <span class="keyword">print</span> <span class="string">'SQL: %s'</span> % sql</div><div class="line">        <span class="keyword">print</span> <span class="string">'ARGS: %s'</span> % str(args)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 调用处</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></div><div class="line">    id = IntegerField(<span class="string">'id'</span>)</div><div class="line">    name = StringField(<span class="string">'name'</span>)</div><div class="line"></div><div class="line">u = User(id=<span class="number">1234</span>, name=<span class="string">'six'</span>)</div><div class="line">u.save()</div></pre></td></tr></table></figure>
<p>大致的过程如下:</p>
<ul>
<li>python解释器遇到User类, 会优先在它的定义中查找是否存在__metaclass__, 如果没有, 就在它的父类中查找, 找到了, 就按照Model中定义的__metaclass__的ModelMetaclass来创建User类</li>
<li>ModelMetaclass中, 一共做了几件事:<ul>
<li>排除对Model类的修改, 因为它是Model的基类</li>
<li>在当前类(比如User)中查找定义的类的所有属性, 如果找到一个Field属性, 那么保存在__mappings__的字典中, 同时从类属性中删除该属性, 否则会造成运行时错误</li>
<li>表名保存在__table__中, 默认为类名</li>
</ul>
</li>
</ul>
<p>注意:</p>
<blockquote>
<ol>
<li>观察User类本身, 其实添加的 id 和 name 都是User的类属性, 并且也并没有给出实例化 __init__ 方法</li>
<li>这2个类属性, 通过元类将其添加到 __mappings__ 中, 并且从类属性中剔除掉, 之后再从实例化对象时, 将属性传到实例属性处.</li>
<li>另外, Model基类本身是继承自 dict 基类, 通过 User(id=1234, name=six) 语句自动为实例对象, 添加了两个键值对, {id: 1234}, {name: six}</li>
</ol>
</blockquote>
<p>通过 metaclas 这样的设计, 使得ORM在使用起来, 异常简单明了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;信仰是心中的绿洲，思想的骆驼队是永远走不到的。&lt;br&gt;—— &lt;strong&gt;纪伯伦&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Python-元类&quot;&gt;&lt;a href=&quot;#Python-元类&quot; class=&quot;headerlink&quot; title=&quot;Python 元类&quot;&gt;&lt;/a&gt;Python 元类&lt;/h2&gt;&lt;p&gt;metaclass 被称作是Python面向对象里最难理解, 也是最难使用的魔术代码. 正常情况下, 也不会碰到需要metaclass的情况.&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7进阶 之 面向对象(2)</title>
    <link href="http://yoursite.com/2017/04/08/Python2-7%E8%BF%9B%E9%98%B6-%E4%B9%8B-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-2/"/>
    <id>http://yoursite.com/2017/04/08/Python2-7进阶-之-面向对象-2/</id>
    <published>2017-04-08T15:29:09.000Z</published>
    <updated>2017-04-09T04:43:23.756Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>谁不会休息，谁就不会工作。<br>—— <strong>列宁</strong><br></blockquote>

<h2 id="Python-面向对象进阶-二"><a href="#Python-面向对象进阶-二" class="headerlink" title="Python 面向对象进阶 二"></a>Python 面向对象进阶 二</h2><h3 id="getattr-和-methodcaller"><a href="#getattr-和-methodcaller" class="headerlink" title="getattr 和 methodcaller"></a>getattr 和 methodcaller</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, r)</span>:</span></div><div class="line">        self.r = r</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.r ** <span class="number">2</span> * <span class="number">3.14</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, w, h)</span>:</span></div><div class="line">        self.w = w</div><div class="line">        self.h = h</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_area</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.w * self.h</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line">        self.c = c</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getArea</span><span class="params">(self)</span>:</span></div><div class="line">        a, b, c = self.a, self.b, self.c</div><div class="line">        p = (a+b+c) / <span class="number">2</span></div><div class="line">        area = (p*(p-a)*(p-b)*(p-c)) ** <span class="number">0.5</span></div><div class="line">        <span class="keyword">return</span> area</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getArea</span><span class="params">(shape)</span>:</span></div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> (<span class="string">'area'</span>, <span class="string">'getArea'</span>, <span class="string">'get_area'</span>):</div><div class="line">        f = getattr(shape, name, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> f:</div><div class="line">            <span class="keyword">return</span> f()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getArea2</span><span class="params">(shapes)</span>:</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">for</span> shape, name <span class="keyword">in</span> zip(shapes, (<span class="string">'area'</span>, <span class="string">'getArea'</span>, <span class="string">'get_area'</span>)):</div><div class="line">        res.append(methodcaller(name)(shape))</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line">shape1 = Circle(<span class="number">2</span>)</div><div class="line">shape2 = Triangle(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">shape3 = Rectangle(<span class="number">6</span>,<span class="number">4</span>)</div><div class="line"></div><div class="line">shapes = [shape1, shape2, shape3]</div><div class="line"><span class="keyword">print</span> [getArea(s) <span class="keyword">for</span> s <span class="keyword">in</span> shapes]</div><div class="line"><span class="keyword">print</span> getArea2(shapes)</div></pre></td></tr></table></figure>
<h3 id="使用descriptor对实例属性做类型检查"><a href="#使用descriptor对实例属性做类型检查" class="headerlink" title="使用descriptor对实例属性做类型检查"></a>使用descriptor对实例属性做类型检查</h3><p>包含有__get__ __set__ __delete__ 中的一个的类，就叫做描述符</p>
<p>在 __set__内使用instance函数做类型检查。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attr</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, type_)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.type_ = type_</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></div><div class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self.name, self.type_):</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'expected an %s'</span> % self.type_)</div><div class="line">        instance.__dict__[self.name] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></div><div class="line">        <span class="keyword">del</span> instance.__dict__[self.name]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    name = Attr(<span class="string">'name'</span>, str)</div><div class="line">    age = Attr(<span class="string">'age'</span>, int)</div><div class="line">    height = Attr(<span class="string">'height'</span>, float)</div><div class="line"></div><div class="line">p = Person()</div><div class="line">p.name = <span class="string">'six'</span> <span class="comment"># ✅</span></div><div class="line">p.age = <span class="string">'17'</span> <span class="comment"># 错误</span></div></pre></td></tr></table></figure>
<h3 id="环状数据结构中管理内存"><a href="#环状数据结构中管理内存" class="headerlink" title="环状数据结构中管理内存"></a>环状数据结构中管理内存</h3><p>python中是使用引用计数来管理内存，当引用计数为0时，对象才被析构</p>
<ul>
<li>另外查看引用计数方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.getrefcount(a) <span class="comment"># 返回对象实际的引用计数个数 + 1，因为getrefcount方法本身也会持有a对象</span></div><div class="line"></div><div class="line"><span class="comment"># 真实的引用次数</span></div><div class="line">sys.getrefcount(a) - <span class="number">1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>环状数据结构，两个对象彼此循环引用.</p>
<blockquote>
<p>解决方案：使用标准库weakref，它可以创建一种能访问对象但不增加引用计数的对象</p>
</blockquote>
<p>先看一个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'in A.__del__'</span></div><div class="line">        </div><div class="line">a = A() <span class="comment"># a的引用计数为1</span></div><div class="line">a2 = a <span class="comment"># a的引用计数为2</span></div><div class="line"><span class="keyword">del</span> a</div><div class="line"><span class="keyword">del</span> a2 <span class="comment"># 这时a才被析构</span></div><div class="line"></div><div class="line"><span class="comment"># 如果使用weakref后</span></div><div class="line">a = A() <span class="comment"># a的引用计数为1</span></div><div class="line">a_wref = weakref.ref(a)() <span class="comment"># a的引用计数仍然为1</span></div><div class="line"><span class="keyword">del</span> a <span class="comment"># a立刻被析构</span></div></pre></td></tr></table></figure>
<p>再看一个：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> weakref</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, owner)</span>:</span></div><div class="line">        self.owner = weakref.ref(owner) <span class="comment"># 得到一个弱引用的对象</span></div><div class="line">        self.value = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 注意：弱引用使用时，需要以函数调用的方式</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"%s's data, value is %s"</span> % (self.owner(), self.value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'in Data.__del__'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.data = Data(value, self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'in Node.__del__'</span></div><div class="line"></div><div class="line"></div><div class="line">node = Node(<span class="number">100</span>)</div><div class="line"><span class="keyword">del</span> node</div><div class="line"></div><div class="line"><span class="comment"># import gc</span></div><div class="line"><span class="comment"># gc.collect() # 强制回收垃圾内存，也不能解决循环引用的问题</span></div><div class="line"></div><div class="line">raw_input(<span class="string">'wait...'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;谁不会休息，谁就不会工作。&lt;br&gt;—— &lt;strong&gt;列宁&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Python-面向对象进阶-二&quot;&gt;&lt;a href=&quot;#Python-面向对象进阶-二&quot; class=&quot;headerlink&quot; title=&quot;Python 面向对象进阶 二&quot;&gt;&lt;/a&gt;Python 面向对象进阶 二&lt;/h2&gt;&lt;h3 id=&quot;getattr-和-methodcaller&quot;&gt;&lt;a href=&quot;#getattr-和-methodcaller&quot; class=&quot;headerlink&quot; title=&quot;getattr 和 methodcaller&quot;&gt;&lt;/a&gt;getattr 和 methodcaller&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7进阶 之 面向对象(1)</title>
    <link href="http://yoursite.com/2017/04/07/Python2-7%E8%BF%9B%E9%98%B6-%E4%B9%8B-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/04/07/Python2-7进阶-之-面向对象/</id>
    <published>2017-04-07T15:32:04.000Z</published>
    <updated>2017-04-07T19:42:11.237Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>躯体总是以惹人厌烦告终。除思想以外，没有什么优美和有意思的东西留下来，因为思想就是生命。<br>—— <strong>萧伯纳</strong><br></blockquote>

<h2 id="Python-面向对象进阶"><a href="#Python-面向对象进阶" class="headerlink" title="Python 面向对象进阶"></a>Python 面向对象进阶</h2><p>港真, 想精通python, 没那么简单~</p>
<a id="more"></a>
<p>python越接触下来, 越觉得是一门使用简单, 但是设计感十足的语言. 原来一直以为python作为脚本语言, 应该是很简单, 很随意的语言,<br>其实不然, 真正的想精通python, 还是有很大难度的.</p>
<h3 id="set-amp-get"><a href="#set-amp-get" class="headerlink" title="set &amp; get"></a>set &amp; get</h3><p>方法1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(value, str):</div><div class="line">            self.__name = value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Wrong Value Type'</span>)</div><div class="line"></div><div class="line">    n = property(fget=get_name, fset=set_name)</div><div class="line"></div><div class="line">s = Student(<span class="string">'six'</span>)</div><div class="line">s.n = <span class="string">'six2017'</span></div><div class="line"><span class="keyword">print</span> s.n <span class="comment"># 'six2017'</span></div></pre></td></tr></table></figure></p>
<p>方法2</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name = name</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line"><span class="meta">    @name.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(value, str):</div><div class="line">            self.__name = value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Wrong Value Type'</span>)</div><div class="line"></div><div class="line">s = Student(<span class="string">'six'</span>)</div><div class="line">s.name = <span class="string">'six2017'</span></div><div class="line"><span class="keyword">print</span> s.name <span class="comment"># 'six2017'</span></div></pre></td></tr></table></figure>
<h3 id="new-和-init"><a href="#new-和-init" class="headerlink" title="__new__ 和 __init__"></a>__new__ 和 __init__</h3><blockquote>
<p>继承自object的新式类才有__new__</p>
</blockquote>
<ul>
<li><p>__new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</p>
</li>
<li><p>__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类__new__出来的实例，或者直接是object的__new__出来的实例</p>
</li>
<li><p>__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值</p>
</li>
<li><p>若__new__没有正确返回当前类cls的实例，那__init__是不会被调用的，即使是父类的实例也不行</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntTuple</span><span class="params">(tuple)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, iterable)</span>:</span></div><div class="line">        g = (x <span class="keyword">for</span> x <span class="keyword">in</span> iterable <span class="keyword">if</span> isinstance(x, int) <span class="keyword">and</span> x &gt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> super(IntTuple, cls).__new__(cls, g)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable)</span>:</span></div><div class="line">        super(IntTuple, self).__init__(iterable)</div><div class="line"></div><div class="line"></div><div class="line">s = IntTuple([<span class="number">1</span>, <span class="number">-1</span>, <span class="string">'abc'</span>, <span class="number">6</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>], <span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> s <span class="comment"># (1, 6, 3)</span></div></pre></td></tr></table></figure>
<h3 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__str__ 和 __repr__"></a>__str__ 和 __repr__</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Student: &#123;name&#125;'</span>.format(name=self.name)</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">s = Student(<span class="string">'six'</span>)</div><div class="line"><span class="keyword">print</span> s <span class="comment"># 'Student: six'</span></div></pre></td></tr></table></figure>
<h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><p>限制class的属性，只允许对Student实例添加 __slots__ 中的属性<br>因为在python中，是允许动态添加类属性的， 但是设置了__slots__后，不能再随意添加属性，也是一些常见python库中的使用的技巧之一<br>__slots__ 还有一个重要用途：<strong><em>可以大幅度减少实例所占内存大小</em></strong>，主要减去了 __dict__ 的大小</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    __slots__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div></pre></td></tr></table></figure>
<ul>
<li>另外，查看对象的内存空间方法<blockquote>
<p>import sys<br>sys.getsizeof(s.__dict__)</p>
</blockquote>
</li>
</ul>
<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>不可变类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    grade = <span class="number">2016</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line"></div><div class="line">s = Student(<span class="string">'six'</span>, <span class="number">20</span>)</div><div class="line">s.grade = <span class="number">2017</span> <span class="comment"># 增加了一个实例属性而已，类属性不会被修改</span></div><div class="line"><span class="keyword">print</span> Student.grade <span class="comment"># 仍然为2016</span></div></pre></td></tr></table></figure>
<p>可变类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    grade = [<span class="string">'six'</span>, <span class="number">2016</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line"></div><div class="line">s = Student(<span class="string">'six'</span>, <span class="number">20</span>)</div><div class="line">s.grade[<span class="number">1</span>] = <span class="number">2017</span> <span class="comment"># 对于可变类型而言，实例属性的修改将影响到类属性</span></div><div class="line"><span class="keyword">print</span> Student.grade <span class="comment"># ['six', 2017]</span></div></pre></td></tr></table></figure></p>
<h3 id="多态和继承"><a href="#多态和继承" class="headerlink" title="多态和继承"></a>多态和继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Animal: %s run...'</span> % self.name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="comment"># 继承</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner=<span class="string">'six'</span>)</span>:</span></div><div class="line">        super(Dog, self).__init__(name)</div><div class="line">        self.owner = owner</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Dog: %s run..., Owner is %s'</span> % (self.name, self.owner)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(animal)</span>:</span></div><div class="line">    animal.run()</div><div class="line">    animal.run()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    a = Animal(<span class="string">'ss'</span>)</div><div class="line">    d = Dog(<span class="string">'dd'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 多态</span></div><div class="line">    run_twice(a)</div><div class="line">    run_twice(d)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<ul>
<li>多继承<ul>
<li>给一个类增加多个功能</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 比如，编写一个多进程模式的TCP服务，定义如下：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, ForkingMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 编写一个多线程模式的UDP服务，定义如下：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixin：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, CoroutineMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="staticmethod-和-classmethod"><a href="#staticmethod-和-classmethod" class="headerlink" title="staticmethod 和 classmethod"></a>staticmethod 和 classmethod</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="string">' Test Module '</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    grade = <span class="string">'2017'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'six'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'I am &#123;&#125;'</span>.format(self.name)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls.grade</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'I am a Student'</span></div></pre></td></tr></table></figure>
<h3 id="call"><a href="#call" class="headerlink" title="__call__"></a>__call__</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Six'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s()</div><div class="line">My name <span class="keyword">is</span> Six.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;躯体总是以惹人厌烦告终。除思想以外，没有什么优美和有意思的东西留下来，因为思想就是生命。&lt;br&gt;—— &lt;strong&gt;萧伯纳&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Python-面向对象进阶&quot;&gt;&lt;a href=&quot;#Python-面向对象进阶&quot; class=&quot;headerlink&quot; title=&quot;Python 面向对象进阶&quot;&gt;&lt;/a&gt;Python 面向对象进阶&lt;/h2&gt;&lt;p&gt;港真, 想精通python, 没那么简单~&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
  </entry>
  
  <entry>
    <title>Vim 总结</title>
    <link href="http://yoursite.com/2017/04/06/Vim-%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/06/Vim-总结/</id>
    <published>2017-04-05T16:14:39.000Z</published>
    <updated>2017-04-05T16:18:25.357Z</updated>
    
    <content type="html"><![CDATA[<p>Vim: 编译器之神<br>Emacs: 神的编译器</p>
<a id="more"></a>
<p><img src="http://static.zybuluo.com/zhiyu/a2emy9aa66cncgprspjx30zs/VIM.png" alt="VIM.png-72.1kB"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim: 编译器之神&lt;br&gt;Emacs: 神的编译器&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 常用算法2</title>
    <link href="http://yoursite.com/2017/04/05/STL%E5%9F%BA%E7%A1%80-%E4%B9%8B-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%952/"/>
    <id>http://yoursite.com/2017/04/05/STL基础-之-常用算法2/</id>
    <published>2017-04-05T12:37:43.000Z</published>
    <updated>2017-04-05T13:21:31.325Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真理是时间的孩子，不是权威的孩子。<br>—— <strong>布莱希特</strong><br></blockquote>

<h2 id="常用遍历算法"><a href="#常用遍历算法" class="headerlink" title="常用遍历算法:"></a>常用遍历算法:</h2><ul>
<li><p>for_each(iterator_beg, iterator_end, _callback);</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_callback 可以是函数对象(最好是, 效率更高), 也可以是普通函数</div><div class="line">for_each的返回值是函数对象</div></pre></td></tr></table></figure>
</li>
<li><p>transform(iterator_beg1, iterator_end1, iterator_beg2, _callback);</p>
</li>
<li>transform(iterator_beg1, iterator_end1, iterator_beg2, iterator_dst_beg3, _callback);<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">将指定容器区间元素, 搬运到另一容器中.</div><div class="line">注意: transform不会给目标容器分配内存, 所以我们需要提前分配好内存.</div><div class="line">transform的返回值是目标容器的迭代器.</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法:"></a>常用查找算法:</h2><ul>
<li><p>find(iterator_beg, iterator_end, value)</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find的返回值, 返回查找元素位置, 查找不到返回 iterator.end()</div></pre></td></tr></table></figure>
</li>
<li><p>find_if(iterator_beg, iterator_end, _callback);</p>
</li>
<li><p>adjacent_find(iterator_beg, iterator_end, _callback);</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查找相邻重复的元素</div></pre></td></tr></table></figure>
</li>
<li><p>bool binary_search(iterator_beg, iterator_end, value);</p>
</li>
<li><p>count(iterator_beg, iterator_end, value);</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">统计元素出现的次数</div><div class="line">返回元素的个数</div></pre></td></tr></table></figure>
</li>
<li><p>count_if(iterator_beg, iterator_end, value);</p>
</li>
</ul>
<h2 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h2><ul>
<li><p>merge(iterator_beg1, iterator_end1, iterator_beg2, _iterator_end2, iterator_dst_begin);</p>
</li>
<li><p>sort(iterator_beg, iterator_end, _callback);</p>
</li>
<li><p>random_shuffle(iterator_beg, iterator_end);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">随机调整范围内元素的次序.</div></pre></td></tr></table></figure>
</li>
<li><p>reverse(iterator_beg, iterator_end);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">逆序排列范围内的顺序.</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="常用拷贝和替换算法"><a href="#常用拷贝和替换算法" class="headerlink" title="常用拷贝和替换算法"></a>常用拷贝和替换算法</h2><ul>
<li>copy(iterator_beg, iterator_end, iterator_dst);</li>
<li>replace(iterator_beg, iterator_end, oldvalue, newvalue);</li>
<li>replace_if(iterator_beg, iterator_end, _callback, newvalue);</li>
<li>swap(container c1, container c2);</li>
</ul>
<h2 id="常用算数生成算法"><a href="#常用算数生成算法" class="headerlink" title="常用算数生成算法"></a>常用算数生成算法</h2><ul>
<li><p>accumulate(iterator_beg, iterator_end, value);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">累计范围内元素的总和</div></pre></td></tr></table></figure>
</li>
<li><p>fill(iterator_beg, iterator_end, value);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">向容器范围内添加元素</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="常用集合算法"><a href="#常用集合算法" class="headerlink" title="常用集合算法"></a>常用集合算法</h2><ul>
<li><p>set_intersection(iterator_beg1, iterator_end1, iterator_beg2, iterator_end2, iterator_dst_beg);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">求两个set集合的交集</div></pre></td></tr></table></figure>
</li>
<li><p>set_union(iterator_beg1, iterator_end1, iterator_beg2, iterator_end2, iterator_dst_2);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">求两个set集合的合集</div></pre></td></tr></table></figure>
</li>
<li><p>set_difference(iterator_beg1, iterator_end1, iterator_beg2, iterator_end2, iterator_dst_2)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">求两个set集合的差集</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真理是时间的孩子，不是权威的孩子。&lt;br&gt;—— &lt;strong&gt;布莱希特&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;常用遍历算法&quot;&gt;&lt;a href=&quot;#常用遍历算法&quot; class=&quot;headerlink&quot; title=&quot;常用遍历算法:&quot;&gt;&lt;/a&gt;常用遍历算法:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for_each(iterator_beg, iterator_end, _callback);&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;_callback 可以是函数对象(最好是, 效率更高), 也可以是普通函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for_each的返回值是函数对象&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;transform(iterator_beg1, iterator_end1, iterator_beg2, _callback);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;transform(iterator_beg1, iterator_end1, iterator_beg2, iterator_dst_beg3, _callback);&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;将指定容器区间元素, 搬运到另一容器中.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注意: transform不会给目标容器分配内存, 所以我们需要提前分配好内存.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;transform的返回值是目标容器的迭代器.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 常用算法1</title>
    <link href="http://yoursite.com/2017/04/04/STL%E5%9F%BA%E7%A1%80-%E4%B9%8B-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/04/STL基础-之-常用算法/</id>
    <published>2017-04-04T08:58:54.000Z</published>
    <updated>2017-04-05T12:35:48.850Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>理想对我来说，具有一种非凡的魅力。我的理想总是充满着生活和泥土气息。我从来都不去空想那些不可能实现的事情。<br>—— <strong>奥斯特洛夫斯基</strong><br></blockquote>

<p>算法头文件是由 “ algorithm functional numeric “ 组成.</p>
<p>algorithm</p>
<blockquote>
<p>是所有STL头文件中最大的一个, 其中常用的功能涉及到比较, 交换, 查找遍历,<br>复制, 修改, 反转, 排序, 合并等..</p>
</blockquote>
<p>numeric</p>
<blockquote>
<p> 体积很小, 只包括几个序列容器上进行的简单运算的模板函数.</p>
</blockquote>
<p>functional</p>
<blockquote>
<p> 定义了一些模板类, 用以声明函数对象.</p>
</blockquote>
<a id="more"></a>
<h2 id="1-函数对象"><a href="#1-函数对象" class="headerlink" title="1. 函数对象"></a>1. 函数对象</h2><p>重载函数调用操作符的类, 其对象常称为函数对象, 即它们是行为类似函数的对象, 也叫仿函数.<br>其实就是重载了 “( )” 操作符, 使得类对象可以像函数那样调用.</p>
<p>注意:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1. 函数对象(仿函数)是一个类, 不是一个函数</div><div class="line">2. 函数对象重载了&quot;()&quot;操作符, 使得它可以像函数一样调用</div><div class="line">3. 函数对象可以像普通函数一样调用, 并且可以有参数, 有返回值</div><div class="line">4. 函数对象也可以做参数</div><div class="line">5. 函数对象可以有自己的状态</div><div class="line">6. 函数对象比普通函数执行效率高, 有一定就几率在类内部被内联编译</div><div class="line"></div><div class="line">struct Print&#123;</div><div class="line">	void operator( int val )&#123;</div><div class="line">		cout&lt;&lt;val&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void doBusiness(Print p)&#123;</div><div class="line">	p(20);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分类</p>
<blockquote>
<p>一元仿函数(一个参数) 和 二元仿函数(两个参数)</p>
</blockquote>
<h2 id="2-谓词"><a href="#2-谓词" class="headerlink" title="2. 谓词"></a>2. 谓词</h2><p>谓词是指 <strong>普通函数</strong>或者<strong>重载的operator()</strong> 返回值是 bool类型的函数对象(仿函数).<br>如果operator接收一个参数, 那么叫做一元谓词; 如果接收两个参数, 那么叫做二元谓词.</p>
<p>谓词可以作为一个判断式.</p>
<h3 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> GreaterThanFive&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )&#123;</div><div class="line">		v.push_back(i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ret = find_if(v.begin(), v.end(), GreaterThanFive());</div><div class="line">	<span class="keyword">if</span>( ret == v.end() )&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT FOUND!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"FOUND IT: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">struct</span> MyCompare&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> v1 &gt; v2;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )</div><div class="line">		v.push_back(rand()%<span class="number">100</span>);</div><div class="line">		</div><div class="line">	<span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin() ; it != v.end() ; ++it )</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 排序算法</span></div><div class="line">	sort( v.begin() , v.end() , MyCompare );</div><div class="line">	<span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin() ; it != v.end() ; ++it )</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-内建函数对象"><a href="#3-内建函数对象" class="headerlink" title="3. 内建函数对象"></a>3. 内建函数对象</h2><p>STL内建了一些函数对象, 分为: 算数类函数对象, 关系运算类函数对象, 逻辑运算类函数对象.<br>引入头文件 #include <functional></functional></p>
<p>算数类函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T plus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T minus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T multiplies&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T divieds&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T modulus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T negate&lt;T&gt;;<span class="comment">// 一元</span></div></pre></td></tr></table></figure></p>
<p>关系运算类函数对象, 都是二元运算<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">equal_to</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">not_equal_to</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">greater</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">greater_equal</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">less</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">less_equal</span><span class="params">(T)</span></span>;</div></pre></td></tr></table></figure></p>
<p>逻辑运算类函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_and</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_or</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_not</span><span class="params">(T)</span></span>;<span class="comment">// 一元</span></div></pre></td></tr></table></figure></p>
<p>比如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">6</span>);</div><div class="line">v.push_back(<span class="number">5</span>);</div><div class="line">v.push_back(<span class="number">9</span>);</div><div class="line"></div><div class="line">sort( v.begin() , v.end() , greater&lt;<span class="keyword">int</span>&gt;() );</div><div class="line">for_each( v.begin() , v.end() , []( <span class="keyword">int</span> val )&#123; <span class="built_in">cout</span>&lt;&lt;val&lt;&lt;<span class="string">" "</span>&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="4-适配器"><a href="#4-适配器" class="headerlink" title="4. 适配器"></a>4. 适配器</h2><p>绑定适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> MyPrint : <span class="keyword">public</span> binary_function&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">void</span>&gt; &#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line">	</div><div class="line">	<span class="comment">// bind2nd 把二元函数对象适配成一元函数对象</span></div><div class="line">	<span class="comment">// 也可以用bind1st, 本质没有任何区别, 就是附属参数的位置</span></div><div class="line">	<span class="comment">// 函数对象才可以, 普通函数使用bind会报错</span></div><div class="line">	for_each(v.begin(), v.end(), bind2nd(MyPrint(), <span class="number">100</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数指针适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrintFunction</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line">	</div><div class="line">	<span class="comment">// ptr_func 把普通函数转换为函数对象(仿函数)</span></div><div class="line">	for_each(v.begin(), v.end(), bind2nd(ptr_func(MyPrintFunction), <span class="number">100</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>取反适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// not1 (针对一元函数对象取反)</span></div><div class="line"><span class="keyword">struct</span> myCondition : <span class="keyword">public</span> unary_function&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; &#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// const 必须要加</span></div><div class="line">		<span class="keyword">return</span> v &gt;= <span class="number">20</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line"></div><div class="line">	<span class="comment">// not1(函数对象), 对函数对象对应的结果取反</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), not1(myCondition()));</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (it == v.end())&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT FOUND"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;<span class="comment">// 找到的是小于20的数</span></div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// not2 (针对二元函数对象取反)</span></div><div class="line">	<span class="comment">// 结果从大到小输出</span></div><div class="line">	sort(v.begin(), v.end(), not2(less&lt;<span class="keyword">int</span>&gt;()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>成员函数适配器: 将类中的成员函数适配成函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Student&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Student(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : name(name), age(age)&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">"age: "</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">string</span> name;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;Student *&gt; v;</div><div class="line">	Student *s1 = <span class="keyword">new</span> Student(<span class="string">"stu1"</span>, <span class="number">10</span>);</div><div class="line">	Student *s2 = <span class="keyword">new</span> Student(<span class="string">"stu2"</span>, <span class="number">20</span>);</div><div class="line">	Student *s3 = <span class="keyword">new</span> Student(<span class="string">"stu3"</span>, <span class="number">30</span>);</div><div class="line">	Student *s4 = <span class="keyword">new</span> Student(<span class="string">"stu4"</span>, <span class="number">40</span>);</div><div class="line">	Student *s5 = <span class="keyword">new</span> Student(<span class="string">"stu5"</span>, <span class="number">50</span>);</div><div class="line">	</div><div class="line">	v.push_back(s1);</div><div class="line">	v.push_back(s2);</div><div class="line">	v.push_back(s3);</div><div class="line">	v.push_back(s4);</div><div class="line">	v.push_back(s5);</div><div class="line">	</div><div class="line">	<span class="comment">// mem_func : 如果存储的是对象的指针, 需要使用mem_func</span></div><div class="line">	for_each(v.begin(), v.end(), mem_func(&amp;Student::print));</div><div class="line">	</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;Student&gt; v2;</div><div class="line"></div><div class="line">	v2.push_back(Student(<span class="string">"stu1"</span>, <span class="number">10</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu2"</span>, <span class="number">20</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu3"</span>, <span class="number">30</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu4"</span>, <span class="number">40</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu5"</span>, <span class="number">50</span>));</div><div class="line">	</div><div class="line">	<span class="comment">// mem_func : 如果存储的是对象本身, 需要使用mem_func_ref</span></div><div class="line">	for_each(v2.begin(), v2.end(), mem_func_ref(&amp;Student::print));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;理想对我来说，具有一种非凡的魅力。我的理想总是充满着生活和泥土气息。我从来都不去空想那些不可能实现的事情。&lt;br&gt;—— &lt;strong&gt;奥斯特洛夫斯基&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;算法头文件是由 “ algorithm functional numeric “ 组成.&lt;/p&gt;
&lt;p&gt;algorithm&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是所有STL头文件中最大的一个, 其中常用的功能涉及到比较, 交换, 查找遍历,&lt;br&gt;复制, 修改, 反转, 排序, 合并等..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;numeric&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 体积很小, 只包括几个序列容器上进行的简单运算的模板函数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;functional&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 定义了一些模板类, 用以声明函数对象.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 关联容器</title>
    <link href="http://yoursite.com/2017/04/04/STL%E5%9F%BA%E7%A1%80-%E4%B9%8B-%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/04/04/STL基础-之-关联容器/</id>
    <published>2017-04-03T17:01:52.000Z</published>
    <updated>2017-04-04T09:28:43.443Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>青春留不住，白发自然生。<br>—— <strong>杜牧</strong><br></blockquote>

<p>关联式容器 – set &amp; map.</p>
<a id="more"></a>
<h2 id="set-amp-multiset"><a href="#set-amp-multiset" class="headerlink" title="set &amp; multiset"></a>set &amp; multiset</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>set的特性是: 所有特性都会根据元素的键值自动被排序. set不允许两个元素有相同的键值.</p>
<blockquote>
<p>迭代器: set的迭代器是一种const_iterator. 也就是说, 不能根据set的迭代器改变set元素的值.</p>
</blockquote>
<p>multiset特性与set基本一致, 唯一的差别是它允许键值重复.</p>
<p>set和multiset的底层实现是红黑树, 是平衡二叉树的一种, 是一种高级数据结构.</p>
<h3 id="2-set常用API"><a href="#2-set常用API" class="headerlink" title="2. set常用API"></a>2. set常用API</h3><p>set 构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>&lt;T&gt; st;</div><div class="line"><span class="built_in">multiset</span>&lt;T&gt; mst;</div><div class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);</div></pre></td></tr></table></figure>
<p>set 赋值函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);</div><div class="line">swap(st);</div></pre></td></tr></table></figure></p>
<p>set 大小操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size()</div><div class="line">empty()</div></pre></td></tr></table></figure></p>
<p>set 插入和删除<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">insert(elem);</div><div class="line">clear();</div><div class="line">erase(pos);</div><div class="line">erase(beg, end);</div><div class="line">erase(elem);</div></pre></td></tr></table></figure></p>
<p>set 查找操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">find(key);</div><div class="line">count(key);</div><div class="line">lower_bound(keyElem);</div><div class="line">upper_bound(keyElem);</div><div class="line">equal_range(keyElem);</div></pre></td></tr></table></figure></p>
<p>set 的返回值和指定set排序规则<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> MyCompare02&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> v1 &gt; v2;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare02&gt; s;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )&#123;</div><div class="line">	s.insert(rand()%<span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>( <span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare02&gt;::iterator it = s.begin() ; it != s.end() ; ++it )&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>pair对组</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair1(<span class="built_in">string</span>(<span class="string">"name"</span>), <span class="number">20</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair1.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair1.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair2 = make_pair(<span class="string">"name"</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair2.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair2.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"><span class="comment">// 赋值</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair3 = pair2;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair3.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair3.second &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
<h2 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>map的特性是, 所有元素都会根据元素的键值自动排序. map的所有元素都是pair, 同时拥有<br>实值和键值, pair的第一个元素是键值, pair的第二个元素被视为实值, map不允许两个元素有相同的键值.</p>
<blockquote>
<p>迭代器: 不能通过map的迭代器改变map的键值.</p>
</blockquote>
<p>multimap和map操作一致, 唯一区别是multimap键值可重复.<br>multimap和map都是以红黑树为底层实现机制的.</p>
<h3 id="2-map-multimap-常用API"><a href="#2-map-multimap-常用API" class="headerlink" title="2. map/multimap 常用API"></a>2. map/multimap 常用API</h3><p>构造函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;T1, T2&gt; maptt;</div><div class="line"><span class="built_in">map</span>(<span class="keyword">const</span> <span class="built_in">map</span>&amp; mp);</div></pre></td></tr></table></figure></p>
<p>赋值函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">map</span>&amp; mp);</div><div class="line">swap(mp);</div></pre></td></tr></table></figure></p>
<p>map大小操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line"><span class="built_in">map</span>();</div></pre></td></tr></table></figure></p>
<p>map插入数据<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>.insert(...);</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mapStu;</div><div class="line">mapStu.insert(pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">"小张"</span>));</div><div class="line">mapStu.insert(make_pair(<span class="number">-1</span>, <span class="string">"校长"</span>));</div><div class="line">mapStu.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::value_type(<span class="number">1</span>, <span class="string">"小李"</span>));</div><div class="line"></div><div class="line">mapStu[<span class="number">3</span>] = <span class="string">"小刘"</span>;</div><div class="line">mapStu[<span class="number">5</span>] = <span class="string">"小王"</span>;</div></pre></td></tr></table></figure></p>
<p>map删除操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clear();</div><div class="line">erase();</div><div class="line">erase(beg, end);</div><div class="line">erase(elem);</div></pre></td></tr></table></figure></p>
<p>map查找操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">find(key);</div><div class="line">count(keyElem);</div><div class="line">lower_bound(keyElem);</div><div class="line">upper_bound(keyElem);</div><div class="line">equal_range(keyElem);</div></pre></td></tr></table></figure></p>
<h2 id="STL容器元素深-浅拷贝问题"><a href="#STL容器元素深-浅拷贝问题" class="headerlink" title="STL容器元素深/浅拷贝问题"></a>STL容器元素深/浅拷贝问题</h2><p>stl容器所提供的都是值寓意, 而非引用寓意, 也就是说当我们往容器中插入元素的时候, 容器内部实施了拷贝动作,<br>将我们插入的元素再另行拷贝一份放入容器中, 而不是将原数据元素直接放进容器中, 也就是我们提供的元素必须能够被拷贝.</p>
<h2 id="STL容器使用时机"><a href="#STL容器使用时机" class="headerlink" title="STL容器使用时机"></a>STL容器使用时机</h2><p><img src="http://static.zybuluo.com/zhiyu/qrjjiz5vauurej4z43k8dba0/1.png" alt="1.png-93.1kB"></p>
<ul>
<li>vector的使用场景<ul>
<li>比如软件历史操作记录的存储, 我们经常要查看历史记录, 而不会去删除记录.</li>
</ul>
</li>
<li><p>deque的使用场景</p>
<ul>
<li><p>排队购票系统, 支持头端的快速移除, 尾端的快速添加.</p>
</li>
<li><p>vector 与 deque 的比较:</p>
<ul>
<li>vector.at() 比 deque.at()效率高</li>
<li>如果有大量释放操作, vector花的时间更少</li>
<li>deque支持头部的快速插入与快速移除, 这是deque的优点</li>
</ul>
</li>
</ul>
</li>
<li><p>list使用场景</p>
<ul>
<li>公交车乘客的存储, 随时可能有乘客下车, 支持频繁的不确定位置元素的移除插入.</li>
</ul>
</li>
<li><p>set使用场景</p>
<ul>
<li>手机游戏的个人得分纪录, 存储要求从高到低顺序排列</li>
</ul>
</li>
<li><p>map的使用场景</p>
<ul>
<li>按ID号存储10万用户, 想要快速通过ID查找到对应的用户.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;青春留不住，白发自然生。&lt;br&gt;—— &lt;strong&gt;杜牧&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;关联式容器 – set &amp;amp; map.&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 序列容器</title>
    <link href="http://yoursite.com/2017/04/03/STL%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/04/03/STL基础-一/</id>
    <published>2017-04-03T10:50:55.000Z</published>
    <updated>2017-04-03T16:59:59.640Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>现实是此岸，理想是彼岸，中间隔着湍急的河流，行动则是架在河上的桥梁。<br>—— <strong>克雷洛夫</strong><br></blockquote>

<p>STL( Standard Template Library , 标准模板库 ), 是惠普实验室开发的一系列软件的统称, 现在主要出现在C++中.</p>
<ul>
<li><p>1 STL六大组件:</p>
<ul>
<li>容器</li>
<li>算法</li>
<li>迭代器</li>
<li>仿函数</li>
<li>适配器</li>
<li>空间配置器<a id="more"></a>
</li>
</ul>
</li>
<li><p>2 算法</p>
<p>  分类:</p>
<blockquote>
<p>质变算法和非质变算法</p>
</blockquote>
<p>  质变算法:</p>
<blockquote>
<p>拷贝, 替换, 删除..</p>
</blockquote>
<p>  非质变算法:</p>
<blockquote>
<p>查找, 计数, 遍历, 寻找极值..</p>
</blockquote>
</li>
<li><p>3 迭代器</p>
<p>  种类:</p>
<blockquote>
<p>输入迭代器</p>
<pre><code>- 只读访问, 支持++, ==, !=
</code></pre><p>输出迭代器</p>
<pre><code>- 只写, 支持++
</code></pre><p>前向迭代器</p>
<pre><code>- 读写, 支持++, ==, !=
</code></pre><p>双向迭代器</p>
<pre><code>- 读写, 支持++, --
</code></pre><p>随机访问迭代器</p>
<pre><code>- 读写, 支持++, --, [n], -n, &lt;, &lt;=, &gt;, &gt;=
</code></pre></blockquote>
</li>
</ul>
<h2 id="STL概述"><a href="#STL概述" class="headerlink" title="STL概述"></a>STL概述</h2><h3 id="STL优点"><a href="#STL优点" class="headerlink" title="STL优点"></a>STL优点</h3><ul>
<li>高可复用性</li>
<li>高性能</li>
<li>高移植性</li>
</ul>
<h3 id="STL中心思想"><a href="#STL中心思想" class="headerlink" title="STL中心思想"></a>STL中心思想</h3><ul>
<li>将数据容器和算法分开, 彼此独立设计</li>
</ul>
<h3 id="常见序列式容器"><a href="#常见序列式容器" class="headerlink" title="常见序列式容器"></a>常见序列式容器</h3><h4 id="1-Vector"><a href="#1-Vector" class="headerlink" title="1 Vector"></a>1 Vector</h4><p>动态数组<br>迭代器: 随机访问迭代器</p>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;T&gt; v;</div><div class="line"><span class="built_in">vector</span>&lt;v.begin(), v.end());</div><div class="line"><span class="built_in">vector</span>&lt;n, elem);</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="built_in">vector</span> &amp;vec);</div><div class="line"></div><div class="line">// e.g.</div><div class="line"><span class="keyword">int</span> arr[] = &#123;2,3,4,1,9&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(arr, arr+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;vec);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line">empty();</div><div class="line">resize(<span class="keyword">int</span> num);</div><div class="line">resize(<span class="keyword">int</span> num, elem);</div><div class="line">capacity();</div><div class="line">reserve(<span class="keyword">int</span> len);</div></pre></td></tr></table></figure>
</li>
<li><p>数据存取操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">at(<span class="keyword">int</span> idx)</div><div class="line"><span class="keyword">operator</span>[];</div><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">insert(<span class="keyword">const</span> iterator pos, <span class="keyword">int</span> count, ele);</div><div class="line">push_back(elem);</div><div class="line">pop_back();</div><div class="line">erase(<span class="keyword">const</span> iterator start, <span class="keyword">const</span> iterator end);</div><div class="line">erase(<span class="keyword">const</span> iterator pos);</div><div class="line">clear();</div></pre></td></tr></table></figure>
</li>
<li><p>vector 小坑与小技巧</p>
</li>
</ul>
<p>当vector不停的插入元素的时, size不断的增大的同时, 他的容量其实也被扩充上去了.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">v.clear();<span class="comment">// 只能清除size, 内存的大小还在</span></div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(v);<span class="comment">// 创建一个匿名对象, 与v的内存空间进行交换, 匿名对象在第二行生命周期结束, 将内存释放掉, v的内存空间变成一个对象的内存空间</span></div><div class="line"></div><div class="line">v.reserve();<span class="comment">// 预先开辟空间</span></div></pre></td></tr></table></figure>
<h4 id="2-Deque"><a href="#2-Deque" class="headerlink" title="2 Deque"></a>2 Deque</h4><p>双向开口的连续线性空间, 头尾都可以进行插入和删除.<br>一段一段的定量的连续空间构成 – 中控器和缓冲区, 数据结构相比vector复杂</p>
<blockquote>
<p>迭代器方面: 随机访问迭代器.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>&lt;T&gt;;</div><div class="line"><span class="built_in">deque</span>(beg, end);</div><div class="line"><span class="built_in">deque</span>(n, elem);</div><div class="line"><span class="built_in">deque</span>(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);</div><div class="line">swap(deq);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>.size();</div><div class="line"><span class="built_in">deque</span>.empty();</div><div class="line"><span class="built_in">deque</span>.resize(num);</div><div class="line"><span class="built_in">deque</span>.resuze(num, elem);</div></pre></td></tr></table></figure>
</li>
<li><p>deque双端插入和删除操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push_back();</div><div class="line">push_front();</div><div class="line">pop_back();</div><div class="line">pop_front();</div></pre></td></tr></table></figure>
</li>
<li><p>deque存取操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">at(idx)</div><div class="line"><span class="keyword">operator</span>[];</div><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>deque插入操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">insert(pos, elem);</div><div class="line">insert(pos, n, elem);</div><div class="line">insert(pos, beg, end);</div></pre></td></tr></table></figure>
</li>
<li><p>deque删除操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clear();</div><div class="line">erase(beg, end);</div><div class="line">erase(pos);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结:</p>
<blockquote>
<p>因为deque设计的特殊性, 其复杂程度远超vector, 当然也影响到各个运算的层面.<br>因此除非有必要, 否则应该尽可能的使用vector, 而不是deque.</p>
</blockquote>
<p>最后, 对deque的排序操作, 为了最高效率, 可以将deque先完整的复制到一个vector中, 对vector进行排序后, 再复制回的deque.</p>
<h4 id="3-List"><a href="#3-List" class="headerlink" title="3 List"></a>3 List</h4><p>循环双向链表.</p>
<p>vector 和 list 是最常被使用的两个容器.<br>list对空间的运用有绝对的精准, 动态存储分配, 一点都不浪费.<br>插入和删除操作十分方便,  修改指针即可.<br>但是, 空间和时间消耗比较大.</p>
<blockquote>
<p>迭代器: 双向迭代器</p>
</blockquote>
<p>List的重要性质:</p>
<blockquote>
<p>插入和删除操作都不会造成对原有list迭代器的失效. vector就行, 一旦涉及到重新分配内存, 原有的迭代器地址就会失效.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;T&gt; lst;</div><div class="line"><span class="built_in">list</span>(beg, end);</div><div class="line"><span class="built_in">list</span>(n, elem);</div><div class="line"><span class="built_in">list</span>(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst);</div></pre></td></tr></table></figure>
</li>
<li><p>插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">push_back(elem);</div><div class="line">pop_back();</div><div class="line">push_front();</div><div class="line">pop_front();</div><div class="line">insert(pos, elem);</div><div class="line">insert(pos, n, elem);</div><div class="line">insert(pos, beg, end);</div><div class="line">clear();</div><div class="line">erase(beg, end);</div><div class="line">erase(pos);</div><div class="line">remove(elem);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line">empty();</div><div class="line">resize(num);</div><div class="line">resize(num, elem);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">list</span>&amp; lst);</div><div class="line">swap(lst);</div></pre></td></tr></table></figure>
</li>
<li><p>存取</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>排序</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">reverse();</div><div class="line">sort();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-Stack"><a href="#4-Stack" class="headerlink" title="4 Stack"></a>4 Stack</h4><p>先进后出, 只有一个出口.</p>
<blockquote>
<p>迭代器: stack没有迭代器. 也不提供遍历功能.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&lt;T&gt; sk;</div><div class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span>&amp; stk);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);</div><div class="line">push(elem);</div><div class="line">pop();</div><div class="line">top();</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty();</div><div class="line">size();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="5-Queue"><a href="#5-Queue" class="headerlink" title="5 Queue"></a>5 Queue</h4><p>队列, 先进先出.</p>
<blockquote>
<p>迭代器: 不提供遍历功能, 也不提供迭代器.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;T&gt; que;</div><div class="line"><span class="built_in">queue</span>(<span class="keyword">const</span> <span class="built_in">queue</span>&amp; que);</div></pre></td></tr></table></figure>
</li>
<li><p>存取, 插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push(elem);</div><div class="line">pop();</div><div class="line">back();</div><div class="line">front();</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>赋值<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>大小操作<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty();</div><div class="line">size();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;现实是此岸，理想是彼岸，中间隔着湍急的河流，行动则是架在河上的桥梁。&lt;br&gt;—— &lt;strong&gt;克雷洛夫&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;STL( Standard Template Library , 标准模板库 ), 是惠普实验室开发的一系列软件的统称, 现在主要出现在C++中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 STL六大组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;li&gt;仿函数&lt;/li&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;li&gt;空间配置器
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7 基础知识(一)</title>
    <link href="http://yoursite.com/2017/04/03/Python2-7-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/04/03/Python2-7-基础知识-一/</id>
    <published>2017-04-02T19:14:13.000Z</published>
    <updated>2017-04-09T08:14:17.649Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>道德普遍地被认为是人类的最高目的，因此也是教育的最高目的.<br>—— <strong>赫尔巴特</strong><br></blockquote>

<h2 id="Python2-7基础（一）"><a href="#Python2-7基础（一）" class="headerlink" title="Python2.7基础（一）"></a>Python2.7基础（一）</h2><h3 id="拿什么写python"><a href="#拿什么写python" class="headerlink" title="拿什么写python"></a>拿什么写python</h3><p>（1） python官方IDE<br>（2） ipython<br>（3） sublime text<br>（4） Atom<br><a id="more"></a></p>
<h3 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1 输入输出"></a>1 输入输出</h3><p>输入：</p>
<blockquote>
<p>print ‘hello world’</p>
</blockquote>
<p>输出：</p>
<blockquote>
<p>name = raw_input(‘Please enter your name: ‘)<br>raw_input 返回值为字符串</p>
</blockquote>
<h3 id="2-数据类型和变量"><a href="#2-数据类型和变量" class="headerlink" title="2 数据类型和变量"></a>2 数据类型和变量</h3><p>可变类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列表</span></div></pre></td></tr></table></figure>
<p>不可变类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 整数</span></div><div class="line"><span class="comment"># 浮点数</span></div><div class="line"><span class="comment"># 字符串</span></div><div class="line"><span class="comment"># 布尔值</span></div><div class="line"><span class="comment"># 空值 None</span></div></pre></td></tr></table></figure>
<p>python中的变量，都是一个对象，对于不可变类型数据来说，变量看似是变成了一个新值， 但是其实是指向了一个新的对象而已，多个变量指向同一个对象时，对象不会被重复创建，只是引用计数器+1</p>
<p>引用和对象分离概念</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span> <span class="comment"># a只是一个变量名, 10是一个实际的对象, python中一切都是对象</span></div><div class="line">b = a</div><div class="line">a = <span class="number">20</span></div><div class="line"><span class="comment"># b = ?</span></div><div class="line"></div><div class="line"><span class="comment"># 有c语言基础的同学，其实可以将python中的赋值操作，理解为指针操作。</span></div><div class="line"></div><div class="line">a = <span class="number">10</span> <span class="comment"># 其实是指 变量a 指向了 10 这个数据</span></div><div class="line">b = a  <span class="comment"># 变量b 此时也指向了 10 这个数据， 此时有2个变量指向 10</span></div><div class="line">a = <span class="number">20</span> <span class="comment"># 变量a 此时指向了20， 并不是把 10 这个数据修改了</span></div><div class="line">b = <span class="number">10</span> <span class="comment"># 此时b 仍为10</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">19</span> </div><div class="line">b = <span class="number">19</span></div><div class="line">a <span class="keyword">is</span> b <span class="comment"># True python中会规模较小的整数和字符串都缓存起来, 并不会重复创建, a 和 b 此时指向同一个对象</span></div><div class="line"></div><div class="line">a = <span class="number">1000000</span></div><div class="line">b = <span class="number">1000000</span></div><div class="line"></div><div class="line"><span class="comment"># 此时 a 和 b 指向两个不同对象</span></div><div class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></div><div class="line">a == b <span class="comment"># True, == 是指值相等, is 指的判断是否同一个对象</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 字符串也是同样道理</span></div></pre></td></tr></table></figure>
<h3 id="3-字符串和编码"><a href="#3-字符串和编码" class="headerlink" title="3 字符串和编码"></a>3 字符串和编码</h3><h3 id="4-list-tuple-和-dict-set"><a href="#4-list-tuple-和-dict-set" class="headerlink" title="4 list, tuple 和 dict, set"></a>4 list, tuple 和 dict, set</h3><p>dir(list) ==&gt; 查看对象属性</p>
<p>list<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">a.append(<span class="number">4</span>)</div><div class="line"></div><div class="line">a.count(value)</div><div class="line"></div><div class="line">a.extend()</div><div class="line"></div><div class="line">a.index(value)</div><div class="line"></div><div class="line">a.pop()</div><div class="line"></div><div class="line">a.remove()</div><div class="line"></div><div class="line">a.reverse()</div><div class="line"></div><div class="line">a.sort()</div></pre></td></tr></table></figure></p>
<p>tuple<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">a.count(value)</div><div class="line">a.index(value)</div></pre></td></tr></table></figure></p>
<p>dict<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">clear</div><div class="line">copy</div><div class="line">fromkeys</div><div class="line">get</div><div class="line">has_key</div><div class="line">items</div><div class="line">iteritems</div><div class="line">iterkeys</div><div class="line">itervalues</div><div class="line">keys</div><div class="line">pop</div><div class="line">popitem</div><div class="line">setdefault</div><div class="line">update</div><div class="line">values</div><div class="line">viewitems</div><div class="line">viewkeys</div><div class="line">viewvalues</div></pre></td></tr></table></figure></p>
<p>set<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">add</div><div class="line">clear</div><div class="line">copy</div><div class="line">difference</div><div class="line">difference_update</div><div class="line">discard</div><div class="line">intersection</div><div class="line">intersection_update</div><div class="line">isdisjoint</div><div class="line">issubset</div><div class="line">issuperset</div><div class="line">pop</div><div class="line">remove</div><div class="line">sysmmetric_difference</div><div class="line">sysmmetric_difference_update</div><div class="line">union</div><div class="line">update</div></pre></td></tr></table></figure></p>
<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5 函数"></a>5 函数</h3><p>函数变长参数: <em>args 和 *</em>kwargs</p>
<p>也叫包裹传递</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func</span><span class="params">(a, b, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">test_ func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, x=<span class="number">100</span>, y=<span class="number">200</span>)</div><div class="line"></div><div class="line"><span class="comment"># a = 1</span></div><div class="line"><span class="comment"># b = 2</span></div><div class="line"><span class="comment"># args = (3,4)</span></div><div class="line"><span class="comment"># kwargs = &#123;'x': 100, 'y': 200&#125;</span></div></pre></td></tr></table></figure>
<p>解包裹, 将整体传入的参数, 拆分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line"></div><div class="line">args = (<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">func(*args) <span class="comment"># 1,3,4</span></div><div class="line"></div><div class="line">dict = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line">func(**dict) <span class="comment"># 1,2,3</span></div></pre></td></tr></table></figure></p>
<h3 id="6-高级特性"><a href="#6-高级特性" class="headerlink" title="6 高级特性"></a>6 高级特性</h3><p>切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a_list[::-1] # 逆序</div><div class="line">a_list[:]    # 拷贝， 浅拷贝</div><div class="line">a_list[::2]  # 隔一个取一个</div></pre></td></tr></table></figure></p>
<p>浅拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alist[:] <span class="comment"># 切片拷贝</span></div><div class="line"></div><div class="line">list(alist) <span class="comment"># list工厂方法</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> copy</div><div class="line">copy.copy(alist) <span class="comment"># copy方法</span></div></pre></td></tr></table></figure></p>
<p>深拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line">copy.deepcopy(alist)</div></pre></td></tr></table></figure></p>
<p>zip<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">b = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">[(x,y) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(a, b)]</div><div class="line">[(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">6</span>)]</div></pre></td></tr></table></figure></p>
<p>enumerate<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(a):</div><div class="line">    <span class="keyword">print</span> i, e</div><div class="line"><span class="comment"># i 为index</span></div><div class="line"><span class="comment"># e 为元素</span></div></pre></td></tr></table></figure></p>
<p>Iterable<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line">isinstance(a, Iterable)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>列表生成器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[randint(<span class="number">0</span>,<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">10</span>)]</div><div class="line"></div><div class="line">[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>)]</div><div class="line"></div><div class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>]</div></pre></td></tr></table></figure>
<p>生成器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基础用法</span></div><div class="line">(randint(<span class="number">0</span>,<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"></div><div class="line">(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"></div><div class="line">(x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># next() , send()</span></div><div class="line">next 获取迭代器中的下一个值, 直到获取完毕</div><div class="line">send 具有next的全部功能之外, 还可以传递参数</div><div class="line"></div><div class="line"><span class="comment"># yield</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">4</span>):</div><div class="line">        temp = <span class="keyword">yield</span> x</div><div class="line">        <span class="keyword">if</span> temp == <span class="string">'hello'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'world'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'haha'</span>, temp</div><div class="line"><span class="keyword">yield</span>作用:</div><div class="line">    - 中断函数, 返回x的值</div><div class="line">    - 再次运行时, 可以再次回到上次中断的位置, 继续向下执行</div></pre></td></tr></table></figure>
<h3 id="7-函数式编程"><a href="#7-函数式编程" class="headerlink" title="7 函数式编程"></a>7 函数式编程</h3><p>map / reduce<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, a)</div><div class="line"></div><div class="line">map中传入的函数, 要求传入一个参数, 也就是seq中的每一个元素.</div><div class="line"></div><div class="line">map的返回值, 就是每个元素经过函数处理之后的新值, 并将新值放入了一个新的seq, 然后返回seq</div><div class="line">-----------------</div><div class="line">reduce(<span class="keyword">lambda</span> x,y: x+y, a)</div><div class="line"></div><div class="line">reduce中传入的函数, 要求传入两个参数,</div><div class="line">参数来源也就是seq中的元素</div><div class="line"></div><div class="line">reduce函数的作用就是, 将seq中从前往后, 前<span class="number">2</span>个元素进行一次操作, 操作后的结果, 再跟下一个元素进行运算, 直到最后.</div><div class="line"></div><div class="line">reduce的返回值, 返回一个运算后的结果</div></pre></td></tr></table></figure></p>
<p>filter<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>, a)</div><div class="line"></div><div class="line">filter中也要求传入一个函数, 要求传入一个参数, 也就是seq中的元素, 但是要求函数的返回值必须是布尔类型</div><div class="line"></div><div class="line">根据返回值的<span class="keyword">True</span>或<span class="keyword">False</span>, <span class="keyword">False</span>时移除该元素</div></pre></td></tr></table></figure></p>
<p>sorted<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorted 返回一个新的list</div></pre></td></tr></table></figure></p>
<p>匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lambda</span> x, y: x*y</div></pre></td></tr></table></figure></p>
<p>装饰器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(when=<span class="string">''</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> f, args, kwargs</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_logged</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(f)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            log(f, *args, **kwargs)</div><div class="line">            f(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'pre_logged'</span></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_logged</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(f)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            now = time()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> f(*args, **kwargs)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                log(f, *args, **kwargs)</div><div class="line">                <span class="keyword">print</span> <span class="string">'time delta: %s'</span> % (time()-now())</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> when:</div><div class="line">            <span class="keyword">return</span> &#123;<span class="string">'pre'</span>: pre_logged, <span class="string">'post'</span>: post_logged&#125;[when]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> pre_logged</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        ValueError(<span class="string">'must be "pre" or "post" %s'</span> % e)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@logged("post")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># 如果不引入functools模块, func函数被装饰器函数包裹后, __name__ 变成了 wrapper</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'---&gt;Hello %s, %s'</span> % (name, __name__)</div></pre></td></tr></table></figure>
<p>装饰器类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(aClass)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">newClass</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">            self.total_display   = <span class="number">0</span></div><div class="line">            self.wrapped         = aClass(age)</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></div><div class="line">            self.total_display += <span class="number">1</span></div><div class="line">            print(<span class="string">"total display"</span>, self.total_display)</div><div class="line">            self.wrapped.display()</div><div class="line">    <span class="keyword">return</span> newClass</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"My age is"</span>,self.age)</div><div class="line"></div><div class="line">eagleLord = Bird(<span class="number">5</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    eagleLord.display()</div></pre></td></tr></table></figure>
<p>偏函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 通过设定参数的默认值，可以降低函数调用的难度.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line">int2 = functools.partial(int, base=<span class="number">8</span>)</div></pre></td></tr></table></figure></p>
<h3 id="8-模块"><a href="#8-模块" class="headerlink" title="8 模块"></a>8 模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, World!'</span></div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Too many arguments!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 模块内部的调试代码, 被导入时, name == 模块名, 自己运行时, name 才等于 __main__ </span></div><div class="line">    test()</div></pre></td></tr></table></figure>
<p>包:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文件夹内, 加入 __init__.py, 模块升级为包</div></pre></td></tr></table></figure>
<p>_<em>future</em>模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;道德普遍地被认为是人类的最高目的，因此也是教育的最高目的.&lt;br&gt;—— &lt;strong&gt;赫尔巴特&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Python2-7基础（一）&quot;&gt;&lt;a href=&quot;#Python2-7基础（一）&quot; class=&quot;headerlink&quot; title=&quot;Python2.7基础（一）&quot;&gt;&lt;/a&gt;Python2.7基础（一）&lt;/h2&gt;&lt;h3 id=&quot;拿什么写python&quot;&gt;&lt;a href=&quot;#拿什么写python&quot; class=&quot;headerlink&quot; title=&quot;拿什么写python&quot;&gt;&lt;/a&gt;拿什么写python&lt;/h3&gt;&lt;p&gt;（1） python官方IDE&lt;br&gt;（2） ipython&lt;br&gt;（3） sublime text&lt;br&gt;（4） Atom&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
  </entry>
  
  <entry>
    <title>C++模板原理简单剖析</title>
    <link href="http://yoursite.com/2017/04/02/C-%E6%A8%A1%E6%9D%BF%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/02/C-模板原理简单剖析/</id>
    <published>2017-04-02T08:12:17.000Z</published>
    <updated>2017-04-03T08:47:25.944Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。<br>—— <strong>罗·科林伍德</strong><br></blockquote>


<p>c++提供了两种机制: <strong>函数模板</strong> 和 <strong>类模板</strong>.</p>
<p>总结:</p>
<blockquote>
<p>(1) 模板把函数或类要处理的数据类型<strong>参数化</strong>, 表现为参数的多态性, 成为类属, 又称参数模板<br>(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为<br>(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性</p>
</blockquote>
<a id="more"></a>
<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>简单使用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</div><div class="line">    T temp = a;</div><div class="line">    a = b;</div><div class="line">    b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动推导参数类型 --&gt; int</span></div><div class="line">    mySwap(a,b);</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">char</span> c2 = <span class="string">'b'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动类型推导, 也可以显示指定类型</span></div><div class="line">    mySwap&lt;<span class="keyword">char</span>&gt;(c1,c2);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数模板和普通函数的区别"><a href="#函数模板和普通函数的区别" class="headerlink" title="函数模板和普通函数的区别"></a>函数模板和普通函数的区别</h3><ul>
<li>函数模板不允许自动化类型转化, 必须严格匹配类型, 也就是不允许隐式转换, 比如 char 转 int ; 普通函数可以自动转换;</li>
</ul>
<h3 id="函数模板和普通函数的调用规则"><a href="#函数模板和普通函数的调用规则" class="headerlink" title="函数模板和普通函数的调用规则"></a>函数模板和普通函数的调用规则</h3><ul>
<li>函数模板可以像普通函数那样被重载</li>
<li>都能匹配的话, c++编译器优先考虑普通函数</li>
<li>如果函数模板可以产生一个更好的匹配(比如<strong>不需要隐式类型转换</strong>), 那么选择模板</li>
<li>可以通过<strong>空模板实参列表</strong>的语法, 限定编译器只能通过模板匹配<ul>
<li>myPlus&lt;&gt;(a, b)</li>
</ul>
</li>
</ul>
<h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><ul>
<li>类模板用于实现类所需数据的类型参数化</li>
<li>类模板在表示如数组, 表, 图等数据结构显得特别重要, 这些数据结构的表示和算法不受所包含的数据类型的影响.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> NameType, <span class="keyword">class</span> AgeType&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(NameType name, AgeTye age)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mName = name;</div><div class="line">        <span class="keyword">this</span>-&gt;mAge = age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NameType mName;</div><div class="line">    AgeType mAge;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p(<span class="string">"John"</span>, <span class="number">30</span>);</div><div class="line">    p.PrintPerson();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板做函数参数"><a href="#类模板做函数参数" class="headerlink" title="类模板做函数参数"></a>类模板做函数参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doBusiness</span><span class="params">(T&amp; p)</span></span></div><div class="line">&#123;</div><div class="line">    p.mAge += <span class="number">20</span>;</div><div class="line">    p.mName += <span class="string">"vip"</span>;</div><div class="line">    p.PrintPerson();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doBusiness</span><span class="params">(Person&lt;T1, T2&gt;&amp; p)</span></span></div><div class="line">&#123;</div><div class="line">    p.mAge += <span class="number">20</span>;</div><div class="line">    p.mName += <span class="string">"vip"</span>;</div><div class="line">    p.PrintPerson();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板派生普通类"><a href="#类模板派生普通类" class="headerlink" title="类模板派生普通类"></a>类模板派生普通类</h3><p>子类实例化的时候, 需要具体化的父类, 这样c++编译器才能知道给子类分配多少内存</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> SubClass: <span class="keyword">public</span> MyClass&lt;<span class="keyword">int</span>&gt;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SubClass(<span class="keyword">int</span> b): MyClass&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mB = b;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> mB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板派生类模板"><a href="#类模板派生类模板" class="headerlink" title="类模板派生类模板"></a>类模板派生类模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> MyClass&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MyClass(T property)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = property;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> SubClass : <span class="keyword">public</span> MyClass&lt;T&gt;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SubClass(T b) : MyClass&lt;T&gt;(b) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mB = b;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T mB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板碰上友元函数"><a href="#类模板碰上友元函数" class="headerlink" title="类模板碰上友元函数"></a>类模板碰上友元函数</h3><p>按照常规, 在类外实现</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 首先, 编译器紧把这个友元函数, 当作是一个普通函数, 不会根据具体类型, 去产生具体的实现体, 即使外部给出了函数模板实现体</span></div><div class="line">    <span class="comment">// 其次, 友元函数其实并不是函数声明, 只是告诉编译器, 这个函数是我的一个朋友, 仅此而已. 并没有对实现进行检查, 所以调用时, 编译器根本不知道有这样一个函数声明</span></div><div class="line">    <span class="comment">// 外部调用时, 会直接当成普通函数, 去查找其实现体, 而类外的实现仅是为函数模板生成具体实现, 普通函数不会为其实现</span></div><div class="line">    <span class="comment">// 所以, 会直接产生错误, 找不到函数的声明和实现</span></div><div class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;p)</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; p.mProperty &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="keyword">int</span>&gt; p (<span class="number">20</span>);</div><div class="line">    Friend(p);<span class="comment">// 错误, 没有声明, 也没有实现</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改为, 两步:</p>
<ol>
<li>告诉编译这个友元函数要优先匹配函数模板, 不要先找普通函数</li>
<li>需要给出友元函数的函数声明, 因为类内的friend仅是一个标识, 告诉编译器这个函数是我哥们, 可以访问所有私有数据</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> Person; <span class="comment">// person类前向声明</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;person)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 要修改为匹配模板调用</span></div><div class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> FriendPerson&lt;&gt;(Person&lt;T&gt; &amp;p);</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改成<strong>友元函数模板声明</strong>, 最终版:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 将friend方法声明为函数模板, 其他不变, 编译通过, 运行无误</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T2&gt; <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T2&gt; &amp;p)</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>总结:</p>
<blockquote>
<p>如果是类内实现友元函数的话, 友元的类名声明, 可以不加<strong>template</strong>标识, 建议这样来写, 简单方便.</p>
<p>如果类外实现的话, 友元的类内声明, 一定要加<strong>template</strong>标识, 否则就要friend处标识匹配模板实现, 另外还有额外声明友元函数, 可能还要进行前置声明.</p>
</blockquote>
<h2 id="模板机制剖析"><a href="#模板机制剖析" class="headerlink" title="模板机制剖析"></a>模板机制剖析</h2><p>或者说, 模板为什么不能跨文件编写?</p>
<h3 id="原因一-编译器的独立编译原则"><a href="#原因一-编译器的独立编译原则" class="headerlink" title="原因一: 编译器的独立编译原则"></a>原因一: 编译器的独立编译原则</h3><ul>
<li>编译当前文件时, 不关心也不知道, 另一个文件的情况<ul>
<li>比如, 当前文件调用了另一个文件的方法, 但是编译到当前文件时, 并不关心这个方法是否真的实现, 或者实现中有什么错误, 只是单纯的认为, 存在的就是对的. 如果没有实现, 那么交给链接时, 再去报错.</li>
</ul>
</li>
</ul>
<h3 id="原因二-模板的二次编译"><a href="#原因二-模板的二次编译" class="headerlink" title="原因二: 模板的二次编译"></a>原因二: 模板的二次编译</h3><ul>
<li>编译器会对模板进行两次编译, 在声明的地方对模板代码本身进行编译, 在调用的地方对参数替换后的代码进行编译.<ul>
<li>模板, 其实也是c++编译器做的众多小动作中一个而已.语法上提供了一些简便的写法–写入一个typename即可替代所有类型. 真正的底层原因就是二次编译, 模板还是模板, 但是在其被<strong>真正使用或调用的那一刻</strong>, 那么编译器就会为它具体<strong>生成一个具体的类型实现</strong>.</li>
<li>但是问题来了, 如果分开文件实现, 那么在实现文件中, 由于<strong>编译器的单独编译特性</strong>, 所以编译到实现文件时, 并不知道当前模板被调用的情况, 因为调用通常是在其他文件. <strong>在模板不知道自己被调用时, 编译器不会为其生成具体的实现</strong>, 所以模板调用处, 才产生<strong>链接错误, 方法找不到实现</strong>.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。&lt;br&gt;—— &lt;strong&gt;罗·科林伍德&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;c++提供了两种机制: &lt;strong&gt;函数模板&lt;/strong&gt; 和 &lt;strong&gt;类模板&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 模板把函数或类要处理的数据类型&lt;strong&gt;参数化&lt;/strong&gt;, 表现为参数的多态性, 成为类属, 又称参数模板&lt;br&gt;(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为&lt;br&gt;(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++模板原理简单剖析</title>
    <link href="http://yoursite.com/2017/03/24/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1-%E4%B9%8B-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>http://yoursite.com/2017/03/24/类与对象-之-对象的构造和析构/</id>
    <published>2017-03-24T08:12:17.000Z</published>
    <updated>2017-04-02T17:36:27.389Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。<br>—— <strong>罗·科林伍德</strong><br></blockquote>


<p>c++提供了两种机制: <strong>函数模板</strong> 和 <strong>类模板</strong>.</p>
<p>总结:</p>
<blockquote>
<p>(1) 模板把函数或类要处理的数据类型<strong>参数化</strong>, 表现为参数的多态性, 成为类属, 又称参数模板<br>(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为<br>(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性</p>
</blockquote>
<a id="more"></a>
<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>简单使用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</div><div class="line">    T temp = a;</div><div class="line">    a = b;</div><div class="line">    b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动推导参数类型 --&gt; int</span></div><div class="line">    mySwap(a,b);</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">char</span> c2 = <span class="string">'b'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动类型推导, 也可以显示指定类型</span></div><div class="line">    mySwap&lt;<span class="keyword">char</span>&gt;(c1,c2);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数模板和普通函数的区别"><a href="#函数模板和普通函数的区别" class="headerlink" title="函数模板和普通函数的区别"></a>函数模板和普通函数的区别</h3><ul>
<li>函数模板不允许自动化类型转化, 必须严格匹配类型, 也就是不允许隐式转换, 比如 char 转 int ; 普通函数可以自动转换;</li>
</ul>
<h3 id="函数模板和普通函数的调用规则"><a href="#函数模板和普通函数的调用规则" class="headerlink" title="函数模板和普通函数的调用规则"></a>函数模板和普通函数的调用规则</h3><ul>
<li>函数模板可以像普通函数那样被重载</li>
<li>都能匹配的话, c++编译器优先考虑普通函数</li>
<li>如果函数模板可以产生一个更好的匹配(比如<strong>不需要隐式类型转换</strong>), 那么选择模板</li>
<li>可以通过<strong>空模板实参列表</strong>的语法, 限定编译器只能通过模板匹配<ul>
<li>myPlus&lt;&gt;(a, b)</li>
</ul>
</li>
</ul>
<h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><ul>
<li>类模板用于实现类所需数据的类型参数化</li>
<li>类模板在表示如数组, 表, 图等数据结构显得特别重要, 这些数据结构的表示和算法不受所包含的数据类型的影响.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> NameType, <span class="keyword">class</span> AgeType&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(NameType name, AgeTye age)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mName = name;</div><div class="line">        <span class="keyword">this</span>-&gt;mAge = age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NameType mName;</div><div class="line">    AgeType mAge;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p(<span class="string">"John"</span>, <span class="number">30</span>);</div><div class="line">    p.PrintPerson();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模板机制剖析"><a href="#模板机制剖析" class="headerlink" title="模板机制剖析"></a>模板机制剖析</h2><p>或者说, 模板为什么不能跨文件编写?</p>
<h3 id="原因一-编译器的独立编译原则"><a href="#原因一-编译器的独立编译原则" class="headerlink" title="原因一: 编译器的独立编译原则"></a>原因一: 编译器的独立编译原则</h3><ul>
<li>编译当前文件时, 不关心也不知道, 另一个文件的情况<ul>
<li>比如, 当前文件调用了另一个文件的方法, 但是编译到当前文件时, 并不关心这个方法是否真的实现, 或者实现中有什么错误, 只是单纯的认为, 存在的就是对的. 如果没有实现, 那么交给链接时, 再去报错.</li>
</ul>
</li>
</ul>
<h3 id="原因二-模板的二次编译"><a href="#原因二-模板的二次编译" class="headerlink" title="原因二: 模板的二次编译"></a>原因二: 模板的二次编译</h3><ul>
<li>编译器会对模板进行两次编译, 在声明的地方对模板代码本身进行编译, 在调用的地方对参数替换后的代码进行编译.<ul>
<li>模板, 其实也是c++编译器做的众多小动作中一个而已.语法上提供了一些简便的写法–写入一个typename即可替代所有类型. 真正的底层原因就是二次编译, 模板还是模板, 但是在其被<strong>真正使用或调用的那一刻</strong>, 那么编译器就会为它具体<strong>生成一个具体的类型实现</strong>.</li>
<li>但是问题来了, 如果分开文件实现, 那么在实现文件中, 由于<strong>编译器的单独编译特性</strong>, 所以编译到实现文件时, 并不知道当前模板被调用的情况, 因为调用通常是在其他文件. <strong>在模板不知道自己被调用时, 编译器不会为其生成具体的实现</strong>, 所以模板调用处, 才产生<strong>链接错误, 方法找不到实现</strong>.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。&lt;br&gt;—— &lt;strong&gt;罗·科林伍德&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;c++提供了两种机制: &lt;strong&gt;函数模板&lt;/strong&gt; 和 &lt;strong&gt;类模板&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 模板把函数或类要处理的数据类型&lt;strong&gt;参数化&lt;/strong&gt;, 表现为参数的多态性, 成为类属, 又称参数模板&lt;br&gt;(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为&lt;br&gt;(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>struct 与 class in C/C++</title>
    <link href="http://yoursite.com/2017/03/24/struct-%E4%B8%8E-class-in-C-C/"/>
    <id>http://yoursite.com/2017/03/24/struct-与-class-in-C-C/</id>
    <published>2017-03-24T08:03:48.000Z</published>
    <updated>2017-03-24T08:09:04.124Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>当你看到不可理解的现象，感到迷惑时，真理可能已经披着面纱悄悄地站在你的面前。<br>—— <strong>巴尔扎克</strong><br></blockquote>


<h2 id="C-和-C-中的-struct-区别"><a href="#C-和-C-中的-struct-区别" class="headerlink" title="C 和 C++ 中的 struct 区别"></a>C 和 C++ 中的 struct 区别</h2><ul>
<li><p>c语言中, struct 只有变量</p>
</li>
<li><p>c++语言中, struct 既可以有变量, 也可以有函数</p>
</li>
</ul>
<a id="more"></a>
<h3 id="struct-与-class-区别"><a href="#struct-与-class-区别" class="headerlink" title="struct 与 class 区别"></a>struct 与 class 区别</h3><blockquote>
<p>class的默认权限为private, struct的默认权限是public</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;当你看到不可理解的现象，感到迷惑时，真理可能已经披着面纱悄悄地站在你的面前。&lt;br&gt;—— &lt;strong&gt;巴尔扎克&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;C-和-C-中的-struct-区别&quot;&gt;&lt;a href=&quot;#C-和-C-中的-struct-区别&quot; class=&quot;headerlink&quot; title=&quot;C 和 C++ 中的 struct 区别&quot;&gt;&lt;/a&gt;C 和 C++ 中的 struct 区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;c语言中, struct 只有变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;c++语言中, struct 既可以有变量, 也可以有函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>引用与指针</title>
    <link href="http://yoursite.com/2017/03/24/%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2017/03/24/引用与指针/</id>
    <published>2017-03-24T05:23:20.000Z</published>
    <updated>2017-03-24T07:52:19.295Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>在任何一个成功的后面都有着十五年到二十年的生活经验，都有着丰富的生活经验，要是没有这些经验，任何才思敏捷恐怕也不会有，而且在这里，恐怕任何天才也都无济于事。<br>—— <strong>巴甫连柯</strong><br></blockquote>

<h2 id="引用和指针"><a href="#引用和指针" class="headerlink" title="引用和指针"></a>引用和指针</h2><p><strong>引用是c++对c的重要扩充.</strong> 在c/c++中指针的作用基本是一样的, 但c++增加了另外一种给函数传递地址的途径, 就是按引用传递.</p>
<blockquote>
<ul>
<li>变量名实质上是一段连续内存空间的别名, 相当于一个门牌号<br>  一个变量可以有n个别名</li>
<li>程序中通过变量来申请并命名内存空间</li>
<li>通过变量的名字可以使用存储空间</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="1-引用的基本用法"><a href="#1-引用的基本用法" class="headerlink" title="1 引用的基本用法"></a>1 引用的基本用法</h3><p>基本语法:</p>
<blockquote>
<p>Type&amp; ref = val;</p>
</blockquote>
<p>注意事项:</p>
<blockquote>
<p>1 &amp;在此不是求地址, 而是标识的作用<br>2 类型标识符是指目标变量的类型<br>3 必须在声明引用变量时进行初始化</p>
<pre><code>int&amp; ref; // 报错
</code></pre><p>4 引用初始化之后, 不能改变</p>
<pre><code>int a = 20;
int b = 30;
int&amp; ref = a;
ref = b; // 报错, 不能改变引用
</code></pre><p>5 不能用NULL引用. 必须确保引用是和一块合法内存的存储单元关联</p>
</blockquote>
<p>建立数组引用:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Type&amp; ref = val;</span></div><div class="line"></div><div class="line"><span class="comment">// 方法1</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ArrRef[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</div><div class="line">ArrRef&amp; ref = arr;</div><div class="line"></div><div class="line"><span class="comment">// 方法2</span></div><div class="line"><span class="keyword">int</span>(&amp;f)[<span class="number">10</span>] = arr;</div></pre></td></tr></table></figure></p>
<h3 id="2-引用的本质"><a href="#2-引用的本质" class="headerlink" title="2 引用的本质"></a>2 引用的本质</h3><p>引用的本质在c++内部实现是一个常指针<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Type&amp; ref = val; <span class="comment">// Type *const ref = &amp;val;</span></div><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span>&amp; ref = a; <span class="comment">// 编译器自动转换为 int * const ref = &amp;a;  这也能说明,引用为什么必须初始化, 因为const变量必须被初始化</span></div><div class="line">ref = <span class="number">20</span>; <span class="comment">// 自动转换为 *ref = 20;</span></div></pre></td></tr></table></figure></p>
<p>c++编译器在编译过程中,使用常指针作为引用的内部实现, 因此<strong>引用所占的空间大小与指针相同</strong>, 只是这个过程是编译器内部实现, 用户看不见.</p>
<h3 id="3-指针的引用"><a href="#3-指针的引用" class="headerlink" title="3 指针的引用"></a>3 指针的引用</h3><p>在c语言中,如果想修改一个指针的指向, 而不是它所指的内容, 函数声明可能这样:</p>
<blockquote>
<p>void func(int **p)</p>
</blockquote>
<p>给指针变量取一个别名:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Type* pointer = <span class="literal">NULL</span>;</div><div class="line">Type*&amp; ref = pointer;</div></pre></td></tr></table></figure></p>
<p>案例:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_teacher</span><span class="params">(Teacher** t)</span></span>&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_teacher_ref</span><span class="params">(Teacher*&amp; t)</span></span>&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Teacher *teacher = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// c语言指针用法</span></div><div class="line">    init_teacher(&amp;teacher);</div><div class="line">    </div><div class="line">    <span class="comment">// c++中的引用做法, 语法清晰, 不用再取指针的地址</span></div><div class="line">    init_teacher_ref(teacher);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-常量的引用"><a href="#4-常量的引用" class="headerlink" title="4 常量的引用"></a>4 常量的引用</h3><p>常用引用的定义格式:</p>
<blockquote>
<p>const Type&amp; ref = val;</p>
</blockquote>
<p>字面量不能赋给引用, 但可以赋值 const 引用<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = a;</div><div class="line">    <span class="comment">// ref = 200; // 报错; 常引用</span></div><div class="line">    a = <span class="number">200</span>; <span class="comment">// OK</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>const 修饰的引用, 不能修改<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="comment">// int&amp; ref = 100; // 报错; 不能把一个字面量赋给引用</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">100</span>;<span class="comment">// 编译器的内部处理: int temp = 200; const int&amp; ref = temp;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-引用使用的场景"><a href="#5-引用使用的场景" class="headerlink" title="5 引用使用的场景"></a>5 引用使用的场景</h3><p>常量引用主要用在函数的形参, 尤其是类的拷贝构造函数.</p>
<p>将函数的形参定义常量引用的好处:</p>
<blockquote>
<p>1 引用不产生新的变量, <strong>减少形参与实参传递时的开销</strong></p>
<p>2 由于引用可能导致<strong>实参随形参改变而改变</strong>, 将其定义为常量引用可以消除这种副作用.</p>
</blockquote>
<h3 id="6-引用使用时的注意点"><a href="#6-引用使用时的注意点" class="headerlink" title="6 引用使用时的注意点"></a>6 引用使用时的注意点</h3><p>最常看见引用的地方是在函数参数和返回值中.</p>
<ul>
<li>参数中:</li>
</ul>
<p>函数内的任何引用的修改, 将函数外的参数产生改变.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">refSwap</span><span class="params">(<span class="keyword">int</span>&amp; m, <span class="keyword">int</span>&amp; n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = m;</div><div class="line">    m = n;</div><div class="line">    n = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>返回值:</li>
</ul>
<p>函数中返回一个引用, 必须像从函数中返回一个指针一样的对待.当函数返回值时,引用关联的内存一定要存在.</p>
<blockquote>
<p>不能返回局部变量的引用</p>
<pre><code>返回静态局部变量的引用, 就ok
</code></pre><p>函数当左值时, 必须返回引用</p>
<pre><code>test() = 200;// 函数做左值
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;在任何一个成功的后面都有着十五年到二十年的生活经验，都有着丰富的生活经验，要是没有这些经验，任何才思敏捷恐怕也不会有，而且在这里，恐怕任何天才也都无济于事。&lt;br&gt;—— &lt;strong&gt;巴甫连柯&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;引用和指针&quot;&gt;&lt;a href=&quot;#引用和指针&quot; class=&quot;headerlink&quot; title=&quot;引用和指针&quot;&gt;&lt;/a&gt;引用和指针&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;引用是c++对c的重要扩充.&lt;/strong&gt; 在c/c++中指针的作用基本是一样的, 但c++增加了另外一种给函数传递地址的途径, 就是按引用传递.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;变量名实质上是一段连续内存空间的别名, 相当于一个门牌号&lt;br&gt;  一个变量可以有n个别名&lt;/li&gt;
&lt;li&gt;程序中通过变量来申请并命名内存空间&lt;/li&gt;
&lt;li&gt;通过变量的名字可以使用存储空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>gcc 常用编译指令</title>
    <link href="http://yoursite.com/2017/03/24/gcc-%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/03/24/gcc-常用编译指令/</id>
    <published>2017-03-24T04:02:02.000Z</published>
    <updated>2017-03-24T05:20:57.409Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>人生的磨难是很多的，所以我们不可对于每一件轻微的伤害都过于敏感。在生活磨难面前，精神上的坚强和无动于衷是我们抵抗罪恶和人生意外的最好武器。<br>—— <strong>洛克</strong><br></blockquote>

<p>gcc全称为GNU Compiler Collection（GNU编译套件）。GNU is Not Unix。<br>GNU/Linux。</p>
<a id="more"></a>
<p>gcc [-c|-S|-E] [-std=standard]<br>           [-g] [-pg] [-Olevel]<br>           [-Wwarn…] [-Wpedantic]<br>           [-Idir…] [-Ldir…]<br>           [-Dmacro[=defn]…] [-Umacro]<br>           [-foption…] [-mmachine-option…]<br>           [-o outfile] [@file] infile…</p>
<p>预处理<br>编译<br>汇编<br>链接</p>
<p><img src="http://static.zybuluo.com/zhiyu/k4l7ob9kn1ayuby8rqpaufry/Snip20161110_9.png" alt="Snip20161110_9.png-90.4kB"></p>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>(1) -Wall -Wextra<br>    警告全开,<br>(2) - g<br>    编译调试版本<br>(3) -save-temps<br>    保存中间生成文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人生的磨难是很多的，所以我们不可对于每一件轻微的伤害都过于敏感。在生活磨难面前，精神上的坚强和无动于衷是我们抵抗罪恶和人生意外的最好武器。&lt;br&gt;—— &lt;strong&gt;洛克&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;gcc全称为GNU Compiler Collection（GNU编译套件）。GNU is Not Unix。&lt;br&gt;GNU/Linux。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="GCC" scheme="http://yoursite.com/tags/GCC/"/>
    
  </entry>
  
  <entry>
    <title>const in c++</title>
    <link href="http://yoursite.com/2017/03/24/const-in-c/"/>
    <id>http://yoursite.com/2017/03/24/const-in-c/</id>
    <published>2017-03-24T03:08:51.000Z</published>
    <updated>2017-03-24T07:10:07.422Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>人生中最困难者，莫过于选择。<br>—— <strong>莫尔</strong><br></blockquote>


<h2 id="0-const概述"><a href="#0-const概述" class="headerlink" title="0 const概述"></a>0 const概述</h2><p>const字面的意思为常数的,不变的.它是c/c++中的一个关键字,是一个限定符,用来限定一个变量不允许改变,它将一个对象转换成一个常量.</p>
<h2 id="1-c-c-中const的区别"><a href="#1-c-c-中const的区别" class="headerlink" title="1 c/c++ 中const的区别"></a>1 c/c++ 中const的区别</h2><ul>
<li>c中的const</li>
</ul>
<p><strong>对于const 修饰的局部变量来说</strong></p>
<blockquote>
<p>const修饰的局部变量就是, 一个不能改变的 <strong>普通变量</strong>, 一个只读的变量</p>
</blockquote>
<a id="more"></a>
<p>示例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> a;<span class="comment">// 报错; 必须初始化, 因为 const 不能被修改, 不初始化赋值的话, 将永远不能被赋值.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;</div><div class="line">    a = <span class="number">10</span>; <span class="comment">// 报错, 尝试修改只读变量</span></div><div class="line"></div><div class="line">    <span class="comment">// a的地址就在栈区, 而不是常量区,因为它只是一个变量,但是标记为只读.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>局部变量通过指针修改,是可以的.</p>
<p>但是对于全局变量而言:</p>
<blockquote>
<ul>
<li><p>const 修饰全部变量时, 默认是外部链接的.<br>多文件使用同一个变量名, 会造成变量重定义.</p>
</li>
<li><p>全局变量不能通过指针修改, 存储区域放在只读常量区, 修改会直接引发段错误.</p>
</li>
</ul>
</blockquote>
<ul>
<li>c++中的const</li>
</ul>
<p>一个概念需要引出:</p>
<blockquote>
<p>常量折叠</p>
</blockquote>
<p>其实就是类似宏替换一样,在进行完数据类型检查之后, 为了代码的高效性, 把常量替换成为它所代表的具体的值 直接 折叠到代码当中.</p>
<p>在c++中, 一个const不必创建内存空间. 在c++中, 是否为const常量分配内存空间依赖于如何使用.<br>一般来说, 一个const仅仅用来把一个名字用一个值代替, 那么该存储空间就不必创建. </p>
<blockquote>
<p>这时,编译器就会把 用到const的地方, 替换为它对应值, 也就是常量折叠的概念.</p>
</blockquote>
<p><strong>但是,对一个const变量取地址之后, 或者把它定义为exten, 则会为该const 变量创建内存空间.</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;<span class="comment">// c++中</span></div><div class="line">    <span class="comment">// a = 10; // 报错, 尝试修改只读变量</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;a;</div><div class="line">    *p = <span class="number">10</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);<span class="comment">// 打印结果依然是100</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)&amp;a); <span class="comment">// 10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原因解析</p>
<blockquote>
<p>其实, 都是编译器捣的鬼而已:<br>1 变量a 在编译时, 就被常量折叠, 把所有用到a的地方都被替换成 常数 100, 除了一个地方, 也就是对a取地址的地方<br>2 变量a 的地址就在栈区, 这点跟c是一样的<br>3 指针修改的过程也都没有问题, 查看a的内存地址中的值, 发现a的值也确实被修改了.<br>4 取地址之后, a就有了真实的地址空间, 但是直接打印a时, 打印其实是一个默认的修改之前的常量.</p>
</blockquote>
<p>c++的编译器,真的让人很无语, 搞这种小把戏, 但是其实也可以看得出来, c++真的是不想让你修改一个const的值, 因为你使用const的意义就在于此啊.<br>而且, 更重要的是, 其实也是c/c++语言的中一个重要的思想体现:</p>
<blockquote>
<p>程序员被允许做你能做的一切,你想修改const, 可以, 去做吧, 前提是,你清楚的知道自己在干什么.<br>所以编译器这里所做的是什么?<br>就是为了防止意外的修改而已, 不小心使用指针进行错误修改, 那么编译器还能帮你最后一次.</p>
</blockquote>
<p>全局变量:</p>
<p>跟c语言中一样,也不能修改,指针也不行.</p>
<p>c++中的全局变量, <strong>默认也是不分配内存, 当声明extern 或者 取地址之后, 才会分配内存</strong>, 并且内存存放的地址在<code>只读常量区</code>, 修改直接段错误.</p>
<p>区别是:</p>
<blockquote>
<p>c++中默认的链接属性是内部链接, 只在本文件内有效.</p>
</blockquote>
<h2 id="2-基础类型赋值与自定义类型"><a href="#2-基础类型赋值与自定义类型" class="headerlink" title="2 基础类型赋值与自定义类型"></a>2 基础类型赋值与自定义类型</h2><p>1 对于基础数据类型, 如果用一个变量初始化 const 变量, 如果 <code>const int a = b</code>, 那么也是会给a分配内存</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> constA = b;</div><div class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)&amp;constA;</div><div class="line">*p = <span class="number">300</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"constA:"</span> &lt;&lt; constA &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 300</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p:"</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 300</span></div></pre></td></tr></table></figure>
<p>此时编译器不会再把 constA 的值替换了(<strong>常量折叠</strong>), 因为初始化的时候, constA 被一个变量赋值, 而不是一个常数.</p>
<p>这时, 就跟c语言一样了.</p>
<p>2 对于自定义数据类型, 比如类对象, 那么也会分配内存.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Person person; <span class="comment">//未初始化age</span></div><div class="line"><span class="comment">//person.age = 50; //不可修改</span></div><div class="line">Person* pPerson = (Person*)&amp;person;</div><div class="line"><span class="comment">//指针间接修改</span></div><div class="line">pPerson-&gt;age = <span class="number">100</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pPerson-&gt;age:"</span> &lt;&lt; pPerson-&gt;age &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 100</span></div><div class="line">pPerson-&gt;age = <span class="number">200</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pPerson-&gt;age:"</span> &lt;&lt; pPerson-&gt;age &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 200</span></div></pre></td></tr></table></figure>
<p>为person分配了内存，所以可以通过指针的间接赋值修改person对象。</p>
<blockquote>
<p><strong>编译器其实能做的也有限, 只是常数的时候, 才可以进行替换展开, 其他情况, 它也无能为力, 指针就是这么强大呀!</strong></p>
</blockquote>
<h2 id="3-尽量使用const来替换-define"><a href="#3-尽量使用const来替换-define" class="headerlink" title="3 尽量使用const来替换 #define"></a>3 尽量使用const来替换 #define</h2><p>区别:</p>
<blockquote>
<p>1．const有类型，可进行编译器类型安全检查。#define无类型，不可进行类型检查.<br>2．const有作用域，而#define不重视作用域，默认定义处到文件结尾.如果定义在指定作用域下有效的常量，那么#define就不能用。</p>
</blockquote>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>其实, const在c++的应用远远不止于此, 类中还有大量的使用, 类对象, 类方法中, 参数中, 返回值中, 都能见到 const 的身影.</p>
<p>但是, 我们在使用时候坚持一点就好, <strong>如果你用了const ,那么, 你就不要尝试修改, 或者说, 你不想别人修改, 那你就使用const吧</strong>. 没人会主动想改, 除非你真的想改, c++尝试在编译器层面做了很多, 但是面对指针, 很多时候, 你也无能为力.</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人生中最困难者，莫过于选择。&lt;br&gt;—— &lt;strong&gt;莫尔&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;0-const概述&quot;&gt;&lt;a href=&quot;#0-const概述&quot; class=&quot;headerlink&quot; title=&quot;0 const概述&quot;&gt;&lt;/a&gt;0 const概述&lt;/h2&gt;&lt;p&gt;const字面的意思为常数的,不变的.它是c/c++中的一个关键字,是一个限定符,用来限定一个变量不允许改变,它将一个对象转换成一个常量.&lt;/p&gt;
&lt;h2 id=&quot;1-c-c-中const的区别&quot;&gt;&lt;a href=&quot;#1-c-c-中const的区别&quot; class=&quot;headerlink&quot; title=&quot;1 c/c++ 中const的区别&quot;&gt;&lt;/a&gt;1 c/c++ 中const的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;c中的const&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于const 修饰的局部变量来说&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const修饰的局部变量就是, 一个不能改变的 &lt;strong&gt;普通变量&lt;/strong&gt;, 一个只读的变量&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>冷门小技巧 之 C/C++ 持续更新ing</title>
    <link href="http://yoursite.com/2017/03/21/%E5%86%B7%E9%97%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-%E4%B9%8B-C-C-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ing/"/>
    <id>http://yoursite.com/2017/03/21/冷门小技巧-之-C-C-持续更新ing/</id>
    <published>2017-03-21T06:51:06.000Z</published>
    <updated>2017-03-21T14:41:33.849Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>把时间用在思考上是最能节省时间的事情.<br>—— <strong>卡曾斯</strong><br></blockquote>


<p>本文主要介绍的一些冷门的, 诡异的, C/C++方面的小技巧, 持续更新ing.</p>
<a id="more"></a>
<h2 id="1-字符串不需要换行直接使用"><a href="#1-字符串不需要换行直接使用" class="headerlink" title="1. 字符串不需要换行直接使用"></a>1. 字符串不需要换行直接使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"hello"</span></div><div class="line">	<span class="string">"world"</span></div><div class="line">	<span class="string">"haha"</span>;</div><div class="line"></div><div class="line"><span class="comment">//效果等价于:</span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"helloworldhaha"</span>;</div></pre></td></tr></table></figure>
<p>这有什么鬼用呢?</p>
<p>在http组包头的时候,可以直接拼就好了,而已便于观看</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"GET /xxx.html HTTP/1.1\r\n"</span></div><div class="line">	<span class="string">"Host: 127.0.0.1:80\r\n"</span></div><div class="line">	<span class="string">"Connection: keep-alive\r\n"</span></div><div class="line">	<span class="string">"\r\n"</span>;</div></pre></td></tr></table></figure>
<p>是不是很好用?</p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;把时间用在思考上是最能节省时间的事情.&lt;br&gt;—— &lt;strong&gt;卡曾斯&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;本文主要介绍的一些冷门的, 诡异的, C/C++方面的小技巧, 持续更新ing.&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的Blog</title>
    <link href="http://yoursite.com/2017/03/21/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Blog/"/>
    <id>http://yoursite.com/2017/03/21/搭建自己的Blog/</id>
    <published>2017-03-20T18:03:14.000Z</published>
    <updated>2017-03-21T14:10:32.081Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>思想以自己的言语喂养它自己，而成长起来。<br>—— <strong>泰戈尔</strong><br></blockquote>



<h2 id="Hexo搭建记"><a href="#Hexo搭建记" class="headerlink" title="Hexo搭建记"></a>Hexo搭建记</h2><p>现在想想, 搭建个人的Blog真心是一件麻烦的事情, 每遇到一个问题, 那种痛苦的感觉, 解决了之后, 那种爽快的感觉, 其实跟编程给人的感觉差不多少.</p>
<p>在很久之前就一直想做一个自己的blog, 也买了域名, 折腾了一会, 但是就是感觉没有一篇文章是给小白, 纯小白看的, 就好像说, <strong>把大象关进冰箱一样, 打开冰箱门, 你肯定知道, 然后大神们就告诉你说, 然后把大象放进冰箱里就行, 最后把冰箱门关上, done! 成功了有没有</strong>!<br>….</p>
<a id="more"></a>
<p>有些夸张, 但是有时候感受是这样的</p>
<p>前几天,偶然的一次访问到了一位<a href="http://wuchong.me/" target="_blank" rel="external">网友的博客</a>, 博客的页面简单, 美观, 实用, 又一次燃起了我对个人主页的向往, 于是, 折腾开始了..</p>
<p>其实, 网上也参考不少好的资料, 在本文末尾, 也一一列出, 并在此感谢各位大神的著作, 让我度过了坎坷但又很值得的几天, 人生就是要浪费在这种美好的事物上呀!</p>
<p>下面, 我来给出我的详细搭建过程中, 遇到关于域名解析的一些问题, 进行一下简单的说明. 像简单的一些页面配置, 文章最后, 我列出的参考文献之中, 均有详细无比的配置方法, 就不在此赘述.</p>
<h3 id="1-1-购买域名"><a href="#1-1-购买域名" class="headerlink" title="1.1 购买域名"></a>1.1 购买域名</h3><blockquote>
<p>我是直接去<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">狗爹</a>上, 搜索到自己想要的<a href="http://www.zhiyupan.me" target="_blank" rel="external">域名</a>, 然后购买就可以, 简单, 而且可以直接支付宝付款.</p>
</blockquote>
<h3 id="1-2-域名解析"><a href="#1-2-域名解析" class="headerlink" title="1.2 域名解析"></a>1.2 域名解析</h3><p>啥意思呢? 就是说, 你虽然买了一个域名, 但是还是要解析才能使用, 比如说, 我自己买了一个域名是<br>xxxx.me, 但是实际上你托管代码的服务器, 只让你通过www.xxxx.me来访问, 不允许你直接访问自己的域名, 怎么破?<br>这个时候就需要一个dns解析服务, 来帮助, 而且还有一个CNAME的概念.</p>
<blockquote>
<p>我使用的DNS解析服务是来自<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>, 注册简单, 使用也比较方便, 在域名解析标签下, 添加自己的购买的域名, 然后再根据<a href="https://support.dnspod.cn/Kb/showarticle/tsid/42" target="_blank" rel="external">设置向导, 修改狗爹上的一些配置</a>, 其实就是访问自己的域名时, 狗爹的服务器优先感知到, 然后再反向通知到你刚刚注册的DNSPod的NameServer上去, 进而进行解析, 其实也就是再一步的跳转到你设置的那个真实的服务器的ip地址上去, 获取到你页面文件, 浏览器才能进行展示.</p>
</blockquote>
<p>这个再跳转的过程就是 要配置的 CNAME<br>我是使用的<a href="https://github.com" target="_blank" rel="external">GitHub</a>提供的代码托管服务.<br>DNSPod中的CNAME选项按照要求GitHub配置上就好, ‘<br>过程就是, </p>
<blockquote>
<p>访问 www.xxx.me , 狗爹服务器响应, 然后跳转到DnsPod服务器, 然后根据CNAME再跳一次, 跳到GitHub的服务器上面, 最后才算是完成了一次访问.</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zhiyu/f9ald7n944q3h69ti5w50al5/E9DGQNMC5YCIO@X8K%7B%5B7FX8.png" alt="E9DGQNMC5YCIO@X8K7FX8.png-5.2kB"></p>
<h2 id="1-3-直接访问域名"><a href="#1-3-直接访问域名" class="headerlink" title="1.3 直接访问域名"></a>1.3 直接访问域名</h2><p>其实我还有一个问题, 一直没有解决, 就是我CNAME虽然按照DNSPod的方式配置, GitHub的二级域名也填好了, 是直接访问的方式, 但是我直接访问时, 却一直会跳转到狗爹的页面上去, 而不会跳转的GitHub上的部署服务器上, 但是如果使用www访问,就可以直接访问成功.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不知道是不是我购买的域名不支持?</div><div class="line">还是DNSPod的配置还是有问题?</div><div class="line">还是GitHub上不支持?</div></pre></td></tr></table></figure></p>
<p>唉 , 以后再慢慢来弄吧~ 先好好写点文章先..</p>
<p><img src="http://static.zybuluo.com/zhiyu/0j064hadchlhx1uunx4xxi4x/QQ%E6%88%AA%E5%9B%BE20170321025214.png" alt="QQ截图20170321025214.png-18.1kB"></p>
<p>———-华丽的分割线————-</p>
<p>原来是 想访问到 xxx.me 的域名, CNAME要配置成 @ 才行, 需要将 Dnspod 上的 默认提供的 @ + ip 的访问方式删除掉(否则会提示冲突), 好吧. 现在终于可以去掉恶心的 www了 哈哈</p>
<p><img src="http://static.zybuluo.com/zhiyu/4qj9catr9vu5xzvlq8forbl6/1.png" alt="1.png-5.6kB"></p>
<p>还有每次部署上去的时候, 发现每次都要修改一下github仓库上的setting, 再配置上二级域名才可以, 我也觉得不应该有这么傻的操作, 但是今天终于搞清楚了:</p>
<blockquote>
<p><strong>在source目录下</strong>, 直接加上一个CNAME文件( 之前一直添加在根目录下的 .deploy 下的 .git 目录下, 唉), 内容就是你要重定向的地址, 也就是你的域名. </p>
</blockquote>
<ul>
<li>参考文献<ul>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">Hexo你的博客</a></li>
<li><a href="http://wuchong.me/blog/2013/12/13/hello-%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">Hexo独立博客</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexTGitHub</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next使用文档</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;思想以自己的言语喂养它自己，而成长起来。&lt;br&gt;—— &lt;strong&gt;泰戈尔&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;



&lt;h2 id=&quot;Hexo搭建记&quot;&gt;&lt;a href=&quot;#Hexo搭建记&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建记&quot;&gt;&lt;/a&gt;Hexo搭建记&lt;/h2&gt;&lt;p&gt;现在想想, 搭建个人的Blog真心是一件麻烦的事情, 每遇到一个问题, 那种痛苦的感觉, 解决了之后, 那种爽快的感觉, 其实跟编程给人的感觉差不多少.&lt;/p&gt;
&lt;p&gt;在很久之前就一直想做一个自己的blog, 也买了域名, 折腾了一会, 但是就是感觉没有一篇文章是给小白, 纯小白看的, 就好像说, &lt;strong&gt;把大象关进冰箱一样, 打开冰箱门, 你肯定知道, 然后大神们就告诉你说, 然后把大象放进冰箱里就行, 最后把冰箱门关上, done! 成功了有没有&lt;/strong&gt;!&lt;br&gt;….&lt;/p&gt;
    
    </summary>
    
      <category term="写作" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
