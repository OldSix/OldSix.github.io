<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Six&#39;s a Coder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-05T12:35:48.850Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Six</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL基础 之 常用算法1</title>
    <link href="http://yoursite.com/2017/04/04/STL%E5%9F%BA%E7%A1%80-%E4%B9%8B-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/04/STL基础-之-常用算法/</id>
    <published>2017-04-04T08:58:54.000Z</published>
    <updated>2017-04-05T12:35:48.850Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>理想对我来说，具有一种非凡的魅力。我的理想总是充满着生活和泥土气息。我从来都不去空想那些不可能实现的事情。<br>—— <strong>奥斯特洛夫斯基</strong><br></blockquote>

<p>算法头文件是由 “ algorithm functional numeric “ 组成.</p>
<p>algorithm</p>
<blockquote>
<p>是所有STL头文件中最大的一个, 其中常用的功能涉及到比较, 交换, 查找遍历,<br>复制, 修改, 反转, 排序, 合并等..</p>
</blockquote>
<p>numeric</p>
<blockquote>
<p> 体积很小, 只包括几个序列容器上进行的简单运算的模板函数.</p>
</blockquote>
<p>functional</p>
<blockquote>
<p> 定义了一些模板类, 用以声明函数对象.</p>
</blockquote>
<a id="more"></a>
<h2 id="1-函数对象"><a href="#1-函数对象" class="headerlink" title="1. 函数对象"></a>1. 函数对象</h2><p>重载函数调用操作符的类, 其对象常称为函数对象, 即它们是行为类似函数的对象, 也叫仿函数.<br>其实就是重载了 “( )” 操作符, 使得类对象可以像函数那样调用.</p>
<p>注意:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1. 函数对象(仿函数)是一个类, 不是一个函数</div><div class="line">2. 函数对象重载了&quot;()&quot;操作符, 使得它可以像函数一样调用</div><div class="line">3. 函数对象可以像普通函数一样调用, 并且可以有参数, 有返回值</div><div class="line">4. 函数对象也可以做参数</div><div class="line">5. 函数对象可以有自己的状态</div><div class="line">6. 函数对象比普通函数执行效率高, 有一定就几率在类内部被内联编译</div><div class="line"></div><div class="line">struct Print&#123;</div><div class="line">	void operator( int val )&#123;</div><div class="line">		cout&lt;&lt;val&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void doBusiness(Print p)&#123;</div><div class="line">	p(20);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分类</p>
<blockquote>
<p>一元仿函数(一个参数) 和 二元仿函数(两个参数)</p>
</blockquote>
<h2 id="2-谓词"><a href="#2-谓词" class="headerlink" title="2. 谓词"></a>2. 谓词</h2><p>谓词是指 <strong>普通函数</strong>或者<strong>重载的operator()</strong> 返回值是 bool类型的函数对象(仿函数).<br>如果operator接收一个参数, 那么叫做一元谓词; 如果接收两个参数, 那么叫做二元谓词.</p>
<p>谓词可以作为一个判断式.</p>
<h3 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> GreaterThanFive&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )&#123;</div><div class="line">		v.push_back(i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ret = find_if(v.begin(), v.end(), GreaterThanFive());</div><div class="line">	<span class="keyword">if</span>( ret == v.end() )&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT FOUND!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"FOUND IT: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">struct</span> MyCompare&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> v1 &gt; v2;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )</div><div class="line">		v.push_back(rand()%<span class="number">100</span>);</div><div class="line">		</div><div class="line">	<span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin() ; it != v.end() ; ++it )</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 排序算法</span></div><div class="line">	sort( v.begin() , v.end() , MyCompare );</div><div class="line">	<span class="keyword">for</span>( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin() ; it != v.end() ; ++it )</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-内建函数对象"><a href="#3-内建函数对象" class="headerlink" title="3. 内建函数对象"></a>3. 内建函数对象</h2><p>STL内建了一些函数对象, 分为: 算数类函数对象, 关系运算类函数对象, 逻辑运算类函数对象.<br>引入头文件 #include <functional></functional></p>
<p>算数类函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T plus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T minus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T multiplies&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T divieds&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T modulus&lt;T&gt;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; T negate&lt;T&gt;;<span class="comment">// 一元</span></div></pre></td></tr></table></figure></p>
<p>关系运算类函数对象, 都是二元运算<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">equal_to</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">not_equal_to</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">greater</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">greater_equal</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">less</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">less_equal</span><span class="params">(T)</span></span>;</div></pre></td></tr></table></figure></p>
<p>逻辑运算类函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_and</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_or</span><span class="params">(T)</span></span>;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">logical_not</span><span class="params">(T)</span></span>;<span class="comment">// 一元</span></div></pre></td></tr></table></figure></p>
<p>比如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">6</span>);</div><div class="line">v.push_back(<span class="number">5</span>);</div><div class="line">v.push_back(<span class="number">9</span>);</div><div class="line"></div><div class="line">sort( v.begin() , v.end() , greater&lt;<span class="keyword">int</span>&gt;() );</div><div class="line">for_each( v.begin() , v.end() , []( <span class="keyword">int</span> val )&#123; <span class="built_in">cout</span>&lt;&lt;val&lt;&lt;<span class="string">" "</span>&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="4-适配器"><a href="#4-适配器" class="headerlink" title="4. 适配器"></a>4. 适配器</h2><p>绑定适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> MyPrint : <span class="keyword">public</span> binary_function&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">void</span>&gt; &#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line">	</div><div class="line">	<span class="comment">// bind2nd 把二元函数对象适配成一元函数对象</span></div><div class="line">	<span class="comment">// 也可以用bind1st, 本质没有任何区别, 就是附属参数的位置</span></div><div class="line">	<span class="comment">// 函数对象才可以, 普通函数使用bind会报错</span></div><div class="line">	for_each(v.begin(), v.end(), bind2nd(MyPrint(), <span class="number">100</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数指针适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrintFunction</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line">	</div><div class="line">	<span class="comment">// ptr_func 把普通函数转换为函数对象(仿函数)</span></div><div class="line">	for_each(v.begin(), v.end(), bind2nd(ptr_func(MyPrintFunction), <span class="number">100</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>取反适配器<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// not1 (针对一元函数对象取反)</span></div><div class="line"><span class="keyword">struct</span> myCondition : <span class="keyword">public</span> unary_function&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; &#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// const 必须要加</span></div><div class="line">		<span class="keyword">return</span> v &gt;= <span class="number">20</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	v.push_back(<span class="number">10</span>);</div><div class="line">	v.push_back(<span class="number">20</span>);</div><div class="line">	v.push_back(<span class="number">30</span>);</div><div class="line">	v.push_back(<span class="number">40</span>);</div><div class="line">	v.push_back(<span class="number">50</span>);</div><div class="line"></div><div class="line">	<span class="comment">// not1(函数对象), 对函数对象对应的结果取反</span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), not1(myCondition()));</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (it == v.end())&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NOT FOUND"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;<span class="comment">// 找到的是小于20的数</span></div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// not2 (针对二元函数对象取反)</span></div><div class="line">	<span class="comment">// 结果从大到小输出</span></div><div class="line">	sort(v.begin(), v.end(), not2(less&lt;<span class="keyword">int</span>&gt;()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>成员函数适配器: 将类中的成员函数适配成函数对象<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Student&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Student(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : name(name), age(age)&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">"age: "</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">string</span> name;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;Student *&gt; v;</div><div class="line">	Student *s1 = <span class="keyword">new</span> Student(<span class="string">"stu1"</span>, <span class="number">10</span>);</div><div class="line">	Student *s2 = <span class="keyword">new</span> Student(<span class="string">"stu2"</span>, <span class="number">20</span>);</div><div class="line">	Student *s3 = <span class="keyword">new</span> Student(<span class="string">"stu3"</span>, <span class="number">30</span>);</div><div class="line">	Student *s4 = <span class="keyword">new</span> Student(<span class="string">"stu4"</span>, <span class="number">40</span>);</div><div class="line">	Student *s5 = <span class="keyword">new</span> Student(<span class="string">"stu5"</span>, <span class="number">50</span>);</div><div class="line">	</div><div class="line">	v.push_back(s1);</div><div class="line">	v.push_back(s2);</div><div class="line">	v.push_back(s3);</div><div class="line">	v.push_back(s4);</div><div class="line">	v.push_back(s5);</div><div class="line">	</div><div class="line">	<span class="comment">// mem_func : 如果存储的是对象的指针, 需要使用mem_func</span></div><div class="line">	for_each(v.begin(), v.end(), mem_func(&amp;Student::print));</div><div class="line">	</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">vector</span>&lt;Student&gt; v2;</div><div class="line"></div><div class="line">	v2.push_back(Student(<span class="string">"stu1"</span>, <span class="number">10</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu2"</span>, <span class="number">20</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu3"</span>, <span class="number">30</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu4"</span>, <span class="number">40</span>));</div><div class="line">	v2.push_back(Student(<span class="string">"stu5"</span>, <span class="number">50</span>));</div><div class="line">	</div><div class="line">	<span class="comment">// mem_func : 如果存储的是对象本身, 需要使用mem_func_ref</span></div><div class="line">	for_each(v2.begin(), v2.end(), mem_func_ref(&amp;Student::print));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;理想对我来说，具有一种非凡的魅力。我的理想总是充满着生活和泥土气息。我从来都不去空想那些不可能实现的事情。&lt;br&gt;—— &lt;strong&gt;奥斯特洛夫斯基&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;算法头文件是由 “ algorithm functional numeric “ 组成.&lt;/p&gt;
&lt;p&gt;algorithm&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是所有STL头文件中最大的一个, 其中常用的功能涉及到比较, 交换, 查找遍历,&lt;br&gt;复制, 修改, 反转, 排序, 合并等..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;numeric&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 体积很小, 只包括几个序列容器上进行的简单运算的模板函数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;functional&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 定义了一些模板类, 用以声明函数对象.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 关联容器</title>
    <link href="http://yoursite.com/2017/04/04/STL%E5%9F%BA%E7%A1%80-%E4%B9%8B-%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/04/04/STL基础-之-关联容器/</id>
    <published>2017-04-03T17:01:52.000Z</published>
    <updated>2017-04-04T08:53:43.549Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>青春留不住，白发自然生。<br>—— <strong>杜牧</strong><br></blockquote>

<p>关联式容器 – set &amp; map.</p>
<a id="more"></a>
<h2 id="set-amp-multiset"><a href="#set-amp-multiset" class="headerlink" title="set &amp; multiset"></a>set &amp; multiset</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>set的特性是: 所有特性都会根据元素的键值自动被排序. set不允许两个元素有相同的键值.</p>
<blockquote>
<p>迭代器: set的迭代器是一种const_iterator. 也就是说, 不能根据set的迭代器改变set元素的值.</p>
</blockquote>
<p>multiset特性与set基本一致, 唯一的差别是它允许键值重复.</p>
<p>set和multiset的底层实现是红黑树, 是平衡二叉树的一种, 是一种高级数据结构.</p>
<h3 id="2-set常用API"><a href="#2-set常用API" class="headerlink" title="2. set常用API"></a>2. set常用API</h3><p>set 构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>&lt;T&gt; st;</div><div class="line"><span class="built_in">multiset</span>&lt;T&gt; mst;</div><div class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);</div></pre></td></tr></table></figure>
<p>set 赋值函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);</div><div class="line">swap(st);</div></pre></td></tr></table></figure></p>
<p>set 大小操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size()</div><div class="line">empty()</div></pre></td></tr></table></figure></p>
<p>set 插入和删除<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">insert(elem);</div><div class="line">clear();</div><div class="line">erase(pos);</div><div class="line">erase(beg, end);</div><div class="line">erase(elem);</div></pre></td></tr></table></figure></p>
<p>set 查找操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">find(key);</div><div class="line">count(key);</div><div class="line">lower_bound(keyElem);</div><div class="line">upper_bound(keyElem);</div><div class="line">equal_range(keyElem);</div></pre></td></tr></table></figure></p>
<p>set 的返回值和指定set排序规则<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> MyCompare02&#123;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> v1 &gt; v2;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare02&gt; s;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++i )&#123;</div><div class="line">	s.insert(rand()%<span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>( <span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare02&gt;::iterator it = s.begin() ; it != s.end() ; ++it )&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>pair对组</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair1(<span class="built_in">string</span>(<span class="string">"name"</span>), <span class="number">20</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair1.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair1.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair2 = make_pair(<span class="string">"name"</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair2.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair2.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"><span class="comment">// 赋值</span></div><div class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pair3 = pair2;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair3.first &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pair3.second &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
<h2 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>map的特性是, 所有元素都会根据元素的键值自动排序. map的所有元素都是pair, 同时拥有<br>实值和键值, pair的第一个元素是键值, pair的第二个元素被视为实值, map不允许两个元素有相同的键值.</p>
<blockquote>
<p>迭代器: 不能通过map的迭代器改变map的键值.</p>
</blockquote>
<p>multimap和map操作一致, 唯一区别是multimap键值可重复.<br>multimap和map都是以红黑树为底层实现机制的.</p>
<h3 id="2-map-multimap-常用API"><a href="#2-map-multimap-常用API" class="headerlink" title="2. map/multimap 常用API"></a>2. map/multimap 常用API</h3><p>构造函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;T1, T2&gt; maptt;</div><div class="line"><span class="built_in">map</span>(<span class="keyword">const</span> <span class="built_in">map</span>&amp; mp);</div></pre></td></tr></table></figure></p>
<p>赋值函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">map</span>&amp; mp);</div><div class="line">swap(mp);</div></pre></td></tr></table></figure></p>
<p>map大小操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line"><span class="built_in">map</span>();</div></pre></td></tr></table></figure></p>
<p>map插入数据<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>.insert(...);</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mapStu;</div><div class="line">mapStu.insert(pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">"小张"</span>));</div><div class="line">mapStu.insert(make_pair(<span class="number">-1</span>, <span class="string">"校长"</span>));</div><div class="line">mapStu.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::value_type(<span class="number">1</span>, <span class="string">"小李"</span>));</div><div class="line"></div><div class="line">mapStu[<span class="number">3</span>] = <span class="string">"小刘"</span>;</div><div class="line">mapStu[<span class="number">5</span>] = <span class="string">"小王"</span>;</div></pre></td></tr></table></figure></p>
<p>map删除操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clear();</div><div class="line">erase();</div><div class="line">erase(beg, end);</div><div class="line">erase(elem);</div></pre></td></tr></table></figure></p>
<p>map查找操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">find(key);</div><div class="line">count(keyElem);</div><div class="line">lower_bound(keyElem);</div><div class="line">upper_bound(keyElem);</div><div class="line">equal_range(keyElem);</div></pre></td></tr></table></figure></p>
<h2 id="STL容器元素深-浅拷贝问题"><a href="#STL容器元素深-浅拷贝问题" class="headerlink" title="STL容器元素深/浅拷贝问题"></a>STL容器元素深/浅拷贝问题</h2><p>stl容器所提供的都是值寓意, 而非引用寓意, 也就是说当我们往容器中插入元素的时候, 容器内部实施了拷贝动作,<br>将我们插入的元素再另行拷贝一份放入容器中, 而不是将原数据元素直接放进容器中, 也就是我们提供的元素必须能够被拷贝.</p>
<h2 id="STL容器使用时机"><a href="#STL容器使用时机" class="headerlink" title="STL容器使用时机"></a>STL容器使用时机</h2><p><img src="http://static.zybuluo.com/zhiyu/qrjjiz5vauurej4z43k8dba0/1.png" alt="1.png-93.1kB"></p>
<ul>
<li>vector的使用场景<ul>
<li>比如软件历史操作记录的存储, 我们经常要查看历史记录, 而不会去删除记录.</li>
</ul>
</li>
<li><p>deque的使用场景</p>
<ul>
<li><p>排队购票系统, 支持头端的快速移除, 尾端的快速添加.</p>
</li>
<li><p>vector 与 deque 的比较:</p>
<ul>
<li>vector.at() 比 deque.at()效率高</li>
<li>如果有大量释放操作, vector花的时间更少</li>
<li>deque支持头部的快速插入与快速移除, 这是deque的优点</li>
</ul>
</li>
</ul>
</li>
<li><p>list使用场景</p>
<ul>
<li>公交车乘客的存储, 随时可能有乘客下车, 支持频繁的不确定位置元素的移除插入.</li>
</ul>
</li>
<li><p>set使用场景</p>
<ul>
<li>手机游戏的个人得分纪录, 存储要求从高到低顺序排列</li>
</ul>
</li>
<li><p>map的使用场景</p>
<ul>
<li>按ID号存储10万用户, 想要快速通过ID查找到对应的用户.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;青春留不住，白发自然生。&lt;br&gt;—— &lt;strong&gt;杜牧&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;关联式容器 – set &amp;amp; map.&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL基础 之 序列容器</title>
    <link href="http://yoursite.com/2017/04/03/STL%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/04/03/STL基础-一/</id>
    <published>2017-04-03T10:50:55.000Z</published>
    <updated>2017-04-03T16:59:59.640Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>现实是此岸，理想是彼岸，中间隔着湍急的河流，行动则是架在河上的桥梁。<br>—— <strong>克雷洛夫</strong><br></blockquote>

<p>STL( Standard Template Library , 标准模板库 ), 是惠普实验室开发的一系列软件的统称, 现在主要出现在C++中.</p>
<ul>
<li><p>1 STL六大组件:</p>
<ul>
<li>容器</li>
<li>算法</li>
<li>迭代器</li>
<li>仿函数</li>
<li>适配器</li>
<li>空间配置器<a id="more"></a>
</li>
</ul>
</li>
<li><p>2 算法</p>
<p>  分类:</p>
<blockquote>
<p>质变算法和非质变算法</p>
</blockquote>
<p>  质变算法:</p>
<blockquote>
<p>拷贝, 替换, 删除..</p>
</blockquote>
<p>  非质变算法:</p>
<blockquote>
<p>查找, 计数, 遍历, 寻找极值..</p>
</blockquote>
</li>
<li><p>3 迭代器</p>
<p>  种类:</p>
<blockquote>
<p>输入迭代器</p>
<pre><code>- 只读访问, 支持++, ==, !=
</code></pre><p>输出迭代器</p>
<pre><code>- 只写, 支持++
</code></pre><p>前向迭代器</p>
<pre><code>- 读写, 支持++, ==, !=
</code></pre><p>双向迭代器</p>
<pre><code>- 读写, 支持++, --
</code></pre><p>随机访问迭代器</p>
<pre><code>- 读写, 支持++, --, [n], -n, &lt;, &lt;=, &gt;, &gt;=
</code></pre></blockquote>
</li>
</ul>
<h2 id="STL概述"><a href="#STL概述" class="headerlink" title="STL概述"></a>STL概述</h2><h3 id="STL优点"><a href="#STL优点" class="headerlink" title="STL优点"></a>STL优点</h3><ul>
<li>高可复用性</li>
<li>高性能</li>
<li>高移植性</li>
</ul>
<h3 id="STL中心思想"><a href="#STL中心思想" class="headerlink" title="STL中心思想"></a>STL中心思想</h3><ul>
<li>将数据容器和算法分开, 彼此独立设计</li>
</ul>
<h3 id="常见序列式容器"><a href="#常见序列式容器" class="headerlink" title="常见序列式容器"></a>常见序列式容器</h3><h4 id="1-Vector"><a href="#1-Vector" class="headerlink" title="1 Vector"></a>1 Vector</h4><p>动态数组<br>迭代器: 随机访问迭代器</p>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;T&gt; v;</div><div class="line"><span class="built_in">vector</span>&lt;v.begin(), v.end());</div><div class="line"><span class="built_in">vector</span>&lt;n, elem);</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="built_in">vector</span> &amp;vec);</div><div class="line"></div><div class="line">// e.g.</div><div class="line"><span class="keyword">int</span> arr[] = &#123;2,3,4,1,9&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(arr, arr+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;vec);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line">empty();</div><div class="line">resize(<span class="keyword">int</span> num);</div><div class="line">resize(<span class="keyword">int</span> num, elem);</div><div class="line">capacity();</div><div class="line">reserve(<span class="keyword">int</span> len);</div></pre></td></tr></table></figure>
</li>
<li><p>数据存取操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">at(<span class="keyword">int</span> idx)</div><div class="line"><span class="keyword">operator</span>[];</div><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">insert(<span class="keyword">const</span> iterator pos, <span class="keyword">int</span> count, ele);</div><div class="line">push_back(elem);</div><div class="line">pop_back();</div><div class="line">erase(<span class="keyword">const</span> iterator start, <span class="keyword">const</span> iterator end);</div><div class="line">erase(<span class="keyword">const</span> iterator pos);</div><div class="line">clear();</div></pre></td></tr></table></figure>
</li>
<li><p>vector 小坑与小技巧</p>
</li>
</ul>
<p>当vector不停的插入元素的时, size不断的增大的同时, 他的容量其实也被扩充上去了.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">v.clear();<span class="comment">// 只能清除size, 内存的大小还在</span></div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(v);<span class="comment">// 创建一个匿名对象, 与v的内存空间进行交换, 匿名对象在第二行生命周期结束, 将内存释放掉, v的内存空间变成一个对象的内存空间</span></div><div class="line"></div><div class="line">v.reserve();<span class="comment">// 预先开辟空间</span></div></pre></td></tr></table></figure>
<h4 id="2-Deque"><a href="#2-Deque" class="headerlink" title="2 Deque"></a>2 Deque</h4><p>双向开口的连续线性空间, 头尾都可以进行插入和删除.<br>一段一段的定量的连续空间构成 – 中控器和缓冲区, 数据结构相比vector复杂</p>
<blockquote>
<p>迭代器方面: 随机访问迭代器.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>&lt;T&gt;;</div><div class="line"><span class="built_in">deque</span>(beg, end);</div><div class="line"><span class="built_in">deque</span>(n, elem);</div><div class="line"><span class="built_in">deque</span>(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);</div><div class="line">swap(deq);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">deque</span>.size();</div><div class="line"><span class="built_in">deque</span>.empty();</div><div class="line"><span class="built_in">deque</span>.resize(num);</div><div class="line"><span class="built_in">deque</span>.resuze(num, elem);</div></pre></td></tr></table></figure>
</li>
<li><p>deque双端插入和删除操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push_back();</div><div class="line">push_front();</div><div class="line">pop_back();</div><div class="line">pop_front();</div></pre></td></tr></table></figure>
</li>
<li><p>deque存取操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">at(idx)</div><div class="line"><span class="keyword">operator</span>[];</div><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>deque插入操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">insert(pos, elem);</div><div class="line">insert(pos, n, elem);</div><div class="line">insert(pos, beg, end);</div></pre></td></tr></table></figure>
</li>
<li><p>deque删除操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clear();</div><div class="line">erase(beg, end);</div><div class="line">erase(pos);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结:</p>
<blockquote>
<p>因为deque设计的特殊性, 其复杂程度远超vector, 当然也影响到各个运算的层面.<br>因此除非有必要, 否则应该尽可能的使用vector, 而不是deque.</p>
</blockquote>
<p>最后, 对deque的排序操作, 为了最高效率, 可以将deque先完整的复制到一个vector中, 对vector进行排序后, 再复制回的deque.</p>
<h4 id="3-List"><a href="#3-List" class="headerlink" title="3 List"></a>3 List</h4><p>循环双向链表.</p>
<p>vector 和 list 是最常被使用的两个容器.<br>list对空间的运用有绝对的精准, 动态存储分配, 一点都不浪费.<br>插入和删除操作十分方便,  修改指针即可.<br>但是, 空间和时间消耗比较大.</p>
<blockquote>
<p>迭代器: 双向迭代器</p>
</blockquote>
<p>List的重要性质:</p>
<blockquote>
<p>插入和删除操作都不会造成对原有list迭代器的失效. vector就行, 一旦涉及到重新分配内存, 原有的迭代器地址就会失效.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;T&gt; lst;</div><div class="line"><span class="built_in">list</span>(beg, end);</div><div class="line"><span class="built_in">list</span>(n, elem);</div><div class="line"><span class="built_in">list</span>(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst);</div></pre></td></tr></table></figure>
</li>
<li><p>插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">push_back(elem);</div><div class="line">pop_back();</div><div class="line">push_front();</div><div class="line">pop_front();</div><div class="line">insert(pos, elem);</div><div class="line">insert(pos, n, elem);</div><div class="line">insert(pos, beg, end);</div><div class="line">clear();</div><div class="line">erase(beg, end);</div><div class="line">erase(pos);</div><div class="line">remove(elem);</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size();</div><div class="line">empty();</div><div class="line">resize(num);</div><div class="line">resize(num, elem);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">list</span>&amp; lst);</div><div class="line">swap(lst);</div></pre></td></tr></table></figure>
</li>
<li><p>存取</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">front();</div><div class="line">back();</div></pre></td></tr></table></figure>
</li>
<li><p>排序</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">reverse();</div><div class="line">sort();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-Stack"><a href="#4-Stack" class="headerlink" title="4 Stack"></a>4 Stack</h4><p>先进后出, 只有一个出口.</p>
<blockquote>
<p>迭代器: stack没有迭代器. 也不提供遍历功能.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&lt;T&gt; sk;</div><div class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span>&amp; stk);</div></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);</div><div class="line">push(elem);</div><div class="line">pop();</div><div class="line">top();</div></pre></td></tr></table></figure>
</li>
<li><p>大小操作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty();</div><div class="line">size();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="5-Queue"><a href="#5-Queue" class="headerlink" title="5 Queue"></a>5 Queue</h4><p>队列, 先进先出.</p>
<blockquote>
<p>迭代器: 不提供遍历功能, 也不提供迭代器.</p>
</blockquote>
<ul>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;T&gt; que;</div><div class="line"><span class="built_in">queue</span>(<span class="keyword">const</span> <span class="built_in">queue</span>&amp; que);</div></pre></td></tr></table></figure>
</li>
<li><p>存取, 插入和删除</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push(elem);</div><div class="line">pop();</div><div class="line">back();</div><div class="line">front();</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>赋值<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>大小操作<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty();</div><div class="line">size();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;现实是此岸，理想是彼岸，中间隔着湍急的河流，行动则是架在河上的桥梁。&lt;br&gt;—— &lt;strong&gt;克雷洛夫&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;STL( Standard Template Library , 标准模板库 ), 是惠普实验室开发的一系列软件的统称, 现在主要出现在C++中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 STL六大组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;li&gt;仿函数&lt;/li&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;li&gt;空间配置器
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7 基础知识(一)</title>
    <link href="http://yoursite.com/2017/04/03/Python2-7-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/04/03/Python2-7-基础知识-一/</id>
    <published>2017-04-02T19:14:13.000Z</published>
    <updated>2017-04-03T10:33:30.669Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>道德普遍地被认为是人类的最高目的，因此也是教育的最高目的.<br>—— <strong>赫尔巴特</strong><br></blockquote>

<h2 id="Python2-7基础（一）"><a href="#Python2-7基础（一）" class="headerlink" title="Python2.7基础（一）"></a>Python2.7基础（一）</h2><h3 id="拿什么写python"><a href="#拿什么写python" class="headerlink" title="拿什么写python"></a>拿什么写python</h3><p>（1） python官方IDE<br>（2） ipython<br>（3） sublime text<br>（4） Atom<br><a id="more"></a></p>
<h3 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1 输入输出"></a>1 输入输出</h3><p>输入：</p>
<blockquote>
<p>print ‘hello world’</p>
</blockquote>
<p>输出：</p>
<blockquote>
<p>name = raw_input(‘Please enter your name: ‘)<br>raw_input 返回值为字符串</p>
</blockquote>
<h3 id="2-数据类型和变量"><a href="#2-数据类型和变量" class="headerlink" title="2 数据类型和变量"></a>2 数据类型和变量</h3><p>可变类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列表</span></div></pre></td></tr></table></figure>
<p>不可变类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 整数</span></div><div class="line"><span class="comment"># 浮点数</span></div><div class="line"><span class="comment"># 字符串</span></div><div class="line"><span class="comment"># 布尔值</span></div><div class="line"><span class="comment"># 空值 None</span></div></pre></td></tr></table></figure>
<p>python中的变量，都是一个对象，对于不可变类型数据来说，变量看似是变成了一个新值， 但是其实是指向了一个新的对象而已，多个变量指向同一个对象时，对象不会被重复创建，只是引用计数器+1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span></div><div class="line">b = a</div><div class="line">a = <span class="number">20</span></div><div class="line"><span class="comment"># b = ?</span></div><div class="line"></div><div class="line"><span class="comment"># 有c语言基础的同学，其实可以将python中的赋值操作，理解为指针操作。</span></div><div class="line"></div><div class="line">a = <span class="number">10</span> <span class="comment"># 其实是指 变量a 指向了 10 这个数据</span></div><div class="line">b = a  <span class="comment"># 变量b 此时也指向了 10 这个数据， 此时有2个变量指向 10</span></div><div class="line">a = <span class="number">20</span> <span class="comment"># 变量a 此时指向了20， 并不是把 10 这个数据修改了</span></div><div class="line">b = <span class="number">10</span> <span class="comment"># 此时b 仍为10</span></div></pre></td></tr></table></figure>
<p>python中，字符串和整数都被缓存起来了，并不会重复创建，也不会被销毁</p>
<h3 id="3-字符串和编码"><a href="#3-字符串和编码" class="headerlink" title="3 字符串和编码"></a>3 字符串和编码</h3><h3 id="4-list-tuple-和-dict-set"><a href="#4-list-tuple-和-dict-set" class="headerlink" title="4 list, tuple 和 dict, set"></a>4 list, tuple 和 dict, set</h3><p>dir(list) ==&gt; 查看对象属性</p>
<p>list<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">a.append(<span class="number">4</span>)</div><div class="line"></div><div class="line">a.count(value)</div><div class="line"></div><div class="line">a.extend()</div><div class="line"></div><div class="line">a.index(value)</div><div class="line"></div><div class="line">a.pop()</div><div class="line"></div><div class="line">a.remove()</div><div class="line"></div><div class="line">a.reverse()</div><div class="line"></div><div class="line">a.sort()</div></pre></td></tr></table></figure></p>
<p>tuple<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">a.count(value)</div><div class="line">a.index(value)</div></pre></td></tr></table></figure></p>
<p>dict<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">clear</div><div class="line">copy</div><div class="line">fromkeys</div><div class="line">get</div><div class="line">has_key</div><div class="line">items</div><div class="line">iteritems</div><div class="line">iterkeys</div><div class="line">itervalues</div><div class="line">keys</div><div class="line">pop</div><div class="line">popitem</div><div class="line">setdefault</div><div class="line">update</div><div class="line">values</div><div class="line">viewitems</div><div class="line">viewkeys</div><div class="line">viewvalues</div></pre></td></tr></table></figure></p>
<p>set<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">add</div><div class="line">clear</div><div class="line">copy</div><div class="line">difference</div><div class="line">difference_update</div><div class="line">discard</div><div class="line">intersection</div><div class="line">intersection_update</div><div class="line">isdisjoint</div><div class="line">issubset</div><div class="line">issuperset</div><div class="line">pop</div><div class="line">remove</div><div class="line">sysmmetric_difference</div><div class="line">sysmmetric_difference_update</div><div class="line">union</div><div class="line">update</div></pre></td></tr></table></figure></p>
<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5 函数"></a>5 函数</h3><p>函数变长参数: <em>args 和 *</em>kwargs</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func</span><span class="params">(a, b, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">test_ func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, x=<span class="number">100</span>, y=<span class="number">200</span>)</div><div class="line"></div><div class="line"><span class="comment"># a = 1</span></div><div class="line"><span class="comment"># b = 2</span></div><div class="line"><span class="comment"># args = (3,4)</span></div><div class="line"><span class="comment"># kwargs = &#123;'x': 100, 'y': 200&#125;</span></div></pre></td></tr></table></figure>
<h3 id="6-高级特性"><a href="#6-高级特性" class="headerlink" title="6 高级特性"></a>6 高级特性</h3><p>切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a_list[::-1] # 逆序</div><div class="line">a_list[:]    # 拷贝， 浅拷贝</div><div class="line">a_list[::2]  # 隔一个取一个</div></pre></td></tr></table></figure></p>
<p>浅拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alist[:] <span class="comment"># 切片拷贝</span></div><div class="line"></div><div class="line">list(alist) <span class="comment"># list工厂方法</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> copy</div><div class="line">copy.copy(alist) <span class="comment"># copy方法</span></div></pre></td></tr></table></figure></p>
<p>深拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line">copy.deepcopy(alist)</div></pre></td></tr></table></figure></p>
<p>zip<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">b = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">[(x,y) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(a, b)]</div><div class="line">[(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">6</span>)]</div></pre></td></tr></table></figure></p>
<p>enumerate<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(a):</div><div class="line">    <span class="keyword">print</span> i, e</div><div class="line"><span class="comment"># i 为index</span></div><div class="line"><span class="comment"># e 为元素</span></div></pre></td></tr></table></figure></p>
<p>Iterable<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line">isinstance(a, Iterable)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>列表生成器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[randint(<span class="number">0</span>,<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">10</span>)]</div><div class="line"></div><div class="line">[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>)]</div><div class="line"></div><div class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>]</div></pre></td></tr></table></figure>
<p>生成器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基础用法</span></div><div class="line">(randint(<span class="number">0</span>,<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"></div><div class="line">(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"></div><div class="line">(x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># next() , send()</span></div><div class="line">next 获取迭代器中的下一个值, 直到获取完毕</div><div class="line">send 具有next的全部功能之外, 还可以传递参数</div><div class="line"></div><div class="line"><span class="comment"># yield</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">4</span>):</div><div class="line">        temp = <span class="keyword">yield</span> x</div><div class="line">        <span class="keyword">if</span> temp == <span class="string">'hello'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'world'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'haha'</span>, temp</div><div class="line"><span class="keyword">yield</span>作用:</div><div class="line">    - 中断函数, 返回x的值</div><div class="line">    - 再次运行时, 可以再次回到上次中断的位置, 继续向下执行</div></pre></td></tr></table></figure>
<h3 id="7-函数式编程"><a href="#7-函数式编程" class="headerlink" title="7 函数式编程"></a>7 函数式编程</h3><p>map / reduce<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, a)</div><div class="line"></div><div class="line">map中传入的函数, 要求传入一个参数, 也就是seq中的每一个元素.</div><div class="line"></div><div class="line">map的返回值, 就是每个元素经过函数处理之后的新值, 并将新值放入了一个新的seq, 然后返回seq</div><div class="line">-----------------</div><div class="line">reduce(<span class="keyword">lambda</span> x,y: x+y, a)</div><div class="line"></div><div class="line">reduce中传入的函数, 要求传入两个参数,</div><div class="line">参数来源也就是seq中的元素</div><div class="line"></div><div class="line">reduce函数的作用就是, 将seq中从前往后, 前<span class="number">2</span>个元素进行一次操作, 操作后的结果, 再跟下一个元素进行运算, 直到最后.</div><div class="line"></div><div class="line">reduce的返回值, 返回一个运算后的结果</div></pre></td></tr></table></figure></p>
<p>filter<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>, a)</div><div class="line"></div><div class="line">filter中也要求传入一个函数, 要求传入一个参数, 也就是seq中的元素, 但是要求函数的返回值必须是布尔类型</div><div class="line"></div><div class="line">根据返回值的<span class="keyword">True</span>或<span class="keyword">False</span>, <span class="keyword">False</span>时移除该元素</div></pre></td></tr></table></figure></p>
<p>sorted<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorted 返回一个新的list</div></pre></td></tr></table></figure></p>
<p>匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lambda</span> x, y: x*y</div></pre></td></tr></table></figure></p>
<p>装饰器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(when=<span class="string">''</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> f, args, kwargs</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_logged</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(f)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            log(f, *args, **kwargs)</div><div class="line">            f(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'pre_logged'</span></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_logged</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(f)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            now = time()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> f(*args, **kwargs)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                log(f, *args, **kwargs)</div><div class="line">                <span class="keyword">print</span> <span class="string">'time delta: %s'</span> % (time()-now())</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> when:</div><div class="line">            <span class="keyword">return</span> &#123;<span class="string">'pre'</span>: pre_logged, <span class="string">'post'</span>: post_logged&#125;[when]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> pre_logged</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        ValueError(<span class="string">'must be "pre" or "post" %s'</span> % e)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@logged("post")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># 如果不引入functools模块, func函数被装饰器函数包裹后, __name__ 变成了 wrapper</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'---&gt;Hello %s, %s'</span> % (name, __name__)</div></pre></td></tr></table></figure>
<p>偏函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 通过设定参数的默认值，可以降低函数调用的难度.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line">int2 = functools.partial(int, base=<span class="number">8</span>)</div></pre></td></tr></table></figure></p>
<h3 id="8-模块"><a href="#8-模块" class="headerlink" title="8 模块"></a>8 模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Six'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, World!'</span></div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Too many arguments!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 模块内部的调试代码, 被导入时, name == 模块名, 自己运行时, name 才等于 __main__ </span></div><div class="line">    test()</div></pre></td></tr></table></figure>
<p>包:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文件夹内, 加入 __init__.py, 模块升级为包</div></pre></td></tr></table></figure>
<p>_<em>future</em>模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;道德普遍地被认为是人类的最高目的，因此也是教育的最高目的.&lt;br&gt;—— &lt;strong&gt;赫尔巴特&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Python2-7基础（一）&quot;&gt;&lt;a href=&quot;#Python2-7基础（一）&quot; class=&quot;headerlink&quot; title=&quot;Python2.7基础（一）&quot;&gt;&lt;/a&gt;Python2.7基础（一）&lt;/h2&gt;&lt;h3 id=&quot;拿什么写python&quot;&gt;&lt;a href=&quot;#拿什么写python&quot; class=&quot;headerlink&quot; title=&quot;拿什么写python&quot;&gt;&lt;/a&gt;拿什么写python&lt;/h3&gt;&lt;p&gt;（1） python官方IDE&lt;br&gt;（2） ipython&lt;br&gt;（3） sublime text&lt;br&gt;（4） Atom&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
  </entry>
  
  <entry>
    <title>C++模板原理简单剖析</title>
    <link href="http://yoursite.com/2017/04/02/C-%E6%A8%A1%E6%9D%BF%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/02/C-模板原理简单剖析/</id>
    <published>2017-04-02T08:12:17.000Z</published>
    <updated>2017-04-03T08:47:25.944Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。<br>—— <strong>罗·科林伍德</strong><br></blockquote>


<p>c++提供了两种机制: <strong>函数模板</strong> 和 <strong>类模板</strong>.</p>
<p>总结:</p>
<blockquote>
<p>(1) 模板把函数或类要处理的数据类型<strong>参数化</strong>, 表现为参数的多态性, 成为类属, 又称参数模板<br>(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为<br>(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性</p>
</blockquote>
<a id="more"></a>
<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>简单使用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</div><div class="line">    T temp = a;</div><div class="line">    a = b;</div><div class="line">    b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动推导参数类型 --&gt; int</span></div><div class="line">    mySwap(a,b);</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">char</span> c2 = <span class="string">'b'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动类型推导, 也可以显示指定类型</span></div><div class="line">    mySwap&lt;<span class="keyword">char</span>&gt;(c1,c2);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数模板和普通函数的区别"><a href="#函数模板和普通函数的区别" class="headerlink" title="函数模板和普通函数的区别"></a>函数模板和普通函数的区别</h3><ul>
<li>函数模板不允许自动化类型转化, 必须严格匹配类型, 也就是不允许隐式转换, 比如 char 转 int ; 普通函数可以自动转换;</li>
</ul>
<h3 id="函数模板和普通函数的调用规则"><a href="#函数模板和普通函数的调用规则" class="headerlink" title="函数模板和普通函数的调用规则"></a>函数模板和普通函数的调用规则</h3><ul>
<li>函数模板可以像普通函数那样被重载</li>
<li>都能匹配的话, c++编译器优先考虑普通函数</li>
<li>如果函数模板可以产生一个更好的匹配(比如<strong>不需要隐式类型转换</strong>), 那么选择模板</li>
<li>可以通过<strong>空模板实参列表</strong>的语法, 限定编译器只能通过模板匹配<ul>
<li>myPlus&lt;&gt;(a, b)</li>
</ul>
</li>
</ul>
<h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><ul>
<li>类模板用于实现类所需数据的类型参数化</li>
<li>类模板在表示如数组, 表, 图等数据结构显得特别重要, 这些数据结构的表示和算法不受所包含的数据类型的影响.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> NameType, <span class="keyword">class</span> AgeType&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(NameType name, AgeTye age)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mName = name;</div><div class="line">        <span class="keyword">this</span>-&gt;mAge = age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NameType mName;</div><div class="line">    AgeType mAge;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p(<span class="string">"John"</span>, <span class="number">30</span>);</div><div class="line">    p.PrintPerson();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板做函数参数"><a href="#类模板做函数参数" class="headerlink" title="类模板做函数参数"></a>类模板做函数参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doBusiness</span><span class="params">(T&amp; p)</span></span></div><div class="line">&#123;</div><div class="line">    p.mAge += <span class="number">20</span>;</div><div class="line">    p.mName += <span class="string">"vip"</span>;</div><div class="line">    p.PrintPerson();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doBusiness</span><span class="params">(Person&lt;T1, T2&gt;&amp; p)</span></span></div><div class="line">&#123;</div><div class="line">    p.mAge += <span class="number">20</span>;</div><div class="line">    p.mName += <span class="string">"vip"</span>;</div><div class="line">    p.PrintPerson();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板派生普通类"><a href="#类模板派生普通类" class="headerlink" title="类模板派生普通类"></a>类模板派生普通类</h3><p>子类实例化的时候, 需要具体化的父类, 这样c++编译器才能知道给子类分配多少内存</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> SubClass: <span class="keyword">public</span> MyClass&lt;<span class="keyword">int</span>&gt;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SubClass(<span class="keyword">int</span> b): MyClass&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mB = b;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> mB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板派生类模板"><a href="#类模板派生类模板" class="headerlink" title="类模板派生类模板"></a>类模板派生类模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> MyClass&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MyClass(T property)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = property;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> SubClass : <span class="keyword">public</span> MyClass&lt;T&gt;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SubClass(T b) : MyClass&lt;T&gt;(b) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mB = b;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T mB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类模板碰上友元函数"><a href="#类模板碰上友元函数" class="headerlink" title="类模板碰上友元函数"></a>类模板碰上友元函数</h3><p>按照常规, 在类外实现</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 首先, 编译器紧把这个友元函数, 当作是一个普通函数, 不会根据具体类型, 去产生具体的实现体, 即使外部给出了函数模板实现体</span></div><div class="line">    <span class="comment">// 其次, 友元函数其实并不是函数声明, 只是告诉编译器, 这个函数是我的一个朋友, 仅此而已. 并没有对实现进行检查, 所以调用时, 编译器根本不知道有这样一个函数声明</span></div><div class="line">    <span class="comment">// 外部调用时, 会直接当成普通函数, 去查找其实现体, 而类外的实现仅是为函数模板生成具体实现, 普通函数不会为其实现</span></div><div class="line">    <span class="comment">// 所以, 会直接产生错误, 找不到函数的声明和实现</span></div><div class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;p)</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; p.mProperty &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="keyword">int</span>&gt; p (<span class="number">20</span>);</div><div class="line">    Friend(p);<span class="comment">// 错误, 没有声明, 也没有实现</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改为, 两步:</p>
<ol>
<li>告诉编译这个友元函数要优先匹配函数模板, 不要先找普通函数</li>
<li>需要给出友元函数的函数声明, 因为类内的friend仅是一个标识, 告诉编译器这个函数是我哥们, 可以访问所有私有数据</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> Person; <span class="comment">// person类前向声明</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T&gt; &amp;person)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 要修改为匹配模板调用</span></div><div class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> FriendPerson&lt;&gt;(Person&lt;T&gt; &amp;p);</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改成<strong>友元函数模板声明</strong>, 最终版:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line">    <span class="comment">// 将friend方法声明为函数模板, 其他不变, 编译通过, 运行无误</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T2&gt; <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">FriendPerson</span><span class="params">(Person&lt;T2&gt; &amp;p)</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(T p)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mProperty = p;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T mProperty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>总结:</p>
<blockquote>
<p>如果是类内实现友元函数的话, 友元的类名声明, 可以不加<strong>template</strong>标识, 建议这样来写, 简单方便.</p>
<p>如果类外实现的话, 友元的类内声明, 一定要加<strong>template</strong>标识, 否则就要friend处标识匹配模板实现, 另外还有额外声明友元函数, 可能还要进行前置声明.</p>
</blockquote>
<h2 id="模板机制剖析"><a href="#模板机制剖析" class="headerlink" title="模板机制剖析"></a>模板机制剖析</h2><p>或者说, 模板为什么不能跨文件编写?</p>
<h3 id="原因一-编译器的独立编译原则"><a href="#原因一-编译器的独立编译原则" class="headerlink" title="原因一: 编译器的独立编译原则"></a>原因一: 编译器的独立编译原则</h3><ul>
<li>编译当前文件时, 不关心也不知道, 另一个文件的情况<ul>
<li>比如, 当前文件调用了另一个文件的方法, 但是编译到当前文件时, 并不关心这个方法是否真的实现, 或者实现中有什么错误, 只是单纯的认为, 存在的就是对的. 如果没有实现, 那么交给链接时, 再去报错.</li>
</ul>
</li>
</ul>
<h3 id="原因二-模板的二次编译"><a href="#原因二-模板的二次编译" class="headerlink" title="原因二: 模板的二次编译"></a>原因二: 模板的二次编译</h3><ul>
<li>编译器会对模板进行两次编译, 在声明的地方对模板代码本身进行编译, 在调用的地方对参数替换后的代码进行编译.<ul>
<li>模板, 其实也是c++编译器做的众多小动作中一个而已.语法上提供了一些简便的写法–写入一个typename即可替代所有类型. 真正的底层原因就是二次编译, 模板还是模板, 但是在其被<strong>真正使用或调用的那一刻</strong>, 那么编译器就会为它具体<strong>生成一个具体的类型实现</strong>.</li>
<li>但是问题来了, 如果分开文件实现, 那么在实现文件中, 由于<strong>编译器的单独编译特性</strong>, 所以编译到实现文件时, 并不知道当前模板被调用的情况, 因为调用通常是在其他文件. <strong>在模板不知道自己被调用时, 编译器不会为其生成具体的实现</strong>, 所以模板调用处, 才产生<strong>链接错误, 方法找不到实现</strong>.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。&lt;br&gt;—— &lt;strong&gt;罗·科林伍德&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;c++提供了两种机制: &lt;strong&gt;函数模板&lt;/strong&gt; 和 &lt;strong&gt;类模板&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 模板把函数或类要处理的数据类型&lt;strong&gt;参数化&lt;/strong&gt;, 表现为参数的多态性, 成为类属, 又称参数模板&lt;br&gt;(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为&lt;br&gt;(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++模板原理简单剖析</title>
    <link href="http://yoursite.com/2017/03/24/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1-%E4%B9%8B-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>http://yoursite.com/2017/03/24/类与对象-之-对象的构造和析构/</id>
    <published>2017-03-24T08:12:17.000Z</published>
    <updated>2017-04-02T17:36:27.389Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。<br>—— <strong>罗·科林伍德</strong><br></blockquote>


<p>c++提供了两种机制: <strong>函数模板</strong> 和 <strong>类模板</strong>.</p>
<p>总结:</p>
<blockquote>
<p>(1) 模板把函数或类要处理的数据类型<strong>参数化</strong>, 表现为参数的多态性, 成为类属, 又称参数模板<br>(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为<br>(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性</p>
</blockquote>
<a id="more"></a>
<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>简单使用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</div><div class="line">    T temp = a;</div><div class="line">    a = b;</div><div class="line">    b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动推导参数类型 --&gt; int</span></div><div class="line">    mySwap(a,b);</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">char</span> c2 = <span class="string">'b'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 函数模板可以自动类型推导, 也可以显示指定类型</span></div><div class="line">    mySwap&lt;<span class="keyword">char</span>&gt;(c1,c2);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数模板和普通函数的区别"><a href="#函数模板和普通函数的区别" class="headerlink" title="函数模板和普通函数的区别"></a>函数模板和普通函数的区别</h3><ul>
<li>函数模板不允许自动化类型转化, 必须严格匹配类型, 也就是不允许隐式转换, 比如 char 转 int ; 普通函数可以自动转换;</li>
</ul>
<h3 id="函数模板和普通函数的调用规则"><a href="#函数模板和普通函数的调用规则" class="headerlink" title="函数模板和普通函数的调用规则"></a>函数模板和普通函数的调用规则</h3><ul>
<li>函数模板可以像普通函数那样被重载</li>
<li>都能匹配的话, c++编译器优先考虑普通函数</li>
<li>如果函数模板可以产生一个更好的匹配(比如<strong>不需要隐式类型转换</strong>), 那么选择模板</li>
<li>可以通过<strong>空模板实参列表</strong>的语法, 限定编译器只能通过模板匹配<ul>
<li>myPlus&lt;&gt;(a, b)</li>
</ul>
</li>
</ul>
<h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><ul>
<li>类模板用于实现类所需数据的类型参数化</li>
<li>类模板在表示如数组, 表, 图等数据结构显得特别重要, 这些数据结构的表示和算法不受所包含的数据类型的影响.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> NameType, <span class="keyword">class</span> AgeType&gt;</div><div class="line"><span class="keyword">class</span> Person&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(NameType name, AgeTye age)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;mName = name;</div><div class="line">        <span class="keyword">this</span>-&gt;mAge = age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NameType mName;</div><div class="line">    AgeType mAge;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p(<span class="string">"John"</span>, <span class="number">30</span>);</div><div class="line">    p.PrintPerson();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模板机制剖析"><a href="#模板机制剖析" class="headerlink" title="模板机制剖析"></a>模板机制剖析</h2><p>或者说, 模板为什么不能跨文件编写?</p>
<h3 id="原因一-编译器的独立编译原则"><a href="#原因一-编译器的独立编译原则" class="headerlink" title="原因一: 编译器的独立编译原则"></a>原因一: 编译器的独立编译原则</h3><ul>
<li>编译当前文件时, 不关心也不知道, 另一个文件的情况<ul>
<li>比如, 当前文件调用了另一个文件的方法, 但是编译到当前文件时, 并不关心这个方法是否真的实现, 或者实现中有什么错误, 只是单纯的认为, 存在的就是对的. 如果没有实现, 那么交给链接时, 再去报错.</li>
</ul>
</li>
</ul>
<h3 id="原因二-模板的二次编译"><a href="#原因二-模板的二次编译" class="headerlink" title="原因二: 模板的二次编译"></a>原因二: 模板的二次编译</h3><ul>
<li>编译器会对模板进行两次编译, 在声明的地方对模板代码本身进行编译, 在调用的地方对参数替换后的代码进行编译.<ul>
<li>模板, 其实也是c++编译器做的众多小动作中一个而已.语法上提供了一些简便的写法–写入一个typename即可替代所有类型. 真正的底层原因就是二次编译, 模板还是模板, 但是在其被<strong>真正使用或调用的那一刻</strong>, 那么编译器就会为它具体<strong>生成一个具体的类型实现</strong>.</li>
<li>但是问题来了, 如果分开文件实现, 那么在实现文件中, 由于<strong>编译器的单独编译特性</strong>, 所以编译到实现文件时, 并不知道当前模板被调用的情况, 因为调用通常是在其他文件. <strong>在模板不知道自己被调用时, 编译器不会为其生成具体的实现</strong>, 所以模板调用处, 才产生<strong>链接错误, 方法找不到实现</strong>.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;真正的自由属于那些自食其力的人，并且在自己的工作中有所作为的人。&lt;br&gt;—— &lt;strong&gt;罗·科林伍德&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;c++提供了两种机制: &lt;strong&gt;函数模板&lt;/strong&gt; 和 &lt;strong&gt;类模板&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 模板把函数或类要处理的数据类型&lt;strong&gt;参数化&lt;/strong&gt;, 表现为参数的多态性, 成为类属, 又称参数模板&lt;br&gt;(2) 模板用于表达逻辑结构相同, 但具体数据元素类型不同的数据对象的通用行为&lt;br&gt;(3) 用模板实现泛型, 可以减轻编程的工作量, 增强函数的重用性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>struct 与 class in C/C++</title>
    <link href="http://yoursite.com/2017/03/24/struct-%E4%B8%8E-class-in-C-C/"/>
    <id>http://yoursite.com/2017/03/24/struct-与-class-in-C-C/</id>
    <published>2017-03-24T08:03:48.000Z</published>
    <updated>2017-03-24T08:09:04.124Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>当你看到不可理解的现象，感到迷惑时，真理可能已经披着面纱悄悄地站在你的面前。<br>—— <strong>巴尔扎克</strong><br></blockquote>


<h2 id="C-和-C-中的-struct-区别"><a href="#C-和-C-中的-struct-区别" class="headerlink" title="C 和 C++ 中的 struct 区别"></a>C 和 C++ 中的 struct 区别</h2><ul>
<li><p>c语言中, struct 只有变量</p>
</li>
<li><p>c++语言中, struct 既可以有变量, 也可以有函数</p>
</li>
</ul>
<a id="more"></a>
<h3 id="struct-与-class-区别"><a href="#struct-与-class-区别" class="headerlink" title="struct 与 class 区别"></a>struct 与 class 区别</h3><blockquote>
<p>class的默认权限为private, struct的默认权限是public</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;当你看到不可理解的现象，感到迷惑时，真理可能已经披着面纱悄悄地站在你的面前。&lt;br&gt;—— &lt;strong&gt;巴尔扎克&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;C-和-C-中的-struct-区别&quot;&gt;&lt;a href=&quot;#C-和-C-中的-struct-区别&quot; class=&quot;headerlink&quot; title=&quot;C 和 C++ 中的 struct 区别&quot;&gt;&lt;/a&gt;C 和 C++ 中的 struct 区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;c语言中, struct 只有变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;c++语言中, struct 既可以有变量, 也可以有函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>引用与指针</title>
    <link href="http://yoursite.com/2017/03/24/%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2017/03/24/引用与指针/</id>
    <published>2017-03-24T05:23:20.000Z</published>
    <updated>2017-03-24T07:52:19.295Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>在任何一个成功的后面都有着十五年到二十年的生活经验，都有着丰富的生活经验，要是没有这些经验，任何才思敏捷恐怕也不会有，而且在这里，恐怕任何天才也都无济于事。<br>—— <strong>巴甫连柯</strong><br></blockquote>

<h2 id="引用和指针"><a href="#引用和指针" class="headerlink" title="引用和指针"></a>引用和指针</h2><p><strong>引用是c++对c的重要扩充.</strong> 在c/c++中指针的作用基本是一样的, 但c++增加了另外一种给函数传递地址的途径, 就是按引用传递.</p>
<blockquote>
<ul>
<li>变量名实质上是一段连续内存空间的别名, 相当于一个门牌号<br>  一个变量可以有n个别名</li>
<li>程序中通过变量来申请并命名内存空间</li>
<li>通过变量的名字可以使用存储空间</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="1-引用的基本用法"><a href="#1-引用的基本用法" class="headerlink" title="1 引用的基本用法"></a>1 引用的基本用法</h3><p>基本语法:</p>
<blockquote>
<p>Type&amp; ref = val;</p>
</blockquote>
<p>注意事项:</p>
<blockquote>
<p>1 &amp;在此不是求地址, 而是标识的作用<br>2 类型标识符是指目标变量的类型<br>3 必须在声明引用变量时进行初始化</p>
<pre><code>int&amp; ref; // 报错
</code></pre><p>4 引用初始化之后, 不能改变</p>
<pre><code>int a = 20;
int b = 30;
int&amp; ref = a;
ref = b; // 报错, 不能改变引用
</code></pre><p>5 不能用NULL引用. 必须确保引用是和一块合法内存的存储单元关联</p>
</blockquote>
<p>建立数组引用:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Type&amp; ref = val;</span></div><div class="line"></div><div class="line"><span class="comment">// 方法1</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ArrRef[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</div><div class="line">ArrRef&amp; ref = arr;</div><div class="line"></div><div class="line"><span class="comment">// 方法2</span></div><div class="line"><span class="keyword">int</span>(&amp;f)[<span class="number">10</span>] = arr;</div></pre></td></tr></table></figure></p>
<h3 id="2-引用的本质"><a href="#2-引用的本质" class="headerlink" title="2 引用的本质"></a>2 引用的本质</h3><p>引用的本质在c++内部实现是一个常指针<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Type&amp; ref = val; <span class="comment">// Type *const ref = &amp;val;</span></div><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span>&amp; ref = a; <span class="comment">// 编译器自动转换为 int * const ref = &amp;a;  这也能说明,引用为什么必须初始化, 因为const变量必须被初始化</span></div><div class="line">ref = <span class="number">20</span>; <span class="comment">// 自动转换为 *ref = 20;</span></div></pre></td></tr></table></figure></p>
<p>c++编译器在编译过程中,使用常指针作为引用的内部实现, 因此<strong>引用所占的空间大小与指针相同</strong>, 只是这个过程是编译器内部实现, 用户看不见.</p>
<h3 id="3-指针的引用"><a href="#3-指针的引用" class="headerlink" title="3 指针的引用"></a>3 指针的引用</h3><p>在c语言中,如果想修改一个指针的指向, 而不是它所指的内容, 函数声明可能这样:</p>
<blockquote>
<p>void func(int **p)</p>
</blockquote>
<p>给指针变量取一个别名:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Type* pointer = <span class="literal">NULL</span>;</div><div class="line">Type*&amp; ref = pointer;</div></pre></td></tr></table></figure></p>
<p>案例:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_teacher</span><span class="params">(Teacher** t)</span></span>&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_teacher_ref</span><span class="params">(Teacher*&amp; t)</span></span>&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    Teacher *teacher = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// c语言指针用法</span></div><div class="line">    init_teacher(&amp;teacher);</div><div class="line">    </div><div class="line">    <span class="comment">// c++中的引用做法, 语法清晰, 不用再取指针的地址</span></div><div class="line">    init_teacher_ref(teacher);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-常量的引用"><a href="#4-常量的引用" class="headerlink" title="4 常量的引用"></a>4 常量的引用</h3><p>常用引用的定义格式:</p>
<blockquote>
<p>const Type&amp; ref = val;</p>
</blockquote>
<p>字面量不能赋给引用, 但可以赋值 const 引用<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = a;</div><div class="line">    <span class="comment">// ref = 200; // 报错; 常引用</span></div><div class="line">    a = <span class="number">200</span>; <span class="comment">// OK</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>const 修饰的引用, 不能修改<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="comment">// int&amp; ref = 100; // 报错; 不能把一个字面量赋给引用</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">100</span>;<span class="comment">// 编译器的内部处理: int temp = 200; const int&amp; ref = temp;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-引用使用的场景"><a href="#5-引用使用的场景" class="headerlink" title="5 引用使用的场景"></a>5 引用使用的场景</h3><p>常量引用主要用在函数的形参, 尤其是类的拷贝构造函数.</p>
<p>将函数的形参定义常量引用的好处:</p>
<blockquote>
<p>1 引用不产生新的变量, <strong>减少形参与实参传递时的开销</strong></p>
<p>2 由于引用可能导致<strong>实参随形参改变而改变</strong>, 将其定义为常量引用可以消除这种副作用.</p>
</blockquote>
<h3 id="6-引用使用时的注意点"><a href="#6-引用使用时的注意点" class="headerlink" title="6 引用使用时的注意点"></a>6 引用使用时的注意点</h3><p>最常看见引用的地方是在函数参数和返回值中.</p>
<ul>
<li>参数中:</li>
</ul>
<p>函数内的任何引用的修改, 将函数外的参数产生改变.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">refSwap</span><span class="params">(<span class="keyword">int</span>&amp; m, <span class="keyword">int</span>&amp; n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = m;</div><div class="line">    m = n;</div><div class="line">    n = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>返回值:</li>
</ul>
<p>函数中返回一个引用, 必须像从函数中返回一个指针一样的对待.当函数返回值时,引用关联的内存一定要存在.</p>
<blockquote>
<p>不能返回局部变量的引用</p>
<pre><code>返回静态局部变量的引用, 就ok
</code></pre><p>函数当左值时, 必须返回引用</p>
<pre><code>test() = 200;// 函数做左值
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;在任何一个成功的后面都有着十五年到二十年的生活经验，都有着丰富的生活经验，要是没有这些经验，任何才思敏捷恐怕也不会有，而且在这里，恐怕任何天才也都无济于事。&lt;br&gt;—— &lt;strong&gt;巴甫连柯&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;引用和指针&quot;&gt;&lt;a href=&quot;#引用和指针&quot; class=&quot;headerlink&quot; title=&quot;引用和指针&quot;&gt;&lt;/a&gt;引用和指针&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;引用是c++对c的重要扩充.&lt;/strong&gt; 在c/c++中指针的作用基本是一样的, 但c++增加了另外一种给函数传递地址的途径, 就是按引用传递.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;变量名实质上是一段连续内存空间的别名, 相当于一个门牌号&lt;br&gt;  一个变量可以有n个别名&lt;/li&gt;
&lt;li&gt;程序中通过变量来申请并命名内存空间&lt;/li&gt;
&lt;li&gt;通过变量的名字可以使用存储空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>gcc 常用编译指令</title>
    <link href="http://yoursite.com/2017/03/24/gcc-%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/03/24/gcc-常用编译指令/</id>
    <published>2017-03-24T04:02:02.000Z</published>
    <updated>2017-03-24T05:20:57.409Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>人生的磨难是很多的，所以我们不可对于每一件轻微的伤害都过于敏感。在生活磨难面前，精神上的坚强和无动于衷是我们抵抗罪恶和人生意外的最好武器。<br>—— <strong>洛克</strong><br></blockquote>

<p>gcc全称为GNU Compiler Collection（GNU编译套件）。GNU is Not Unix。<br>GNU/Linux。</p>
<a id="more"></a>
<p>gcc [-c|-S|-E] [-std=standard]<br>           [-g] [-pg] [-Olevel]<br>           [-Wwarn…] [-Wpedantic]<br>           [-Idir…] [-Ldir…]<br>           [-Dmacro[=defn]…] [-Umacro]<br>           [-foption…] [-mmachine-option…]<br>           [-o outfile] [@file] infile…</p>
<p>预处理<br>编译<br>汇编<br>链接</p>
<p><img src="http://static.zybuluo.com/zhiyu/k4l7ob9kn1ayuby8rqpaufry/Snip20161110_9.png" alt="Snip20161110_9.png-90.4kB"></p>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>(1) -Wall -Wextra<br>    警告全开,<br>(2) - g<br>    编译调试版本<br>(3) -save-temps<br>    保存中间生成文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人生的磨难是很多的，所以我们不可对于每一件轻微的伤害都过于敏感。在生活磨难面前，精神上的坚强和无动于衷是我们抵抗罪恶和人生意外的最好武器。&lt;br&gt;—— &lt;strong&gt;洛克&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;gcc全称为GNU Compiler Collection（GNU编译套件）。GNU is Not Unix。&lt;br&gt;GNU/Linux。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="GCC" scheme="http://yoursite.com/tags/GCC/"/>
    
  </entry>
  
  <entry>
    <title>const in c++</title>
    <link href="http://yoursite.com/2017/03/24/const-in-c/"/>
    <id>http://yoursite.com/2017/03/24/const-in-c/</id>
    <published>2017-03-24T03:08:51.000Z</published>
    <updated>2017-03-24T07:10:07.422Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>人生中最困难者，莫过于选择。<br>—— <strong>莫尔</strong><br></blockquote>


<h2 id="0-const概述"><a href="#0-const概述" class="headerlink" title="0 const概述"></a>0 const概述</h2><p>const字面的意思为常数的,不变的.它是c/c++中的一个关键字,是一个限定符,用来限定一个变量不允许改变,它将一个对象转换成一个常量.</p>
<h2 id="1-c-c-中const的区别"><a href="#1-c-c-中const的区别" class="headerlink" title="1 c/c++ 中const的区别"></a>1 c/c++ 中const的区别</h2><ul>
<li>c中的const</li>
</ul>
<p><strong>对于const 修饰的局部变量来说</strong></p>
<blockquote>
<p>const修饰的局部变量就是, 一个不能改变的 <strong>普通变量</strong>, 一个只读的变量</p>
</blockquote>
<a id="more"></a>
<p>示例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> a;<span class="comment">// 报错; 必须初始化, 因为 const 不能被修改, 不初始化赋值的话, 将永远不能被赋值.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;</div><div class="line">    a = <span class="number">10</span>; <span class="comment">// 报错, 尝试修改只读变量</span></div><div class="line"></div><div class="line">    <span class="comment">// a的地址就在栈区, 而不是常量区,因为它只是一个变量,但是标记为只读.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>局部变量通过指针修改,是可以的.</p>
<p>但是对于全局变量而言:</p>
<blockquote>
<ul>
<li><p>const 修饰全部变量时, 默认是外部链接的.<br>多文件使用同一个变量名, 会造成变量重定义.</p>
</li>
<li><p>全局变量不能通过指针修改, 存储区域放在只读常量区, 修改会直接引发段错误.</p>
</li>
</ul>
</blockquote>
<ul>
<li>c++中的const</li>
</ul>
<p>一个概念需要引出:</p>
<blockquote>
<p>常量折叠</p>
</blockquote>
<p>其实就是类似宏替换一样,在进行完数据类型检查之后, 为了代码的高效性, 把常量替换成为它所代表的具体的值 直接 折叠到代码当中.</p>
<p>在c++中, 一个const不必创建内存空间. 在c++中, 是否为const常量分配内存空间依赖于如何使用.<br>一般来说, 一个const仅仅用来把一个名字用一个值代替, 那么该存储空间就不必创建. </p>
<blockquote>
<p>这时,编译器就会把 用到const的地方, 替换为它对应值, 也就是常量折叠的概念.</p>
</blockquote>
<p><strong>但是,对一个const变量取地址之后, 或者把它定义为exten, 则会为该const 变量创建内存空间.</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;<span class="comment">// c++中</span></div><div class="line">    <span class="comment">// a = 10; // 报错, 尝试修改只读变量</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;a;</div><div class="line">    *p = <span class="number">10</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);<span class="comment">// 打印结果依然是100</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)&amp;a); <span class="comment">// 10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原因解析</p>
<blockquote>
<p>其实, 都是编译器捣的鬼而已:<br>1 变量a 在编译时, 就被常量折叠, 把所有用到a的地方都被替换成 常数 100, 除了一个地方, 也就是对a取地址的地方<br>2 变量a 的地址就在栈区, 这点跟c是一样的<br>3 指针修改的过程也都没有问题, 查看a的内存地址中的值, 发现a的值也确实被修改了.<br>4 取地址之后, a就有了真实的地址空间, 但是直接打印a时, 打印其实是一个默认的修改之前的常量.</p>
</blockquote>
<p>c++的编译器,真的让人很无语, 搞这种小把戏, 但是其实也可以看得出来, c++真的是不想让你修改一个const的值, 因为你使用const的意义就在于此啊.<br>而且, 更重要的是, 其实也是c/c++语言的中一个重要的思想体现:</p>
<blockquote>
<p>程序员被允许做你能做的一切,你想修改const, 可以, 去做吧, 前提是,你清楚的知道自己在干什么.<br>所以编译器这里所做的是什么?<br>就是为了防止意外的修改而已, 不小心使用指针进行错误修改, 那么编译器还能帮你最后一次.</p>
</blockquote>
<p>全局变量:</p>
<p>跟c语言中一样,也不能修改,指针也不行.</p>
<p>c++中的全局变量, <strong>默认也是不分配内存, 当声明extern 或者 取地址之后, 才会分配内存</strong>, 并且内存存放的地址在<code>只读常量区</code>, 修改直接段错误.</p>
<p>区别是:</p>
<blockquote>
<p>c++中默认的链接属性是内部链接, 只在本文件内有效.</p>
</blockquote>
<h2 id="2-基础类型赋值与自定义类型"><a href="#2-基础类型赋值与自定义类型" class="headerlink" title="2 基础类型赋值与自定义类型"></a>2 基础类型赋值与自定义类型</h2><p>1 对于基础数据类型, 如果用一个变量初始化 const 变量, 如果 <code>const int a = b</code>, 那么也是会给a分配内存</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> constA = b;</div><div class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)&amp;constA;</div><div class="line">*p = <span class="number">300</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"constA:"</span> &lt;&lt; constA &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 300</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p:"</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 300</span></div></pre></td></tr></table></figure>
<p>此时编译器不会再把 constA 的值替换了(<strong>常量折叠</strong>), 因为初始化的时候, constA 被一个变量赋值, 而不是一个常数.</p>
<p>这时, 就跟c语言一样了.</p>
<p>2 对于自定义数据类型, 比如类对象, 那么也会分配内存.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Person person; <span class="comment">//未初始化age</span></div><div class="line"><span class="comment">//person.age = 50; //不可修改</span></div><div class="line">Person* pPerson = (Person*)&amp;person;</div><div class="line"><span class="comment">//指针间接修改</span></div><div class="line">pPerson-&gt;age = <span class="number">100</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pPerson-&gt;age:"</span> &lt;&lt; pPerson-&gt;age &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 100</span></div><div class="line">pPerson-&gt;age = <span class="number">200</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"pPerson-&gt;age:"</span> &lt;&lt; pPerson-&gt;age &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 200</span></div></pre></td></tr></table></figure>
<p>为person分配了内存，所以可以通过指针的间接赋值修改person对象。</p>
<blockquote>
<p><strong>编译器其实能做的也有限, 只是常数的时候, 才可以进行替换展开, 其他情况, 它也无能为力, 指针就是这么强大呀!</strong></p>
</blockquote>
<h2 id="3-尽量使用const来替换-define"><a href="#3-尽量使用const来替换-define" class="headerlink" title="3 尽量使用const来替换 #define"></a>3 尽量使用const来替换 #define</h2><p>区别:</p>
<blockquote>
<p>1．const有类型，可进行编译器类型安全检查。#define无类型，不可进行类型检查.<br>2．const有作用域，而#define不重视作用域，默认定义处到文件结尾.如果定义在指定作用域下有效的常量，那么#define就不能用。</p>
</blockquote>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>其实, const在c++的应用远远不止于此, 类中还有大量的使用, 类对象, 类方法中, 参数中, 返回值中, 都能见到 const 的身影.</p>
<p>但是, 我们在使用时候坚持一点就好, <strong>如果你用了const ,那么, 你就不要尝试修改, 或者说, 你不想别人修改, 那你就使用const吧</strong>. 没人会主动想改, 除非你真的想改, c++尝试在编译器层面做了很多, 但是面对指针, 很多时候, 你也无能为力.</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人生中最困难者，莫过于选择。&lt;br&gt;—— &lt;strong&gt;莫尔&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;0-const概述&quot;&gt;&lt;a href=&quot;#0-const概述&quot; class=&quot;headerlink&quot; title=&quot;0 const概述&quot;&gt;&lt;/a&gt;0 const概述&lt;/h2&gt;&lt;p&gt;const字面的意思为常数的,不变的.它是c/c++中的一个关键字,是一个限定符,用来限定一个变量不允许改变,它将一个对象转换成一个常量.&lt;/p&gt;
&lt;h2 id=&quot;1-c-c-中const的区别&quot;&gt;&lt;a href=&quot;#1-c-c-中const的区别&quot; class=&quot;headerlink&quot; title=&quot;1 c/c++ 中const的区别&quot;&gt;&lt;/a&gt;1 c/c++ 中const的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;c中的const&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于const 修饰的局部变量来说&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const修饰的局部变量就是, 一个不能改变的 &lt;strong&gt;普通变量&lt;/strong&gt;, 一个只读的变量&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>冷门小技巧 之 C/C++ 持续更新ing</title>
    <link href="http://yoursite.com/2017/03/21/%E5%86%B7%E9%97%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-%E4%B9%8B-C-C-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ing/"/>
    <id>http://yoursite.com/2017/03/21/冷门小技巧-之-C-C-持续更新ing/</id>
    <published>2017-03-21T06:51:06.000Z</published>
    <updated>2017-03-21T14:41:33.849Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>把时间用在思考上是最能节省时间的事情.<br>—— <strong>卡曾斯</strong><br></blockquote>


<p>本文主要介绍的一些冷门的, 诡异的, C/C++方面的小技巧, 持续更新ing.</p>
<a id="more"></a>
<h2 id="1-字符串不需要换行直接使用"><a href="#1-字符串不需要换行直接使用" class="headerlink" title="1. 字符串不需要换行直接使用"></a>1. 字符串不需要换行直接使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"hello"</span></div><div class="line">	<span class="string">"world"</span></div><div class="line">	<span class="string">"haha"</span>;</div><div class="line"></div><div class="line"><span class="comment">//效果等价于:</span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"helloworldhaha"</span>;</div></pre></td></tr></table></figure>
<p>这有什么鬼用呢?</p>
<p>在http组包头的时候,可以直接拼就好了,而已便于观看</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = <span class="string">"GET /xxx.html HTTP/1.1\r\n"</span></div><div class="line">	<span class="string">"Host: 127.0.0.1:80\r\n"</span></div><div class="line">	<span class="string">"Connection: keep-alive\r\n"</span></div><div class="line">	<span class="string">"\r\n"</span>;</div></pre></td></tr></table></figure>
<p>是不是很好用?</p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;把时间用在思考上是最能节省时间的事情.&lt;br&gt;—— &lt;strong&gt;卡曾斯&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;p&gt;本文主要介绍的一些冷门的, 诡异的, C/C++方面的小技巧, 持续更新ing.&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的Blog</title>
    <link href="http://yoursite.com/2017/03/21/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Blog/"/>
    <id>http://yoursite.com/2017/03/21/搭建自己的Blog/</id>
    <published>2017-03-20T18:03:14.000Z</published>
    <updated>2017-03-21T14:10:32.081Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>思想以自己的言语喂养它自己，而成长起来。<br>—— <strong>泰戈尔</strong><br></blockquote>



<h2 id="Hexo搭建记"><a href="#Hexo搭建记" class="headerlink" title="Hexo搭建记"></a>Hexo搭建记</h2><p>现在想想, 搭建个人的Blog真心是一件麻烦的事情, 每遇到一个问题, 那种痛苦的感觉, 解决了之后, 那种爽快的感觉, 其实跟编程给人的感觉差不多少.</p>
<p>在很久之前就一直想做一个自己的blog, 也买了域名, 折腾了一会, 但是就是感觉没有一篇文章是给小白, 纯小白看的, 就好像说, <strong>把大象关进冰箱一样, 打开冰箱门, 你肯定知道, 然后大神们就告诉你说, 然后把大象放进冰箱里就行, 最后把冰箱门关上, done! 成功了有没有</strong>!<br>….</p>
<a id="more"></a>
<p>有些夸张, 但是有时候感受是这样的</p>
<p>前几天,偶然的一次访问到了一位<a href="http://wuchong.me/" target="_blank" rel="external">网友的博客</a>, 博客的页面简单, 美观, 实用, 又一次燃起了我对个人主页的向往, 于是, 折腾开始了..</p>
<p>其实, 网上也参考不少好的资料, 在本文末尾, 也一一列出, 并在此感谢各位大神的著作, 让我度过了坎坷但又很值得的几天, 人生就是要浪费在这种美好的事物上呀!</p>
<p>下面, 我来给出我的详细搭建过程中, 遇到关于域名解析的一些问题, 进行一下简单的说明. 像简单的一些页面配置, 文章最后, 我列出的参考文献之中, 均有详细无比的配置方法, 就不在此赘述.</p>
<h3 id="1-1-购买域名"><a href="#1-1-购买域名" class="headerlink" title="1.1 购买域名"></a>1.1 购买域名</h3><blockquote>
<p>我是直接去<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">狗爹</a>上, 搜索到自己想要的<a href="http://www.zhiyupan.me" target="_blank" rel="external">域名</a>, 然后购买就可以, 简单, 而且可以直接支付宝付款.</p>
</blockquote>
<h3 id="1-2-域名解析"><a href="#1-2-域名解析" class="headerlink" title="1.2 域名解析"></a>1.2 域名解析</h3><p>啥意思呢? 就是说, 你虽然买了一个域名, 但是还是要解析才能使用, 比如说, 我自己买了一个域名是<br>xxxx.me, 但是实际上你托管代码的服务器, 只让你通过www.xxxx.me来访问, 不允许你直接访问自己的域名, 怎么破?<br>这个时候就需要一个dns解析服务, 来帮助, 而且还有一个CNAME的概念.</p>
<blockquote>
<p>我使用的DNS解析服务是来自<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>, 注册简单, 使用也比较方便, 在域名解析标签下, 添加自己的购买的域名, 然后再根据<a href="https://support.dnspod.cn/Kb/showarticle/tsid/42" target="_blank" rel="external">设置向导, 修改狗爹上的一些配置</a>, 其实就是访问自己的域名时, 狗爹的服务器优先感知到, 然后再反向通知到你刚刚注册的DNSPod的NameServer上去, 进而进行解析, 其实也就是再一步的跳转到你设置的那个真实的服务器的ip地址上去, 获取到你页面文件, 浏览器才能进行展示.</p>
</blockquote>
<p>这个再跳转的过程就是 要配置的 CNAME<br>我是使用的<a href="https://github.com" target="_blank" rel="external">GitHub</a>提供的代码托管服务.<br>DNSPod中的CNAME选项按照要求GitHub配置上就好, ‘<br>过程就是, </p>
<blockquote>
<p>访问 www.xxx.me , 狗爹服务器响应, 然后跳转到DnsPod服务器, 然后根据CNAME再跳一次, 跳到GitHub的服务器上面, 最后才算是完成了一次访问.</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zhiyu/f9ald7n944q3h69ti5w50al5/E9DGQNMC5YCIO@X8K%7B%5B7FX8.png" alt="E9DGQNMC5YCIO@X8K7FX8.png-5.2kB"></p>
<h2 id="1-3-直接访问域名"><a href="#1-3-直接访问域名" class="headerlink" title="1.3 直接访问域名"></a>1.3 直接访问域名</h2><p>其实我还有一个问题, 一直没有解决, 就是我CNAME虽然按照DNSPod的方式配置, GitHub的二级域名也填好了, 是直接访问的方式, 但是我直接访问时, 却一直会跳转到狗爹的页面上去, 而不会跳转的GitHub上的部署服务器上, 但是如果使用www访问,就可以直接访问成功.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不知道是不是我购买的域名不支持?</div><div class="line">还是DNSPod的配置还是有问题?</div><div class="line">还是GitHub上不支持?</div></pre></td></tr></table></figure></p>
<p>唉 , 以后再慢慢来弄吧~ 先好好写点文章先..</p>
<p><img src="http://static.zybuluo.com/zhiyu/0j064hadchlhx1uunx4xxi4x/QQ%E6%88%AA%E5%9B%BE20170321025214.png" alt="QQ截图20170321025214.png-18.1kB"></p>
<p>———-华丽的分割线————-</p>
<p>原来是 想访问到 xxx.me 的域名, CNAME要配置成 @ 才行, 需要将 Dnspod 上的 默认提供的 @ + ip 的访问方式删除掉(否则会提示冲突), 好吧. 现在终于可以去掉恶心的 www了 哈哈</p>
<p><img src="http://static.zybuluo.com/zhiyu/4qj9catr9vu5xzvlq8forbl6/1.png" alt="1.png-5.6kB"></p>
<p>还有每次部署上去的时候, 发现每次都要修改一下github仓库上的setting, 再配置上二级域名才可以, 我也觉得不应该有这么傻的操作, 但是今天终于搞清楚了:</p>
<blockquote>
<p><strong>在source目录下</strong>, 直接加上一个CNAME文件( 之前一直添加在根目录下的 .deploy 下的 .git 目录下, 唉), 内容就是你要重定向的地址, 也就是你的域名. </p>
</blockquote>
<ul>
<li>参考文献<ul>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">Hexo你的博客</a></li>
<li><a href="http://wuchong.me/blog/2013/12/13/hello-%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">Hexo独立博客</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexTGitHub</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next使用文档</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;思想以自己的言语喂养它自己，而成长起来。&lt;br&gt;—— &lt;strong&gt;泰戈尔&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;



&lt;h2 id=&quot;Hexo搭建记&quot;&gt;&lt;a href=&quot;#Hexo搭建记&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建记&quot;&gt;&lt;/a&gt;Hexo搭建记&lt;/h2&gt;&lt;p&gt;现在想想, 搭建个人的Blog真心是一件麻烦的事情, 每遇到一个问题, 那种痛苦的感觉, 解决了之后, 那种爽快的感觉, 其实跟编程给人的感觉差不多少.&lt;/p&gt;
&lt;p&gt;在很久之前就一直想做一个自己的blog, 也买了域名, 折腾了一会, 但是就是感觉没有一篇文章是给小白, 纯小白看的, 就好像说, &lt;strong&gt;把大象关进冰箱一样, 打开冰箱门, 你肯定知道, 然后大神们就告诉你说, 然后把大象放进冰箱里就行, 最后把冰箱门关上, done! 成功了有没有&lt;/strong&gt;!&lt;br&gt;….&lt;/p&gt;
    
    </summary>
    
      <category term="写作" scheme="http://yoursite.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux多线程传参问题</title>
    <link href="http://yoursite.com/2017/03/21/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/21/Linux多线程传参问题/</id>
    <published>2017-03-20T16:49:40.000Z</published>
    <updated>2017-03-24T08:02:55.292Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<p><blockquote class="blockquote-center"><br>寿命的缩短与思想的虚耗成正比。<br>—— <strong>达尔文</strong><br></blockquote><br><a id="more"></a></p>
<p>在Linux多线程创建函数<code>pthread_create</code>中, 它的最后一个参数, 允许线程回调函数中传入一个参数, 一直以来, 我们被警告尽量不要在这个参数中传递指针, 尽量进行值传递.. 但是为什么呢?</p>
<p>下面, 我们来看这样一段代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> ThreadInfo_&#123;</div><div class="line">    <span class="keyword">void</span> *handle;</div><div class="line">    <span class="keyword">int</span> iLoop;</div><div class="line">    <span class="keyword">int</span> iArrayIndex;</div><div class="line">&#125; ThreadInfo;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">start_routine</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</div><div class="line"></div><div class="line">    ThreadInfo *threadInfo = (ThreadInfo *)arg;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; threadInfo-&gt;iLoop ; ++ i )</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第%d线程, 第%d圈"</span>, threadInfo-&gt;iArrayIndex, i+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">pthread_t</span> pidArray[<span class="number">1024</span>];</div><div class="line">    </div><div class="line">    ThreadInfo threadInfo;</div><div class="line">    <span class="built_in">memset</span>( &amp;threadInfo , <span class="number">0</span> , <span class="keyword">sizeof</span>(ThreadInfo) );</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> *handle = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> iLoop = <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++ i )&#123;</div><div class="line">    </div><div class="line">        threadInfo.handle = handle;</div><div class="line">        threadInfo.iLoop = iLoop;</div><div class="line">        threadInfo.iArrayIndex = i+<span class="number">1</span>;</div><div class="line">        </div><div class="line">        pthread_create( &amp;pidArray[i] , <span class="literal">NULL</span> , start_routine , (<span class="keyword">void</span>*)&amp;threadInfo );</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; ++ i )</div><div class="line">        pthread_join( pidArray[i] , <span class="literal">NULL</span> );</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单的一段逻辑, 我们有这样一个需求:</p>
<blockquote>
<p>创建10个线程,每个线程打印: 当前线程在处理第几圈, 打印顺序当然是不确定的</p>
</blockquote>
<p>预期:</p>
<blockquote>
<p>“第1线程, 第1圈”<br>“第2线程, 第1圈”<br>“第3线程, 第2圈”<br>“第4线程, 第1圈”<br>“第5线程, 第2圈”<br>…</p>
</blockquote>
<p>实际上:</p>
<blockquote>
<p>“第10线程, 第1圈”<br>“第10线程, 第1圈”<br>“第10线程, 第2圈”<br>“第10线程, 第1圈”<br>“第10线程, 第1圈”<br>“第10线程, 第2圈”<br>“第10线程, 第1圈”<br>“第10线程, 第2圈”<br>“第10线程, 第2圈”<br>…</p>
</blockquote>
<p>打印的结果, 大大的出乎我们的意料, 没有按照我们之前的预想, 都是打印出第10个线程在做事.为什么会这样呢?</p>
<p>原因其实也不难分析:</p>
<p>我们仔细再回顾一下代码, 不难发现一个问题, 那就是threadInfo这个东西, 在主线程中, 其实只被创建了一次, 而每次for循环中, 进行修改它的内容而已.</p>
<p>貌似问题是出在这里, 这还不够.</p>
<p>我们还知道这样几个事实, 那就是这段代码中:</p>
<blockquote>
<ol>
<li>主线程函数栈和子线程函数栈其实都是同一个进程的栈空间内的;</li>
<li>主线程在创建10个子线程的整个过程中, 一直是不会被打断的;</li>
<li>10个子线程看似是一个个创建出来的, 但是其实相当于10个线程并发着创建出来, 然后一起去抢占cpu的资源的;</li>
<li>主线程和子线程抢占cpu的能力上, 大概是 主线程会优先90%抢占, 理论依据不足, 这里主要是经验值.</li>
</ol>
</blockquote>
<p>好, 这几个事实的基础上, 我们知道了10个子线程一起创建好了, 然后去抢占资源, 抢到了然后去执行回调函数, 处理相关的逻辑.</p>
<p>而且, 主线程也不会等待或阻塞, 依次继续执行, 那么, 控制线程编号的变量, iArrayIndex其实本质上, 是在主线程自己的栈帧中的, 开辟关于threadInfo的一段空间, 空间里有一个 iArrayIndex 变量的内容.</p>
<p>再看子线程空间, 线程空间中, 由于是通过指针的方式获取到 threadInfo的值, 那么,线程不断的抢占, 然后通过指针访问主线程栈帧中的一个变量中的一个属性内容, 而且, 这个内容在主线程中不断的自增变化.</p>
<p>而且, 主线程有90%的几率优先抢占到资源, 所以整个for循环执行完, iArraryIndex 已经自增为10, 这时, 子线程们才陆陆续续抢到cpu, 然后去回调, 而且, 还是通过指针, 访问主线程的栈帧中的iArrayIndex变量, 所以打印结果当然全是<code>线程10</code>咯~~</p>
<h2 id="如何解决呢"><a href="#如何解决呢" class="headerlink" title="如何解决呢?"></a>如何解决呢?</h2><h3 id="1-方法很简单-尽量不要指针传递"><a href="#1-方法很简单-尽量不要指针传递" class="headerlink" title="1 方法很简单, 尽量不要指针传递"></a>1 方法很简单, 尽量不要指针传递</h3><p>因为创建过程中, 被指向的对象很可能已经在主线程中发生变化, 比如本题中.<br>不变化的话, 就可以传了吗? 接着看.</p>
<h3 id="2-一定要使用怎么办"><a href="#2-一定要使用怎么办" class="headerlink" title="2. 一定要使用怎么办"></a>2. 一定要使用怎么办</h3><blockquote>
<p>答案就是: 内存冗余法.</p>
</blockquote>
<p>啥意思呢?<br>说白了, 就是避免麻烦, 避免出现本文中的出现的类似的问题, 我给每个子线程生成一个变量就好了, 每人一份, 不用抢. 当然, 这一份变量要开辟在堆空间上.</p>
<p>其实也就是类似, 参考了 多进程中的做法, 就是fork之后, 原来父进程有的, 我几乎全copy一份( 有些PCB中的内容不会拷贝到子进程中去 ), 互不干扰.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多线程中的使用中, 这个传参的过程还是有点小坑的, 很多问题, 同一个线程中, 似乎很简单, 但是多线程, 而且感觉看不到摸不到, 调用时机也不明确, 会让我们觉得有点困扰. 但是仔细分析, 画图辅助, 其实问题解决起来也不难.</p>
<hr>
<h3 id="示意图如下"><a href="#示意图如下" class="headerlink" title="示意图如下:"></a>示意图如下:</h3><p><img src="http://static.zybuluo.com/zhiyu/ha2tfj9qio5kb19j2le6c5k2/3.png" alt="3.png-67.9kB"></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;寿命的缩短与思想的虚耗成正比。&lt;br&gt;—— &lt;strong&gt;达尔文&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="小坑套老坑" scheme="http://yoursite.com/tags/%E5%B0%8F%E5%9D%91%E5%A5%97%E8%80%81%E5%9D%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>浅谈算法 之 并查集</title>
    <link href="http://yoursite.com/2017/03/20/%E6%B5%85%E8%B0%88%E7%AE%97%E6%B3%95-%E4%B9%8B-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2017/03/20/浅谈算法-之-并查集/</id>
    <published>2017-03-20T13:35:20.000Z</published>
    <updated>2017-03-20T16:41:48.742Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<p><blockquote class="blockquote-center"><br>我不能说我不珍重这些荣誉，并且我承认它很有价值，不过我却从来不曾为追求这些荣誉而工作。<br>—— <strong>法拉第</strong><br></blockquote><br><a id="more"></a></p>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><blockquote>
<p>并查集本身是一种特殊的树形结构,看似有点奇怪,因为它某些实现方式可能并没有使用到关于树的任何节点之类的东西,但是原理上,就是这样.</p>
</blockquote>
<h3 id="2-基础"><a href="#2-基础" class="headerlink" title="2 基础"></a>2 基础</h3><p>并查集存在的最大意义就是为了,<code>高效</code>地回答一个问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isConnect ( int p , int q )</div></pre></td></tr></table></figure></p>
<p>也就是判断 <code>两个节点是否连接</code> 问题.<br>正是这一点,也是它作为图论基础的一个重要原因,图论关于路径问题很多时候,都会使用并查集这种概念来解决其中一些逻辑.其实很多基础数据结构都是为了辅助高级算法中的某一环节的问题而存在的.</p>
<h4 id="2-1-连接问题-与-路径问题"><a href="#2-1-连接问题-与-路径问题" class="headerlink" title="2.1 连接问题 与 路径问题"></a>2.1 连接问题 与 路径问题</h4><blockquote>
<p>连接问题相比路径问题,回答的问题要少很多,因为它只关心两个节点是否相连,这也正是并查集高效的根本原因.</p>
</blockquote>
<p><strong>一个算法可以回答问题越多,其实不见得这个算法越高效,反而,可能这个算法是越低效的,这一点特别重要.<br>或者说, 一个算法如果回答的问题越少, 其实也是提升算法效率的一个重要思路.</strong></p>
<p>比如:</p>
<blockquote>
<p>二分查找法 和 顺序查找法 相比<br>快速排序 partition<br>堆</p>
</blockquote>
<p>再看什么是连接的问题?</p>
<blockquote>
<p>网络中节点的连接状态<br>用户之间形成的网络<br>道路交通<br>航班调度</p>
</blockquote>
<h4 id="2-2-并查集的两个基本操作-是的-就两个"><a href="#2-2-并查集的两个基本操作-是的-就两个" class="headerlink" title="2.2 并查集的两个基本操作,是的,就两个:"></a>2.2 并查集的两个基本操作,是的,就两个:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">find( int p )</div><div class="line">union( int p , int q)</div><div class="line"></div><div class="line">// 注意,这里的union不是联合体的意思,是合并操作的意思</div></pre></td></tr></table></figure>
<h3 id="2-3-另外"><a href="#2-3-另外" class="headerlink" title="2.3 另外"></a>2.3 另外</h3><blockquote>
<p>并查集也可以实现数学中的集合类.</p>
</blockquote>
<h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h2><p>这里介绍的并查集底层实现方式都是使用数组来实现的.</p>
<h3 id="3-1-QuickFind"><a href="#3-1-QuickFind" class="headerlink" title="3.1 QuickFind"></a>3.1 QuickFind</h3><p>QuickFind见名知义,就是find操作的实现比较快.<br>问题: 效率太低.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> UnionFind&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> * id;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// O(1)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">( <span class="keyword">int</span> p )</span></span>&#123;</div><div class="line">    assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line">    <span class="keyword">return</span> id[p];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isConnected</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q)</span></span>&#123;</div><div class="line">    assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line">    assert( q &gt;= <span class="number">0</span> &amp;&amp; q &lt; count );</div><div class="line">    <span class="keyword">return</span> id[p] == id[q];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// O(n)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionElements</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q )</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> pID = find(p);</div><div class="line">    <span class="keyword">int</span> qID = find(q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( qID == pID)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; ++ i )</div><div class="line">        <span class="keyword">if</span>( qID == id[i] )</div><div class="line">            id[i] = pID;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实从代码我们也可以看出,其实find操作,在图中的,其实就是查找当前节点所在的连通分量的值.<br>union的操作其实就是合并两个连通分量. 因为对于两个连通分量来说, 只要各自有一个点相连接了, 那么两个连通分量都连在一起了.</p>
<h3 id="3-2-QuickUnion"><a href="#3-2-QuickUnion" class="headerlink" title="3.2 QuickUnion"></a>3.2 QuickUnion</h3><p>QuickUnion见名知义,就是union操作的实现比较快.<br>思路上,发生了一点变化:</p>
<blockquote>
<p>每个节点缓存了自己的父节点的值<br>其实这个思路,就是类似于树的父节点的概念,但是实现了并没有引入指针的概念</p>
</blockquote>
<p>问题: 一定程度上,缓解了QuickFind的效率低下的问题,但是还不够</p>
<p>实现如下:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> UnionFind&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> * parent;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">( <span class="keyword">int</span> p )</span></span>&#123;</div><div class="line">    assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( p != parent[p] )</div><div class="line">        p = parent[p];</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isConnected</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> find(p) == find(q);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionElements</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q )</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> pRoot = find(p);</div><div class="line">    <span class="keyword">int</span> qRoot = find(q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( qRoot == pRoot)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// q节点的根节点, 指向p节点的根节点    </span></div><div class="line">    parent[pRoot] = qRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然实现上并没有引入根节点,或者使用指针概念( 因为并查集中的节点只有父节点概念, 所以用数组来保存节点值即可 ), 但是本质上, 在开头也提到了, 并查集虽然是一棵特殊的树, 但是还是具有树的性质: </p>
<blockquote>
<p>当树高度很深时, 树的遍历效率会大大降低. 类似于普通平衡二叉树也有类似的问题,所以才引入了2-3树和红黑树的概念.</p>
</blockquote>
<p>在并查集中,也存在这样类似的问题, 所以便有了下面的两种优化</p>
<h3 id="3-2-1-基于size的优化"><a href="#3-2-1-基于size的优化" class="headerlink" title="3.2.1 基于size的优化"></a>3.2.1 基于size的优化</h3><p>思路也很简单,就是在union操作中,不是随意的将两个连通分量直接合并,而是根据元素的个数,优先将元素少的集合, 合并到元素多的连通分量中.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNIONFIND_UNIONFIND3_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIONFIND_UNIONFIND3_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> UF3&#123;</div><div class="line">    <span class="keyword">class</span> UnionFind&#123;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> * parent;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        <span class="keyword">int</span> * sz;<span class="comment">// sz[i] 表示i为根节点的集合中元素个数</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        UnionFind( <span class="keyword">int</span> count )&#123;</div><div class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">            sz = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">            <span class="keyword">this</span>-&gt;count = count;</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; ++i )&#123;</div><div class="line">                parent[i] = i;</div><div class="line">                sz[i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ~UnionFind()&#123;</div><div class="line">            <span class="keyword">delete</span>[] parent;</div><div class="line">            <span class="keyword">delete</span>[] sz;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">( <span class="keyword">int</span> p )</span></span>&#123;</div><div class="line">            assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line"></div><div class="line">            <span class="keyword">while</span>( p != parent[p] )</div><div class="line">                p = parent[p];</div><div class="line"></div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isConnected</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q )</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> find(p) == find(q);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">unionElements</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q )</span></span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> pRoot = find(p);</div><div class="line">            <span class="keyword">int</span> qRoot = find(q);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( pRoot == qRoot )</div><div class="line">                <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 节点少的并到节点多的集合中</span></div><div class="line">            <span class="keyword">if</span>( sz[pRoot] &gt; sz[qRoot] ) &#123;</div><div class="line">                parent[qRoot] = pRoot;</div><div class="line">                sz[pRoot] += sz[qRoot];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                parent[pRoot] = qRoot;</div><div class="line">                sz[pRoot] += sz[qRoot];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNIONFIND_UNIONFIND3_H</span></span></div></pre></td></tr></table></figure>
<h3 id="3-2-1-基于rank的优化"><a href="#3-2-1-基于rank的优化" class="headerlink" title="3.2.1 基于rank的优化"></a>3.2.1 基于rank的优化</h3><p>关于size的优化其实可以解决大部分的场景, 但是其实还是不够,还是以上那个情况,就是元素个数,其实并不能完全解决并查集的树高度过深的问题,所以再次修改代码如下:<br>思路很简单, 一句话, 就是把树的高度低的集合合并到高的树的集合中.</p>
<p>100万量级可以做到1s内处理 – union和 判断连接 两个操作.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INC_05_OPTIMIZE_BY_RANK_UNIONFIND3_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INC_05_OPTIMIZE_BY_RANK_UNIONFIND3_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> UF3&#123;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> UnionFind&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span>* parent;</div><div class="line">        <span class="keyword">int</span>* rank; <span class="comment">// rank[i]表示以i为根的集合所表示的树的层数</span></div><div class="line">        <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        UnionFind(<span class="keyword">int</span> count)&#123;</div><div class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">            rank = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">            <span class="keyword">this</span>-&gt;count = count;</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; i ++ )&#123;</div><div class="line">                parent[i] = i;</div><div class="line">                rank[i] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ~UnionFind()&#123;</div><div class="line">            <span class="keyword">delete</span>[] parent;</div><div class="line">            <span class="keyword">delete</span>[] rank;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">            assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line">            <span class="keyword">while</span>( p != parent[p] )</div><div class="line">                p = parent[p];</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isConnected</span><span class="params">( <span class="keyword">int</span> p , <span class="keyword">int</span> q )</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> find(p) == find(q);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">unionElements</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> pRoot = find(p);</div><div class="line">            <span class="keyword">int</span> qRoot = find(q);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( pRoot == qRoot )</div><div class="line">                <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( rank[pRoot] &lt; rank[qRoot] )&#123;<span class="comment">// 树的高度不变, 仔细琢磨一下</span></div><div class="line">                parent[pRoot] = qRoot;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( rank[qRoot] &lt; rank[pRoot])&#123;<span class="comment">// 同理, 树的高度也不变</span></div><div class="line">                parent[qRoot] = pRoot;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123; </div><div class="line">                <span class="comment">// rank[pRoot] == rank[qRoot]</span></div><div class="line">                <span class="comment">// else的逻辑是整段代码的核心</span></div><div class="line">                <span class="comment">// 高度相等时候的合并, 最后的高度 += 1 即可</span></div><div class="line">                parent[pRoot] = qRoot;</div><div class="line">                rank[qRoot] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//INC_05_OPTIMIZE_BY_RANK_UNIONFIND3_H</span></span></div></pre></td></tr></table></figure>
<h3 id="3-2-3-路径压缩"><a href="#3-2-3-路径压缩" class="headerlink" title="3.2.3 路径压缩"></a>3.2.3 路径压缩</h3><p>其实,也是基于QuickUnion的一个优化,但是优化的重点,放在find上.</p>
<p>在find的过程中,再次通过技术手段,降低树的高度.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">( <span class="keyword">int</span> p )</span></span>&#123;</div><div class="line">    assert( p &gt;= <span class="number">0</span> &amp;&amp; p &lt; count );</div><div class="line">    <span class="keyword">while</span>( p != parent[p] )&#123;</div><div class="line">        <span class="comment">// p的父节点指向当前父节点的父节点, 这就是路径压缩的核心, 没了</span></div><div class="line">        <span class="comment">// 需要注意的就是,即使当前距离根节点只有一个位置了,下面代码依然成立</span></div><div class="line">        <span class="comment">// 因为根节点的父节点仍然等于自己</span></div><div class="line">        parent[p] = parent[parent[p]];</div><div class="line">        p = parent[p];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续优化:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int find( int p )&#123;</div><div class="line">    assert( p &gt;= 0 &amp;&amp; p &lt; count );</div><div class="line">    </div><div class="line">    // 这段代码的作用, 是把所有除根节点外的节点,都直接优化成是根节点的第一子节点</div><div class="line">    // 也就是说,除了根节点外, 所有节点都在一层, 而树的高度就是两层.</div><div class="line">    // 这样的做法,查找效率就是最高的.</div><div class="line">    if( p != parent[p] )</div><div class="line">        parent[p] = find( parent[p] );</div><div class="line">    return p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是, 这只是理论上的分析,实际上,第一个版本的路径压缩优化,在时间效率上其实是高于递归版本的路径压缩优化方法,虽然递归版本中,从逻辑上,树高度上的优化,其实已经做到了极致, 就差把树变成了一个数组, 看似是应该更快的.. 但是, 这其中的消耗其实主要来自递归的开销.</p>
<p>所以,有时候从逻辑上分析之后,我们还应该手动的检验一下最后的结果, 因为理论有时候往往不一定可靠.</p>
<h2 id="4-时间复杂度"><a href="#4-时间复杂度" class="headerlink" title="4 时间复杂度"></a>4 时间复杂度</h2><p>最终优化后的并查集的操作, 时间复杂度近乎是 O(1) 的, 准确的说不是O(1), 因为其实在操作的过程中, 还是会有一定的开销, 这个消耗的具体内容, 感兴趣的读者可以自行谷歌一下.</p>
<p>算法, 是不是很有意思呢?</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;我不能说我不珍重这些荣誉，并且我承认它很有价值，不过我却从来不曾为追求这些荣誉而工作。&lt;br&gt;—— &lt;strong&gt;法拉第&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论基础" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic &amp; Static Library</title>
    <link href="http://yoursite.com/2017/03/20/Dynamic-Static-Library/"/>
    <id>http://yoursite.com/2017/03/20/Dynamic-Static-Library/</id>
    <published>2017-03-19T18:42:12.000Z</published>
    <updated>2017-03-21T06:53:51.544Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center"><br>Microsoft isn’t evil, they just make really crappy operating systems.<br>—— <strong>Linus Torvalds</strong><br></blockquote>

<blockquote>
<p>本文是一篇干货,主要展示了Linux和Windows下,静态库和动态库的生成方法.</p>
</blockquote>
<h2 id="0-动态库基础"><a href="#0-动态库基础" class="headerlink" title="0 动态库基础"></a>0 动态库基础</h2><pre><code>1. win下,动态库 -- xxx.dll  / xxx.lib xxx.h 
2. Linux下,动态库 --- xxx.so xxx.h -L -l
</code></pre><a id="more"></a>
<h2 id="1-Linux"><a href="#1-Linux" class="headerlink" title="1 Linux"></a>1 Linux</h2><p>(1) 制作Linux动态库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -c xxx.c -o xxx.o -fPIC</div><div class="line">gcc -shared -o libxxxtest.so xxx.o</div></pre></td></tr></table></figure>
<p>多文件项目中,可以参看我的另一篇关于 makefile 的介绍</p>
<p>(2) 动态库的使用</p>
<p>lib库名.so 文件本身不能执行</p>
<p>项目目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">src/  -- xxx.c</div><div class="line">obj/  -- xxx.o 用于tia</div><div class="line">inc/  -- xxx.h 头文件</div><div class="line">lib/  -- xxx.so / xxx.a 库</div><div class="line">media/ -- 媒体文件</div><div class="line">Makefile</div></pre></td></tr></table></figure></p>
<p>执行命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">链接器:  工作于生成可重定位文件阶段,也就是生成.o文件.任务:数据合并 和 地址回填(数据位置重定位)</div><div class="line"></div><div class="line">动态链接器: 工作于加载器加载可执行文件到内存后,程序运行时查找库函数期间.加载库函数到内存,重定位函数地址(绝对地址),用LD_LIBRARY_PATH.</div></pre></td></tr></table></figure></p>
<p>运行: ./a.out —&gt;报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">原因: 动态链接器找不到加载库函数的目录位置.</div><div class="line">ldd a.out 查看链接依赖情况, 是否存在&apos;not found&apos;字样</div></pre></td></tr></table></figure></p>
<p>解决方案:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(1) 将自定义的动态库 cp 放到 标准 c库所在目录位置: /usr/bin/lib (不推荐)</div><div class="line">(2) 在可执行文件所在目录的位置, 执行命令: export LD_LIBRARY_PATH = 库路径 (临时生效)</div><div class="line">(3) export LD_LIBRAY_PATH = 库路径 写入 ~/.bash_profile 中, source 一下 令其即时生效, 或重启.</div><div class="line"></div><div class="line">ldd 再次查看,成功显示动态库位置 ./a.out 运行即可</div></pre></td></tr></table></figure></p>
<h2 id="2-Windows"><a href="#2-Windows" class="headerlink" title="2 Windows"></a>2 Windows</h2><p>(1) 动态库的制作:</p>
<blockquote>
<ol>
<li>打开vs2013 , 创建<code>win32 生成dll项目</code></li>
<li>动态库的命名不要使用中文名</li>
<li>导入src文件</li>
<li>API函数导出即可<br> 只将用户使用的指定某几个函数从动态库中导出。   — xxx.lib<br> 使用 <code>__declspec(dllexport)</code> 宏，提示编译器。在编译程序的时候，需特殊处理的函数。<br> 注意： <code>.c 文件</code> 和 <code>.h 文件</code> 均需要添加该宏！！ （VS2013 要求）<br> 默认生成的动态库位于上层目录下的 Debug 目录内。</li>
</ol>
</blockquote>
<p>(2) 动态库的制作结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xxx.dll  二进制目标函数集, 可被操作系统加载</div><div class="line">xxx.lib  是对dll的描述文件( 包含多少函数, 哪些被导出 )</div><div class="line">xxx.h </div><div class="line"></div><div class="line">以上三个文件提供给用户使用即可</div></pre></td></tr></table></figure></p>
<p>(3) 动态库的调用和调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">通知VS2013编译器，使用提供的动态库。</div><div class="line"></div><div class="line">将.dll .lib .h三个文件放置在 .c同级目录下。</div><div class="line"></div><div class="line">右键项目“属性”---“配置属性”---“链接器”---“输入”--- “附加依赖项”---下拉菜单“编辑”</div><div class="line"></div><div class="line">---- 输入【描述dll信息lib文件  xxxxx.lib】</div></pre></td></tr></table></figure></p>
<p>常见错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. 若xxx.lib配置错误，则VS编译器无法找到所用函数。 </div><div class="line"></div><div class="line">2. 如若在运行111.exe时，说明操作系统找不到动态库加载路径。 </div><div class="line"></div><div class="line">	(1)配置PATH;(2)将exe和动态库dll置于同一目录下即可。</div><div class="line"></div><div class="line">VS2015：</div><div class="line"></div><div class="line">	xxxx.lib  ---&gt; .c 源码 .h 头文件所在目录位置</div><div class="line"></div><div class="line">	xxxx.dll ---&gt; .exe 可执行文件所在目录位置。</div></pre></td></tr></table></figure></p>
<p>动态库内存释放：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">遵循一个原则：谁分配，谁释放。</div><div class="line">调用动态库函数分配的内存，也一定要调用动态库函数来释放内存。</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Microsoft isn’t evil, they just make really crappy operating systems.&lt;br&gt;—— &lt;strong&gt;Linus Torvalds&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;本文是一篇干货,主要展示了Linux和Windows下,静态库和动态库的生成方法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0-动态库基础&quot;&gt;&lt;a href=&quot;#0-动态库基础&quot; class=&quot;headerlink&quot; title=&quot;0 动态库基础&quot;&gt;&lt;/a&gt;0 动态库基础&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. win下,动态库 -- xxx.dll  / xxx.lib xxx.h 
2. Linux下,动态库 --- xxx.so xxx.h -L -l
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MakeFile</title>
    <link href="http://yoursite.com/2017/03/19/MakeFile/"/>
    <id>http://yoursite.com/2017/03/19/MakeFile/</id>
    <published>2017-03-19T14:43:38.000Z</published>
    <updated>2017-03-20T17:58:54.530Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<p><blockquote class="blockquote-center"><br>人的一切痛苦,本质上都是对自己的无能的愤怒<br>—— <strong>王小波</strong><br></blockquote><br><a id="more"></a></p>
<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h2><p>MakeFile 是一种经典的项目管理工具.其实也是一种脚本,有着自己独特的语法.</p>
<h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h2><p>Makefile元素:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">目标: 依赖</div><div class="line">    (tab 缩进)命令</div></pre></td></tr></table></figure></p>
<p>目标可以有多个依赖,依赖有传递性.<code>make</code>命令去执行Makefile,Makefile的名字固定为<code>Makefile</code>或者<code>makefile</code>,也可以自定义名字,但需要<code>-f</code>指定.</p>
<p>原理:<br>    当依赖文件, 有更新时, 就会生成新的目标文件, 否则make指令不做什么操作.</p>
<p>make默认生成第一个依赖项.如果想生成其他依赖项,直接在make后跟依赖项即可.比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt; make clean</div><div class="line"></div><div class="line"># 当makefile文件夹中, 恰好有一个文件名就叫 clean , 那么此时, make clean 动作会失效.</div><div class="line"># 为什么失效呢?</div><div class="line"># 因为, 如果目录中出现了&quot;clean&quot;文件，则规则失效了：没有依赖文件，文件&quot;clean&quot;始终是最新的，命令永远不会执行</div><div class="line"># 也就是, 编译器把 clean 当作了要生成的一个目标文件, </div><div class="line"># 比如 最简单的 a.out:</div><div class="line">#  					gcc a.c -o $@</div><div class="line"># 如果文件夹中恰好有这样一个 a.out 时, 那么 make 命令就是失效. 同时 clean 的失效也是来自这个道理. </div><div class="line">clean: </div><div class="line">	rm $@ $(objs) -rf</div><div class="line">.PHONY: ALL clean</div><div class="line"># .PHONY: ALL clean 的意思就是强制执行 clean 下的命令, 无视同名文件</div><div class="line"></div><div class="line"># 一般可能还要配合sudo命令来使用</div><div class="line">&gt; make install</div><div class="line">&gt; make uninstall</div><div class="line"></div><div class="line"></div><div class="line"># 主要用来测试</div><div class="line"># echo $(CC)</div><div class="line">&gt; make test</div></pre></td></tr></table></figure></p>
<p>一般的,把第一个目标叫做<code>all</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 首次查看,切记要执行, 输出具体指令, 防止误操作造成不可逆转的行为</div><div class="line"></div><div class="line">&gt; make -n</div></pre></td></tr></table></figure>
<h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h2><p>可以使用变量来简化Makefile,定义变量可以使用</p>
<h3 id="定义一个变量"><a href="#定义一个变量" class="headerlink" title="定义一个变量"></a>定义一个变量</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># := 表示立即赋值,推荐使用</span></div><div class="line"><span class="comment"># 也可以使用 = , 使用时才赋值</span></div><div class="line">libname := libxxx.so </div><div class="line"></div><div class="line">objs := a.o b.o c.o</div><div class="line"></div><div class="line">a.out: $(objs)</div><div class="line">    gcc $^</div></pre></td></tr></table></figure>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>shell</code>中的环境变量可以在makefile脚本中直接使用.比如 <code>PATH</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意空格需要转义才行</div><div class="line">export objs = a.o\ b.o\ c.o</div></pre></td></tr></table></figure>
<p>另外,当本地变量与环境变量重名时,本地变量会覆盖环境变量.</p>
<h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$^ 在规则的命令中, 表示所有依赖项</div><div class="line">$&lt; 在规则的命令中, 表示第一个依赖项. 在模式规则中, 可以将依赖项依次取出.</div><div class="line">$@ 在规则的命令中, 表示目标</div><div class="line"></div><div class="line">$? </div><div class="line">表示所有比目标文件更&quot;新&quot;的依赖文件列表</div><div class="line">用于文件拷贝时,有特殊的用途</div></pre></td></tr></table></figure>
<p>模式规则:<br>    %: %.c<br>        gcc $&lt; -o $@ -Wall -g</p>
<p>静态模式规则:<br>    $(target):%: %.o<br>        gcc $&lt; -o $@ -L$(lib_path) -l$(libname) -I$(inc_path)</p>
<h2 id="4-缺省规则"><a href="#4-缺省规则" class="headerlink" title="4 缺省规则"></a>4 缺省规则</h2><p>缺省规则是make系统提供的默认的规则,比如 x.o<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%.o: %.c</div><div class="line">    $(CC) -c $(CPPFLAGS) $(CFLAGS) $&lt;</div><div class="line"></div><div class="line"><span class="comment"># % 是通配符的意思,表示任意的.o文件</span></div><div class="line"></div><div class="line"><span class="comment"># $(CC) 就是cc,也就是gcc</span></div><div class="line">ls -al /usr/bin/cc 可以看出, cc就是gcc的一个软链接而已</div></pre></td></tr></table></figure></p>
<h2 id="5-函数的使用"><a href="#5-函数的使用" class="headerlink" title="5 函数的使用"></a>5 函数的使用</h2><p>两个函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 获取含有某一特征的文件组成列表</div><div class="line">$(wildcard 参数1)</div><div class="line"></div><div class="line">使用:</div><div class="line">srcs = $(wildcard *.c)   # srcs = a.c b.c s.c</div><div class="line"></div><div class="line">----------------</div><div class="line"></div><div class="line"># 替换</div><div class="line">objs = $(patsubst %.c, %.o , $(srcs)) # 将第三个参数中的,第一个参数的部分,替换为第二个参数</div><div class="line">objs = a.o b.o s.o</div></pre></td></tr></table></figure>
<h2 id="6-一些高级用法"><a href="#6-一些高级用法" class="headerlink" title="6 一些高级用法"></a>6 一些高级用法</h2><p>主要是shell命令的内置用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">srcs := `ls *.c`</div><div class="line">srcs :=  $(shell ls *.c)</div><div class="line"></div><div class="line">objs := $(srcs:.c=.o)</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/caspiansea/article/details/27580571" target="_blank" rel="external">案例1</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CXX = g++  </div><div class="line">CXXFLAGS = -g -I. -Wall  </div><div class="line">SRCS = $(shell find -name &quot;*.cpp&quot;)  </div><div class="line">OBJECTS = $(SRCS:%.cpp=%.o)  </div><div class="line">TARGETS = $(SRCS:%.cpp=%)  </div><div class="line"></div><div class="line">all: $(TARGETS)  </div><div class="line">    @for target in $(TARGETS); \  </div><div class="line">    do                        \  </div><div class="line">    $(CXX) $(CXXFLAGS) -o target</div><div class="line">    target.cpp; \  </div><div class="line">    done</div><div class="line"></div><div class="line">clean:  </div><div class="line">    -rm -f $(TARGETS) $(OBJECTS)</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/njnu_mjn/article/details/12971753" target="_blank" rel="external">案例2</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">files=main.exe a.exe b.exe  </div><div class="line">  </div><div class="line">all:  </div><div class="line">    for name in `echo $(files) | sed s/.exe//g`; \  </div><div class="line">    do \  </div><div class="line">        rm -f &quot;$$name&quot;.o; \  </div><div class="line">    done</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">src = $(wildcard ./src/*.c)</div><div class="line">obj = $(patsubst ./src/%.c, ./obj/%.o, $(src))			</div><div class="line">target = $(patsubst ./src/%.c, ./%, $(src))</div><div class="line"></div><div class="line">inc_path = ./inc</div><div class="line">lib_paht = ./lib</div><div class="line">libname = xxxsocket</div><div class="line"></div><div class="line">ALL:$(target)</div><div class="line"></div><div class="line">$(target):./%:./obj/%.o</div><div class="line">	gcc $&lt; -o $@  -L$(lib_paht) -l$(libname) -I$(inc_path)</div><div class="line"></div><div class="line">$(obj):./obj/%.o:./src/%.c</div><div class="line">	gcc -c $&lt; -o $@ -L$(lib_paht) -l$(libname) -I$(inc_path)</div><div class="line"></div><div class="line">clean:</div><div class="line">	-rm -rf $(obj) $(target)</div><div class="line"></div><div class="line">.PHONY: ALL clean</div></pre></td></tr></table></figure>
<h2 id="7-常见操作"><a href="#7-常见操作" class="headerlink" title="7 常见操作"></a>7 常见操作</h2><h3 id="目录迭代问题"><a href="#目录迭代问题" class="headerlink" title="目录迭代问题"></a>目录迭代问题</h3><p>解决方案:<br>(1) 在目录中继续生成一个Makefile文件<br>(2) make -C sub</p>
<p>示例:<img src="http://static.zybuluo.com/zhiyu/lkgsnw3rgty6b7b54dvd912b/2.png" alt="2.png-52kB"></p>
<h3 id="子Makefile问题"><a href="#子Makefile问题" class="headerlink" title="子Makefile问题"></a>子Makefile问题</h3><p>将一些常用的修改属性合并到一个子文件中去<br>命名: def.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-include def.mk</div><div class="line"># 前面的 - 号指的是,如果文件不存在,自动忽略,不要报错</div></pre></td></tr></table></figure></p>
<h3 id="自动推导"><a href="#自动推导" class="headerlink" title="自动推导"></a>自动推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; gcc -MM a.c</div><div class="line">&gt; # 查看a.c的文件依赖命令</div></pre></td></tr></table></figure>
<p>方法描述:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 临时生成一份 .d 文件</div><div class="line">&gt; 文件的内容就是 x.o 的所有文件依赖</div><div class="line">&gt; 只要在makefile文件中下,-include $(deps)</div><div class="line">也就相当于, 在马克file文件中写入这样依据依赖: a.o: a.c a.h</div></pre></td></tr></table></figure></p>
<p>示例:<img src="http://static.zybuluo.com/zhiyu/o979hd4x1lb9q0tm7wxeprxq/3.png" alt="3.png-72.5kB"></p>
<h2 id="7-其他用途"><a href="#7-其他用途" class="headerlink" title="7 其他用途"></a>7 其他用途</h2><p>文件拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 找到A目录下的所有普通文件</div><div class="line">(1) file_in_A := $(shell find A -type f)</div><div class="line"></div><div class="line">(2) Makefile: $(file_in_A)</div><div class="line">        cp $? b # 复制所有最近更新的文件</div><div class="line">        touch Makefile</div></pre></td></tr></table></figure></p>
<h2 id="8-最后"><a href="#8-最后" class="headerlink" title="8 最后"></a>8 最后</h2><blockquote>
<p>因为makefile的写法还是过于复杂,现在实际应用中已经较少有人使用makefile,与之替代的是<code>CMake</code>和<code>QMake</code>,但是底层其实都是基于makefile的实现,所以关于makefile我们还是要知道了解一些为好.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人的一切痛苦,本质上都是对自己的无能的愤怒&lt;br&gt;—— &lt;strong&gt;王小波&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="MakeFile" scheme="http://yoursite.com/tags/MakeFile/"/>
    
  </entry>
  
  <entry>
    <title>浅谈算法 之 索引堆</title>
    <link href="http://yoursite.com/2017/03/19/IndexHeap/"/>
    <id>http://yoursite.com/2017/03/19/IndexHeap/</id>
    <published>2017-03-19T14:00:36.000Z</published>
    <updated>2017-03-20T13:43:01.125Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<p><blockquote class="blockquote-center"><br>没有人不爱惜他的生命，但很少人珍视他的时间。<br>—— <strong>梁实秋</strong><br></blockquote><br><a id="more"></a></p>
<blockquote>
<p>这里主要讨论的是，数组化的实现堆的经典方法。</p>
</blockquote>
<h2 id="1-为什么要使用索引堆"><a href="#1-为什么要使用索引堆" class="headerlink" title="1 为什么要使用索引堆"></a>1 为什么要使用索引堆</h2><blockquote>
<p>索引堆从名称也可以看得出来，是堆的一种高级形态</p>
</blockquote>
<p>有这样一个基础概念，想在此强调一下，那就是：</p>
<blockquote>
<p>对于堆化的过程中，原来数组的索引将被破坏掉。</p>
</blockquote>
<p>这也是就是<strong>索引堆的意义</strong>，或者说索引堆的<strong>核心价值</strong>。</p>
<p>就是因为普通堆在成堆之后，数组的高效索引能力被严重破坏掉，因为成堆之后的下标与原始数据之后没有做关系维护。</p>
<p>这个时候就需要另外一个数组来维护原始数据和成堆后的数据之间的关系。</p>
<p>另外，还有一个问题：</p>
<blockquote>
<p><code>shiftUp</code>和<code>shiftDown</code>中的交换操作</p>
</blockquote>
<p>在普通堆中，<code>shiftUp</code>和<code>shiftDown</code>中都要进行一步交换两个节点之间的值的步骤，但是如果节点值只是简单的数字，也是交换操作不会造成太大的影响，但是如果不是数字呢，而是一个字符串，或者一个更大的数据类型时，那么交换带来的副作用将会被大大提升。</p>
<p>p.s. 当然这里交换的操作，我们可以简单的通过一些技术手段来替代。</p>
<p>所以，这时，我们的英雄登场了：索引堆，先来看看它的数据结构。</p>
<h2 id="2-索引堆的数据结构"><a href="#2-索引堆的数据结构" class="headerlink" title="2 索引堆的数据结构"></a>2 索引堆的数据结构</h2><p>索引堆在普通堆的基础之上，其实多维护了一个<code>indexes</code>数组而已，它记录着<code>data</code>中的索引，在堆中的位置，也就是indexes[i] = x 的意思就是，data[x]这个元素，在堆中的实际位置是 i。</p>
<p>看下索引堆的数据结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item * data;</div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="3-索引堆过程"><a href="#3-索引堆过程" class="headerlink" title="3 索引堆过程"></a>3 索引堆过程</h2><p>索引堆的整个操作中，并没有对原始数据进行任何操作（只是用来比较），而真正处理的索引数组<code>indexes</code>中的索引，把索引进行了一次堆排序。</p>
<p>这样就根本上避免了数组中交换元素可能带来的副作用，而且相应的带来另外一个巨大的好处：直接可以索引到6号元素——<code>data[6]</code>，这在原始堆的实现过程中，是无法实现的，因为堆的索引性质在成堆过程中被破坏，只能简单的拿到堆的根节点（最大或者最小）。</p>
<blockquote>
<p>因为成堆的过程，数组变成一棵树的容器，索引性还在，但是树中的，尤其在堆中的这种树，其实我们只关心根节点，对其他任何节点没有索引意义，原来的第6号元素，跟现在树中的6号元素没有任何关联。</p>
</blockquote>
<p>但是，索引堆的中<code>data</code>数组没有被修改，仍然是一个数组性质，而且还可以通过<code>indexes</code>数组找到，<code>data</code>中元素在堆中的位置，<code>indexes[位置] = data对应的下标</code>，如简单的，根节点的位置就是 <code>indexes[1]</code> 的值，也就是data中对应元素的下标位置。</p>
<h2 id="4-调整优先级"><a href="#4-调整优先级" class="headerlink" title="4 调整优先级"></a>4 调整优先级</h2><p>而且，还可以进行一个重要的操作：<code>change</code></p>
<blockquote>
<p>修改原始数据的优先级，或者可以简单的理解为，修改了原始数据的值。</p>
</blockquote>
<p><strong><code>wow, this really kicks original heap&#39;s ass</code></strong></p>
<h2 id="5-Reverse-数组"><a href="#5-Reverse-数组" class="headerlink" title="5 Reverse 数组"></a>5 Reverse 数组</h2><p>索引堆如此厉害，但是与此同时，又带来了一个新的问题：</p>
<blockquote>
<p><code>indexes</code>数组成堆的过程中，<code>indexes</code>数组的索引意义也不在了，我们不能快速的（<code>O(1)</code>）获取到，比如1号索引在堆中的位置，因为所有的索引都被打乱了。</p>
</blockquote>
<p>所以在<code>change</code>过程中，我们获取到了<code>data</code>元素的下标，如果得知这个下标在堆中的位置呢？</p>
<p>这个时候，就又用到了一个数组，来维护indexes数组中的下标与堆中位置的关系，也就是<code>reverse数组</code>。</p>
<p>再看下，此时的索引堆的数据结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item * data;</div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line">    <span class="keyword">int</span>  * reverse;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可能上面的说法，还是不足够清晰的表达出来，到底<code>reverse</code>数组的意义是什么？</p>
<blockquote>
<p>其实主要就为了一个<code>change</code>函数可以以 <code>O(1)</code> 的时间复杂度来访问到，<br>要修改的元素在索引堆的位置。</p>
</blockquote>
<p>简单的，我们可以得到以下的等式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 堆中i位置上对应的data的下标，也就是j</span></div><div class="line"><span class="comment">// 也就是data[j]，在堆中的实际位置是i</span></div><div class="line"><span class="comment">// 或者说，堆中i的位置是，data[j]的下标j</span></div><div class="line">indexes[i] = j;</div><div class="line"></div><div class="line"><span class="comment">// 堆中j的位置是，indexes[i]的下标i</span></div><div class="line">reverse[j] = i;</div></pre></td></tr></table></figure></p>
<p>所以呢，再次看出来，如果想与堆中的索引建立联系，必须要多维护一个数组。</p>
<h2 id="6-不断维护Reverse和Indexes数组"><a href="#6-不断维护Reverse和Indexes数组" class="headerlink" title="6 不断维护Reverse和Indexes数组"></a>6 不断维护Reverse和Indexes数组</h2><blockquote>
<p>只要是操作indexes的地方，都要相应的操作reverse数组，进行匹配</p>
</blockquote>
<h2 id="7-应用"><a href="#7-应用" class="headerlink" title="7 应用"></a>7 应用</h2><blockquote>
<p>对索引堆的使用，在图论中关于有权图，单源最短路径问题的算法中，比如<code>Dijkstra</code>算法和<code>Bellman-Ford</code>算法中都有使用，用来维护最短权值的数组。</p>
</blockquote>
<h2 id="最后，附上源码"><a href="#最后，附上源码" class="headerlink" title="最后，附上源码"></a>最后，附上源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INDEXMINHEAP_INDEXMINHEAP_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INDEXMINHEAP_INDEXMINHEAP_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"></div><div class="line">    <span class="comment">// 原始数据，对原始数据并不需要进行实际的操作，下标不变</span></div><div class="line">    Item * data;</div><div class="line"></div><div class="line">    <span class="comment">// indexes[i]表示堆中第i个元素在data中索引</span></div><div class="line">    <span class="comment">// 比如indexes[1] = 10，也就是说，堆的根节点，是data中的10号元素</span></div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line"></div><div class="line">    <span class="comment">// reverse[i]表示索引i在indexes(堆)中的位置</span></div><div class="line">    <span class="comment">// reverse[10] = 1，也就是说，10号索引在堆中的位置是1号元素，也就是根节点</span></div><div class="line">    <span class="comment">// reverse[x] = 0; 表示索引不存在</span></div><div class="line">    <span class="keyword">int</span>  * reverse;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">( <span class="keyword">int</span> k )</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>( k &gt; <span class="number">1</span> &amp;&amp; data[indexes[k]] &lt; data[indexes[k/<span class="number">2</span>]] )&#123;</div><div class="line">            <span class="built_in">std</span>::swap( indexes[k] , indexes[k/<span class="number">2</span>] );</div><div class="line">            reverse[indexes[k]] = k;</div><div class="line">            reverse[indexes[k/<span class="number">2</span>]] = k/<span class="number">2</span>;</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">( <span class="keyword">int</span> k )</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k &lt;= count )&#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">2</span>*k;</div><div class="line">            <span class="keyword">if</span>( i+<span class="number">1</span> &lt;= count &amp;&amp; data[indexes[i]] &gt; data[indexes[i+<span class="number">1</span>]] )</div><div class="line">                i += <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>( data[indexes[k]] &lt;= data[indexes[i]] )</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">std</span>::swap( indexes[k] , indexes[i] );</div><div class="line">            reverse[indexes[k]] = k;</div><div class="line">            reverse[indexes[i]] = i;</div><div class="line">            k = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    IndexMinHeap( <span class="keyword">int</span> capacity )&#123;</div><div class="line">        data = <span class="keyword">new</span> Item[capacity+<span class="number">1</span>];</div><div class="line">        indexes = <span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</div><div class="line">        reverse = <span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; capacity ; ++ i )</div><div class="line">            reverse[i] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</div><div class="line">        <span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~MinHeap()&#123;</div><div class="line">        <span class="keyword">delete</span>[] data;</div><div class="line">        <span class="keyword">delete</span>[] indexes;</div><div class="line">        <span class="keyword">delete</span>[] reverse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 传入的i对于用户而言，是从0开始索引的</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">int</span> i , Item item )</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count + <span class="number">1</span> &lt;= capacity );</div><div class="line">        assert( i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity );</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        count += <span class="number">1</span>;</div><div class="line"></div><div class="line">        data[i] = item;</div><div class="line">        indexes[count] = i;<span class="comment">// 把data中的索引i，放入indexes数组</span></div><div class="line">        reverse[i] = count;<span class="comment">// 把indexes中的索引i，放入reverse数组</span></div><div class="line"></div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Item <span class="title">extractMin</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line"></div><div class="line">        Item ret = data[indexes[<span class="number">1</span>]];</div><div class="line">        <span class="built_in">std</span>::swap( indexes[<span class="number">1</span>] , indexes[count] );</div><div class="line">        reverse[indexes[<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        reverse[indexes[count]] = <span class="number">0</span>;</div><div class="line">        count --;</div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extractMinIndex</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = indexes[<span class="number">1</span>] - <span class="number">1</span>;<span class="comment">// 返回从0开始的索引值</span></div><div class="line">        <span class="built_in">std</span>::swap( indexes[<span class="number">1</span>] , indexes[count] );</div><div class="line">        reverse[indexes[<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        reverse[indexes[count]] = <span class="number">0</span>;</div><div class="line">        count --;</div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Item <span class="title">getMin</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> data[indexes[<span class="number">1</span>]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinIndex</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> indexes[<span class="number">1</span>] - <span class="number">1</span>;<span class="comment">// 返回从0开始的索引值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对用户而言，参入的参数就是实际的数据的下标，且是从0开始的索引</span></div><div class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</div><div class="line">        assert( i+<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i+<span class="number">1</span> &lt;= capacity );</div><div class="line">        <span class="keyword">return</span> data[i+<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</div><div class="line">        assert( i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity );</div><div class="line">        <span class="keyword">return</span> reverse[i+<span class="number">1</span>] != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">( <span class="keyword">int</span> i , Item newItem )</span></span>&#123;</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = newItem;</div><div class="line"></div><div class="line">        <span class="comment">// 找到indexes[j] = i, j表示data[i]在堆中的位置</span></div><div class="line">        <span class="comment">// 之后shiftUp，再shiftDown ( 先shiftDown，再shiftUp也可以 )</span></div><div class="line"></div><div class="line"><span class="comment">//        for( int j = 1 ; j &lt;= count ; ++ j )</span></div><div class="line"><span class="comment">//            if( indexes[j] == i )&#123;</span></div><div class="line"><span class="comment">//                shiftUp( j );</span></div><div class="line"><span class="comment">//                shiftDown( j );</span></div><div class="line"><span class="comment">//                return;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = reverse[i];</div><div class="line">        shiftUp( j );</div><div class="line">        shiftDown( j );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//INDEXMINHEAP_INDEXMINHEAP_H</span></span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;没有人不爱惜他的生命，但很少人珍视他的时间。&lt;br&gt;—— &lt;strong&gt;梁实秋&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="堆/优先队列" scheme="http://yoursite.com/tags/%E5%A0%86-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="图论基础" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
