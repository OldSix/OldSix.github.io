<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Six&#39;s a Coder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-19T18:34:46.653Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Six</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MakeFile</title>
    <link href="http://yoursite.com/2017/03/19/MakeFile/"/>
    <id>http://yoursite.com/2017/03/19/MakeFile/</id>
    <published>2017-03-19T14:43:38.000Z</published>
    <updated>2017-03-19T18:34:46.653Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<p><blockquote class="blockquote-center"><br>人的一切痛苦,本质上都是对自己的无能的愤怒<br><strong>王小波</strong><br></blockquote><br><a id="more"></a></p>
<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h2><p>MakeFile 是一种经典的项目管理工具.其实也是一种脚本,有着自己独特的语法.</p>
<h2 id="2-基本元素"><a href="#2-基本元素" class="headerlink" title="2 基本元素"></a>2 基本元素</h2><p>Makefile元素:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">目标: 依赖</div><div class="line">        命令</div></pre></td></tr></table></figure></p>
<p>目标可以有多个依赖,依赖有传递性.<code>make</code>命令去执行Makefile,Makefile的名字固定为<code>Makefile</code>或者<code>makefile</code>,也可以自定义名字,但需要<code>-f</code>指定.</p>
<p>make默认生成第一个依赖项.如果想生成其他依赖项,直接在make后跟依赖项即可.比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; make clean</div><div class="line"></div><div class="line"># 一般可能还要配合sudo命令来使用</div><div class="line">&gt; make install</div><div class="line">&gt; make uninstall</div><div class="line"></div><div class="line"></div><div class="line"># 主要用来测试</div><div class="line"># echo $(CC)</div><div class="line">&gt; make test</div></pre></td></tr></table></figure></p>
<p>一般的,把第一个目标叫做<code>all</code></p>
<h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h2><p>可以使用变量来简化Makefile,定义变量可以使用</p>
<h3 id="定义一个变量"><a href="#定义一个变量" class="headerlink" title="定义一个变量"></a>定义一个变量</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># := 表示立即赋值,推荐使用</span></div><div class="line"><span class="comment"># 也可以使用 = , 使用时才赋值</span></div><div class="line">libname := libxxx.so </div><div class="line"></div><div class="line">objs := a.o b.o c.o</div><div class="line"></div><div class="line">a.out: $(objs)</div><div class="line">    gcc $^</div></pre></td></tr></table></figure>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>shell</code>中的环境变量可以在makefile脚本中直接使用.比如 <code>PATH</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意空格需要转义才行</div><div class="line">export objs = a.o\ b.o\ c.o</div></pre></td></tr></table></figure>
<p>另外,当本地变量与环境变量重名时,本地变量会覆盖环境变量.</p>
<h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$^ 表示所有依赖项</div><div class="line">$&lt; 表示第一个依赖项</div><div class="line">$@ 表示目标</div><div class="line"></div><div class="line">$? </div><div class="line">表示所有比目标文件更&quot;新&quot;的依赖文件列表</div><div class="line">用于文件拷贝时,有特殊的用途</div></pre></td></tr></table></figure>
<h2 id="4-缺省规则"><a href="#4-缺省规则" class="headerlink" title="4 缺省规则"></a>4 缺省规则</h2><p>缺省规则是make系统提供的默认的规则,比如 x.o<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%.o: %.c</div><div class="line">    $(CC) -c $(CPPFLAGS) $(CFLAGS) $&lt;</div><div class="line"></div><div class="line"><span class="comment"># % 是通配符的意思,表示任意的.o文件</span></div><div class="line"></div><div class="line"><span class="comment"># $(CC) 就是cc,也就是gcc</span></div><div class="line">ls -al /usr/bin/cc 可以看出, cc就是gcc的一个软链接而已</div></pre></td></tr></table></figure></p>
<h2 id="5-函数的使用"><a href="#5-函数的使用" class="headerlink" title="5 函数的使用"></a>5 函数的使用</h2><p>主要是shell命令的内置用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">srcs := `ls *.c`</div><div class="line">srcs :=  $(shell ls *.c)</div><div class="line"></div><div class="line">objs := $(srcs:.c=.o)</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/caspiansea/article/details/27580571" target="_blank" rel="external">案例1</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CXX = g++  </div><div class="line">CXXFLAGS = -g -I. -Wall  </div><div class="line">SRCS = $(shell find -name &quot;*.cpp&quot;)  </div><div class="line">OBJECTS = $(SRCS:%.cpp=%.o)  </div><div class="line">TARGETS = $(SRCS:%.cpp=%)  </div><div class="line"></div><div class="line">all: $(TARGETS)  </div><div class="line">    @for target in $(TARGETS); \  </div><div class="line">    do                        \  </div><div class="line">    $(CXX) $(CXXFLAGS) -o target</div><div class="line">    target.cpp; \  </div><div class="line">    done</div><div class="line"></div><div class="line">clean:  </div><div class="line">    -rm -f $(TARGETS) $(OBJECTS)</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/njnu_mjn/article/details/12971753" target="_blank" rel="external">案例2</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">files=main.exe a.exe b.exe  </div><div class="line">  </div><div class="line">all:  </div><div class="line">    for name in `echo $(files) | sed s/.exe//g`; \  </div><div class="line">    do \  </div><div class="line">        rm -f &quot;$$name&quot;.o; \  </div><div class="line">    done</div></pre></td></tr></table></figure></p>
<h2 id="6-常见操作"><a href="#6-常见操作" class="headerlink" title="6 常见操作"></a>6 常见操作</h2><h3 id="目录迭代问题"><a href="#目录迭代问题" class="headerlink" title="目录迭代问题"></a>目录迭代问题</h3><p>解决方案:<br>(1) 在目录中继续生成一个Makefile文件<br>(2) make -C sub</p>
<p>示例:<img src="http://static.zybuluo.com/zhiyu/lkgsnw3rgty6b7b54dvd912b/2.png" alt="2.png-52kB"></p>
<h3 id="子Makefile问题"><a href="#子Makefile问题" class="headerlink" title="子Makefile问题"></a>子Makefile问题</h3><p>将一些常用的修改属性合并到一个子文件中去<br>命名: def.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-include def.mk</div><div class="line"># 前面的 - 号指的是,如果文件不存在,自动忽略,不要报错</div></pre></td></tr></table></figure></p>
<h3 id="自动推导"><a href="#自动推导" class="headerlink" title="自动推导"></a>自动推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; gcc -MM a.c</div><div class="line">&gt; # 查看a.c的文件依赖命令</div></pre></td></tr></table></figure>
<p>方法描述:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 临时生成一份 .d 文件</div><div class="line">&gt; 文件的内容就是 x.o 的所有文件依赖</div><div class="line">&gt; 只要在makefile文件中下,-include $(deps)</div><div class="line">也就相当于, 在马克file文件中写入这样依据依赖: a.o: a.c a.h</div></pre></td></tr></table></figure></p>
<p>示例:<img src="http://static.zybuluo.com/zhiyu/o979hd4x1lb9q0tm7wxeprxq/3.png" alt="3.png-72.5kB"></p>
<h2 id="7-其他用途"><a href="#7-其他用途" class="headerlink" title="7 其他用途"></a>7 其他用途</h2><p>文件拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 找到A目录下的所有普通文件</div><div class="line">(1) file_in_A := $(shell find A -type f)</div><div class="line"></div><div class="line">(2) Makefile: $(file_in_A)</div><div class="line">        cp $? b # 复制所有最近更新的文件</div><div class="line">        touch Makefile</div></pre></td></tr></table></figure></p>
<h2 id="8-最后"><a href="#8-最后" class="headerlink" title="8 最后"></a>8 最后</h2><blockquote>
<p>因为makefile的写法还是过于复杂,现在实际应用中已经较少有人使用makefile,与之替代的是<code>CMake</code>和<code>QMake</code>,但是底层其实都是基于makefile的实现,所以关于makefile我们还是要知道了解一些为好.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;人的一切痛苦,本质上都是对自己的无能的愤怒&lt;br&gt;&lt;strong&gt;王小波&lt;/strong&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="MakeFile" scheme="http://yoursite.com/tags/MakeFile/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>索引堆</title>
    <link href="http://yoursite.com/2017/03/19/IndexHeap/"/>
    <id>http://yoursite.com/2017/03/19/IndexHeap/</id>
    <published>2017-03-19T14:00:36.000Z</published>
    <updated>2017-03-19T18:35:02.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里主要讨论的是，数组化的实现堆的经典方法。</p>
</blockquote>
<h2 id="1-为什么要使用索引堆"><a href="#1-为什么要使用索引堆" class="headerlink" title="1 为什么要使用索引堆"></a>1 为什么要使用索引堆</h2><blockquote>
<p>索引堆从名称也可以看得出来，是堆的一种高级形态</p>
</blockquote>
<p>有这样一个基础概念，想在此强调一下，那就是：</p>
<blockquote>
<p>对于堆化的过程中，原来数组的索引将被破坏掉。</p>
</blockquote>
<p>这也是就是<strong>索引堆的意义</strong>，或者说索引堆的<strong>核心价值</strong>。</p>
<p>就是因为普通堆在成堆之后，数组的高效索引能力被严重破坏掉，因为成堆之后的下标与原始数据之后没有做关系维护。</p>
<p>这个时候就需要另外一个数组来维护原始数据和成堆后的数据之间的关系。</p>
<p>另外，还有一个问题：</p>
<blockquote>
<p><code>shiftUp</code>和<code>shiftDown</code>中的交换操作</p>
</blockquote>
<p>在普通堆中，<code>shiftUp</code>和<code>shiftDown</code>中都要进行一步交换两个节点之间的值的步骤，但是如果节点值只是简单的数字，也是交换操作不会造成太大的影响，但是如果不是数字呢，而是一个字符串，或者一个更大的数据类型时，那么交换带来的副作用将会被大大提升。</p>
<p>p.s. 当然这里交换的操作，我们可以简单的通过一些技术手段来替代。</p>
<p>所以，这时，我们的英雄登场了：索引堆，先来看看它的数据结构。</p>
<a id="more"></a>
<h2 id="2-索引堆的数据结构"><a href="#2-索引堆的数据结构" class="headerlink" title="2 索引堆的数据结构"></a>2 索引堆的数据结构</h2><p>索引堆在普通堆的基础之上，其实多维护了一个<code>indexes</code>数组而已，它记录着<code>data</code>中的索引，在堆中的位置，也就是indexes[i] = x 的意思就是，data[x]这个元素，在堆中的实际位置是 i。</p>
<p>看下索引堆的数据结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item * data;</div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="3-索引堆过程"><a href="#3-索引堆过程" class="headerlink" title="3 索引堆过程"></a>3 索引堆过程</h2><p>索引堆的整个操作中，并没有对原始数据进行任何操作（只是用来比较），而真正处理的索引数组<code>indexes</code>中的索引，把索引进行了一次堆排序。</p>
<p>这样就根本上避免了数组中交换元素可能带来的副作用，而且相应的带来另外一个巨大的好处：直接可以索引到6号元素——<code>data[6]</code>，这在原始堆的实现过程中，是无法实现的，因为堆的索引性质在成堆过程中被破坏，只能简单的拿到堆的根节点（最大或者最小）。</p>
<blockquote>
<p>因为成堆的过程，数组变成一棵树的容器，索引性还在，但是树中的，尤其在堆中的这种树，其实我们只关心根节点，对其他任何节点没有索引意义，原来的第6号元素，跟现在树中的6号元素没有任何关联。</p>
</blockquote>
<p>但是，索引堆的中<code>data</code>数组没有被修改，仍然是一个数组性质，而且还可以通过<code>indexes</code>数组找到，<code>data</code>中元素在堆中的位置，<code>indexes[位置] = data对应的下标</code>，如简单的，根节点的位置就是 <code>indexes[1]</code> 的值，也就是data中对应元素的下标位置。</p>
<h2 id="4-调整优先级"><a href="#4-调整优先级" class="headerlink" title="4 调整优先级"></a>4 调整优先级</h2><p>而且，还可以进行一个重要的操作：<code>change</code></p>
<blockquote>
<p>修改原始数据的优先级，或者可以简单的理解为，修改了原始数据的值。</p>
</blockquote>
<p><strong><code>wow, this really kicks original heap&#39;s ass</code></strong></p>
<h2 id="5-Reverse-数组"><a href="#5-Reverse-数组" class="headerlink" title="5 Reverse 数组"></a>5 Reverse 数组</h2><p>索引堆如此厉害，但是与此同时，又带来了一个新的问题：</p>
<blockquote>
<p><code>indexes</code>数组成堆的过程中，<code>indexes</code>数组的索引意义也不在了，我们不能快速的（<code>O(1)</code>）获取到，比如1号索引在堆中的位置，因为所有的索引都被打乱了。</p>
</blockquote>
<p>所以在<code>change</code>过程中，我们获取到了<code>data</code>元素的下标，如果得知这个下标在堆中的位置呢？</p>
<p>这个时候，就又用到了一个数组，来维护indexes数组中的下标与堆中位置的关系，也就是<code>reverse数组</code>。</p>
<p>再看下，此时的索引堆的数据结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item * data;</div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line">    <span class="keyword">int</span>  * reverse;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可能上面的说法，还是不足够清晰的表达出来，到底<code>reverse</code>数组的意义是什么？</p>
<blockquote>
<p>其实主要就为了一个<code>change</code>函数可以以 <code>O(1)</code> 的时间复杂度来访问到，<br>要修改的元素在索引堆的位置。</p>
</blockquote>
<p>简单的，我们可以得到以下的等式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 堆中i位置上对应的data的下标，也就是j</span></div><div class="line"><span class="comment">// 也就是data[j]，在堆中的实际位置是i</span></div><div class="line"><span class="comment">// 或者说，堆中i的位置是，data[j]的下标j</span></div><div class="line">indexes[i] = j;</div><div class="line"></div><div class="line"><span class="comment">// 堆中j的位置是，indexes[i]的下标i</span></div><div class="line">reverse[j] = i;</div></pre></td></tr></table></figure></p>
<p>所以呢，再次看出来，如果想与堆中的索引建立联系，必须要多维护一个数组。</p>
<h2 id="6-不断维护Reverse和Indexes数组"><a href="#6-不断维护Reverse和Indexes数组" class="headerlink" title="6 不断维护Reverse和Indexes数组"></a>6 不断维护Reverse和Indexes数组</h2><blockquote>
<p>只要是操作indexes的地方，都要相应的操作reverse数组，进行匹配</p>
</blockquote>
<h2 id="7-应用"><a href="#7-应用" class="headerlink" title="7 应用"></a>7 应用</h2><blockquote>
<p>对索引堆的使用，在图论中关于有权图，单源最短路径问题的算法中，比如<code>Dijkstra</code>算法和<code>Bellman-Ford</code>算法中都有使用，用来维护最短权值的数组。</p>
</blockquote>
<h2 id="最后，附上源码"><a href="#最后，附上源码" class="headerlink" title="最后，附上源码"></a>最后，附上源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INDEXMINHEAP_INDEXMINHEAP_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INDEXMINHEAP_INDEXMINHEAP_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMinHeap&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"></div><div class="line">    <span class="comment">// 原始数据，对原始数据并不需要进行实际的操作，下标不变</span></div><div class="line">    Item * data;</div><div class="line"></div><div class="line">    <span class="comment">// indexes[i]表示堆中第i个元素在data中索引</span></div><div class="line">    <span class="comment">// 比如indexes[1] = 10，也就是说，堆的根节点，是data中的10号元素</span></div><div class="line">    <span class="keyword">int</span>  * indexes;</div><div class="line"></div><div class="line">    <span class="comment">// reverse[i]表示索引i在indexes(堆)中的位置</span></div><div class="line">    <span class="comment">// reverse[10] = 1，也就是说，10号索引在堆中的位置是1号元素，也就是根节点</span></div><div class="line">    <span class="comment">// reverse[x] = 0; 表示索引不存在</span></div><div class="line">    <span class="keyword">int</span>  * reverse;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">( <span class="keyword">int</span> k )</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>( k &gt; <span class="number">1</span> &amp;&amp; data[indexes[k]] &lt; data[indexes[k/<span class="number">2</span>]] )&#123;</div><div class="line">            <span class="built_in">std</span>::swap( indexes[k] , indexes[k/<span class="number">2</span>] );</div><div class="line">            reverse[indexes[k]] = k;</div><div class="line">            reverse[indexes[k/<span class="number">2</span>]] = k/<span class="number">2</span>;</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">( <span class="keyword">int</span> k )</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k &lt;= count )&#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">2</span>*k;</div><div class="line">            <span class="keyword">if</span>( i+<span class="number">1</span> &lt;= count &amp;&amp; data[indexes[i]] &gt; data[indexes[i+<span class="number">1</span>]] )</div><div class="line">                i += <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>( data[indexes[k]] &lt;= data[indexes[i]] )</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">std</span>::swap( indexes[k] , indexes[i] );</div><div class="line">            reverse[indexes[k]] = k;</div><div class="line">            reverse[indexes[i]] = i;</div><div class="line">            k = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    IndexMinHeap( <span class="keyword">int</span> capacity )&#123;</div><div class="line">        data = <span class="keyword">new</span> Item[capacity+<span class="number">1</span>];</div><div class="line">        indexes = <span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</div><div class="line">        reverse = <span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; capacity ; ++ i )</div><div class="line">            reverse[i] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</div><div class="line">        <span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~MinHeap()&#123;</div><div class="line">        <span class="keyword">delete</span>[] data;</div><div class="line">        <span class="keyword">delete</span>[] indexes;</div><div class="line">        <span class="keyword">delete</span>[] reverse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 传入的i对于用户而言，是从0开始索引的</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">int</span> i , Item item )</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count + <span class="number">1</span> &lt;= capacity );</div><div class="line">        assert( i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity );</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        count += <span class="number">1</span>;</div><div class="line"></div><div class="line">        data[i] = item;</div><div class="line">        indexes[count] = i;<span class="comment">// 把data中的索引i，放入indexes数组</span></div><div class="line">        reverse[i] = count;<span class="comment">// 把indexes中的索引i，放入reverse数组</span></div><div class="line"></div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Item <span class="title">extractMin</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line"></div><div class="line">        Item ret = data[indexes[<span class="number">1</span>]];</div><div class="line">        <span class="built_in">std</span>::swap( indexes[<span class="number">1</span>] , indexes[count] );</div><div class="line">        reverse[indexes[<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        reverse[indexes[count]] = <span class="number">0</span>;</div><div class="line">        count --;</div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extractMinIndex</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = indexes[<span class="number">1</span>] - <span class="number">1</span>;<span class="comment">// 返回从0开始的索引值</span></div><div class="line">        <span class="built_in">std</span>::swap( indexes[<span class="number">1</span>] , indexes[count] );</div><div class="line">        reverse[indexes[<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">        reverse[indexes[count]] = <span class="number">0</span>;</div><div class="line">        count --;</div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Item <span class="title">getMin</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> data[indexes[<span class="number">1</span>]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinIndex</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> indexes[<span class="number">1</span>] - <span class="number">1</span>;<span class="comment">// 返回从0开始的索引值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对用户而言，参入的参数就是实际的数据的下标，且是从0开始的索引</span></div><div class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</div><div class="line">        assert( i+<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i+<span class="number">1</span> &lt;= capacity );</div><div class="line">        <span class="keyword">return</span> data[i+<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</div><div class="line">        assert( i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity );</div><div class="line">        <span class="keyword">return</span> reverse[i+<span class="number">1</span>] != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">( <span class="keyword">int</span> i , Item newItem )</span></span>&#123;</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = newItem;</div><div class="line"></div><div class="line">        <span class="comment">// 找到indexes[j] = i, j表示data[i]在堆中的位置</span></div><div class="line">        <span class="comment">// 之后shiftUp，再shiftDown ( 先shiftDown，再shiftUp也可以 )</span></div><div class="line"></div><div class="line"><span class="comment">//        for( int j = 1 ; j &lt;= count ; ++ j )</span></div><div class="line"><span class="comment">//            if( indexes[j] == i )&#123;</span></div><div class="line"><span class="comment">//                shiftUp( j );</span></div><div class="line"><span class="comment">//                shiftDown( j );</span></div><div class="line"><span class="comment">//                return;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = reverse[i];</div><div class="line">        shiftUp( j );</div><div class="line">        shiftDown( j );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//INDEXMINHEAP_INDEXMINHEAP_H</span></span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里主要讨论的是，数组化的实现堆的经典方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-为什么要使用索引堆&quot;&gt;&lt;a href=&quot;#1-为什么要使用索引堆&quot; class=&quot;headerlink&quot; title=&quot;1 为什么要使用索引堆&quot;&gt;&lt;/a&gt;1 为什么要使用索引堆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;索引堆从名称也可以看得出来，是堆的一种高级形态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有这样一个基础概念，想在此强调一下，那就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于堆化的过程中，原来数组的索引将被破坏掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也是就是&lt;strong&gt;索引堆的意义&lt;/strong&gt;，或者说索引堆的&lt;strong&gt;核心价值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;就是因为普通堆在成堆之后，数组的高效索引能力被严重破坏掉，因为成堆之后的下标与原始数据之后没有做关系维护。&lt;/p&gt;
&lt;p&gt;这个时候就需要另外一个数组来维护原始数据和成堆后的数据之间的关系。&lt;/p&gt;
&lt;p&gt;另外，还有一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shiftUp&lt;/code&gt;和&lt;code&gt;shiftDown&lt;/code&gt;中的交换操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在普通堆中，&lt;code&gt;shiftUp&lt;/code&gt;和&lt;code&gt;shiftDown&lt;/code&gt;中都要进行一步交换两个节点之间的值的步骤，但是如果节点值只是简单的数字，也是交换操作不会造成太大的影响，但是如果不是数字呢，而是一个字符串，或者一个更大的数据类型时，那么交换带来的副作用将会被大大提升。&lt;/p&gt;
&lt;p&gt;p.s. 当然这里交换的操作，我们可以简单的通过一些技术手段来替代。&lt;/p&gt;
&lt;p&gt;所以，这时，我们的英雄登场了：索引堆，先来看看它的数据结构。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法 堆 图论" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95-%E5%A0%86-%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
</feed>
